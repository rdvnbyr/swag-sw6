Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"swag_amazonpay",key:"swag_amazonpay",roles:{viewer:{privileges:["sales_channel:read","sales_channel_domain:read","sales_channel_payment_method:read","system_config:read"],dependencies:[]},editor:{privileges:["sales_channel:update","sales_channel_payment_method:create","sales_channel_payment_method:update","system_config:update","system_config:create","system_config:delete"],dependencies:["swag_amazonpay.viewer"]}}});const P=`{% block swag_amazon_pay_settings %} <sw-page class="swag-amazon-pay-settings"> {% block swag_amazon_pay_settings_header %} <template #smart-bar-header> <h2> {{ $tc('sw-settings.index.title') }} <mt-icon name="regular-chevron-right-xs" size="16px" ></mt-icon> {{ $tc('swag-amazon-pay-configuration.module.title') }} </h2> </template> {% endblock %} {% block swag_amazon_pay_settings_actions %} <template #smart-bar-actions> {% block swag_amazon_pay_settings_export_config %} <mt-button class="sw-settings-login-registration__export-action" :isLoading="isExporting" :disabled="isLoading || isExporting" @click="onExportConfig" variant="secondary" > {{ $tc('swag-amazon-pay-configuration.actions.exportConfig') }} </mt-button> {% endblock %} {% block swag_amazon_pay_settings_import_config %} <mt-button class="sw-settings-login-registration__import-action" :isLoading="isImporting" :disabled="isLoading || isImporting || !acl.can('swag_amazonpay.editor')" @click="onImportConfig" variant="secondary" > {{ $tc('swag-amazon-pay-configuration.actions.importConfig') }} </mt-button> {% endblock %} {% block swag_amazon_pay_settings_save %} <mt-button class="sw-settings-login-registration__save-action" variant="primary" :isLoading="isLoading" :disabled="isLoading" @click="onSave" > {{ $tc('global.default.save') }} </mt-button> {% endblock %} </template> {% endblock %} {% block swag_amazon_pay_settings_content %} <template #content> {% block swag_amazon_pay_settings_content_config_import_modal %} <swag-amazon-pay-configuration-upload-modal v-if="showConfigImportModal" @modal-close="onCloseModal()" > </swag-amazon-pay-configuration-upload-modal> {% endblock %} <sw-card-view> {% block swag_amazon_pay_settings_content_card_view %} <swag-amazon-pay-configuration salesChannelSwitchable inherit configDomain="SwagAmazonPay.settings" :parentLoading="isLoading" @change-config="onConfigChange" > </swag-amazon-pay-configuration> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Component:A}=Shopware;A.register("swag-amazon-pay-settings",{template:P,inject:["SwagAmazonPayConfigService","systemConfigApiService","acl"],mixins:["notification","sw-inline-snippet"],data(){return{isSaveSuccessful:!1,isExporting:!1,isImporting:!1,showConfigImportModal:!1,config:null,configDomain:"SwagAmazonPay.settings",salesChannelId:null,isLoading:!1}},metaInfo(){return{title:this.$tc("swag-amazon-pay-configuration.module.title")}},methods:{onSave(){this.isLoading=!0;const a={};if(!this.config.inheritFromDefault)Object.keys(this.config).forEach(e=>{const t=this.configDomain.concat(".").concat(e);a[t]=this.config[e]});else{const e=this.configDomain.concat(".").concat("inheritFromDefault");a[e]=!0}this.$emit("before-save-config",a),this.systemConfigApiService.saveValues(a,this.salesChannelId).then(()=>{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-amazon-pay-configuration.notification.configSaveSuccessMessage")}),this.isSaveSuccessful=!0,this.$emit("save-config-success")}).catch(e=>{this.$emit("save-config-error",e),this.createNotificationError({title:this.$tc("global.default.error"),message:e})}).finally(()=>{this.$emit("after-save-config",a),this.isLoading=!1})},onConfigChange(a,e){this.config=a,this.salesChannelId=e},onExportConfig(){this.isExporting=!0,this.SwagAmazonPayConfigService.exportConfig().then(a=>{const e=window.URL.createObjectURL(new Blob([JSON.stringify(a)])),t=document.createElement("a");t.href=e,t.setAttribute("download","swag-amazon-pay.config.json"),document.body.appendChild(t),t.click(),document.body.removeChild(t),this.isExportSuccessful=!0}).catch(()=>{this.createNotificationError({title:this.$tc("swag-amazon-pay-configuration.exception.exportConfig.title"),message:this.$tc("swag-amazon-pay-configuration.exception.exportConfig.message")})}).finally(()=>{this.isExporting=!1,this.isExportSuccessful=!1})},onCloseModal(){this.showConfigImportModal=!1,this.isImporting=!1},onImportConfig(){this.showConfigImportModal=!0,this.isImporting=!0}}});const F=`{% block swag_amazon_pay_configuration_input_key_modal %} <sw-modal :title="$tc('swag-amazon-pay-configuration.inputKeyModal.title')" @modal-close="onCancel" > {% block swag_amazon_pay_configuration_input_key_modal_content %} <sw-container gap="0px 10px"> {% block swag_amazon_pay_configuration_input_key_modal_content_info_text %} <sw-container gap="0px 10px"> <mt-banner> <span v-html="$tc('swag-amazon-pay-configuration.inputKeyModal.infoText')" ></span> </mt-banner> </sw-container> {% endblock %} {% block swag_amazon_pay_configuration_input_key_modal_content_private_key_input %} <mt-textarea :label="$tc('swag-amazon-pay-configuration.inputKeyModal.labelContent')" v-model="privateKey" ></mt-textarea> {% endblock %} </sw-container> {% endblock %} {% block swag_amazon_pay_configuration_input_key_modal_actions %} <template #modal-footer> {% block swag_amazon_pay_configuration_input_key_modal_actions_cancel %} <mt-button size="small" @click="onCancel" > {{ $tc('swag-amazon-pay-configuration.inputKeyModal.buttonCancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_configuration_input_key_modal_actions_send %} <mt-button variant="primary" size="small" :disabled="!privateKey" @click="onConfirm" > {{ $tc('swag-amazon-pay-configuration.inputKeyModal.buttonSend') }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:M,Mixin:p}=Shopware;M.register("swag-amazon-pay-configuration-input-key-modal",{template:F,inject:["SwagAmazonPayConfigService"],mixins:[p.getByName("notification"),p.getByName("sw-inline-snippet")],data(){return{privateKey:""}},methods:{onConfirm(){if(this.privateKey.includes("BEGIN RSA PRIVATE KEY")===!1&&this.privateKey.includes("BEGIN PRIVATE KEY")===!1){this.createNotificationWarning({title:this.$tc("swag-amazon-pay-configuration.inputKeyModal.notification.warning"),message:this.$tc("swag-amazon-pay-configuration.inputKeyModal.notification.invalidKeyFormat")});return}this.$emit("update-private-key",this.privateKey)},onCancel(){this.$emit("modal-close")}}});const I=`{% block sw_system_config %} <div class="sw-system-config"> {% block swag_amazon_pay_configuration_sales_channel_switch %} <div class="sw-system-config__global-sales-channel-switch swag-amazon-pay-saleschannel-switch" > <sw-sales-channel-switch :label="$tc('sw-settings.system-config.labelSalesChannelSelect')" @change-sales-channel-id="onSalesChannelChanged" > </sw-sales-channel-switch> {% block swag_amazon_pay_configuration_sales_channel_switch_set_default_payment_method %} <mt-button class="swag-amazon-pay-configuration__salesChannelDefaultButton" :isLoading="settingDefaultSalesChannelLoading" :disabled="!acl.can('swag_amazonpay.editor')" @click="onSetAmazonPayAsDefaultPaymentMethod" variant="secondary" size="default" > {{ $tc('swag-amazon-pay-configuration.actions.setAsDefaultPaymentMethod') }} </mt-button> {% endblock %} {% block swag_amazon_pay_configiguration_sales_channel_switch_insecure_domain_notification %} <swag-amazon-pay-insecure-domain-notification :salesChannelId="salesChannelId"> </swag-amazon-pay-insecure-domain-notification> {% endblock %} {% block swag_amazon_pay_configiguration_sales_channel_switch_inherit_configuration %} <mt-switch v-if="isInheritanceSwitchVisible && !showLoader" v-model="config.inheritFromDefault" class="swag-amazon-pay-configuration-inheritance-field" :disabled="!acl.can('swag_amazonpay.editor')" :label="$tc('swag-amazon-pay-configuration.configForm.fields.inheritFromDefault.label')" @change="onSwitchInheritance" > </mt-switch> {% endblock %} </div> {% endblock %} {% block swag_amazon_pay_configuration_loading %} <mt-loader v-if="showLoader"></mt-loader> {% endblock %} {% block swag_amazon_pay_configuration_card_help %} <mt-card v-if="!showLoader" :title="$tc('swag-amazon-pay-configuration.configForm.cards.help')" > <span v-html="$tc('swag-amazon-pay-configuration.help.helpText')" class="swag-amazon-pay-configuration-text" ></span> </mt-card> {% endblock %} {% block swag_amazon_pay_configuration_card_account %} <mt-card v-if="!showLoader" class="swag-amazon-pay-configuration" :title="$tc('swag-amazon-pay-configuration.configForm.cards.account')" > {% block swag_amazon_pay_configuration_card_account_content %} {% block swag_amazon_pay_configuration_card_account_content_configuration_text %} <div class="swag-amazon-pay-configuration-text" v-if="!config.merchantId" > <span class="headline headline-m"> {{ $tc('swag-amazon-pay-configuration.configForm.registerHeadline') }} </span> <span v-html="$tc('swag-amazon-pay-configuration.configForm.registerExplanation')" class="swag-amazon-pay-configuration-text-register-explanation" ></span> </div> <div class="swag-amazon-pay-configuration-text" v-if="!config.merchantId" > <span class="headline headline-m"> {{ $tc('swag-amazon-pay-configuration.configForm.existingAccountHeadline') }} </span> <span v-html="$tc('swag-amazon-pay-configuration.configForm.existingAccountExplanation')" class="swag-amazon-pay-configuration-text-existing-explanation" ></span> </div> {% endblock %} {% block swag_amazon_pay_configuration_card_account_content_headline_account_information %} <div class="swag-amazon-pay-configuration-text add-margin-top"> <span class="headline headline-s"> {{ $tc('swag-amazon-pay-configuration.configForm.accountHeadline') }} </span> </div> {% endblock %} {% block swag_amazon_pay_configuration_card_account_content_option_ledger_currency %} <div class="sw-field--margin-top"> <sw-single-select v-model:value="config.ledgerCurrency" required :options="getLedgerCurrencyOptions" :label="$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-single-select> </div> {% endblock %} <div class="swag-amazon-pay-configuration-columns"> <div class="column"> {% block swag_amazon_pay_configuration_card_account_content_option_merchant_id %} <mt-text-field v-model="config.merchantId" required :label="$tc('swag-amazon-pay-configuration.configForm.fields.merchantId.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.merchantId.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.merchantId.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-text-field> {% endblock %} </div> <div class="column"></div> <div class="column"> {% block swag_amazon_pay_configuration_card_account_content_option_client_id %} <mt-text-field v-model="config.clientId" required :label="$tc('swag-amazon-pay-configuration.configForm.fields.clientId.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.clientId.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.clientId.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-text-field> {% endblock %} </div> </div> {% block swag_amazon_pay_configuration_card_account_content_headline_credentials %} <div class="swag-amazon-pay-configuration-text add-margin-top"> <span class="headline headline-s"> {{ $tc('swag-amazon-pay-configuration.configForm.credentialsHeadline') }} </span> </div> {% endblock %} {% block swag_amazon_pay_configuration_card_account_content_option_public_key_id %} <mt-text-field v-model="config.publicKeyId" required :label="$tc('swag-amazon-pay-configuration.configForm.fields.publicKeyId.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.publicKeyId.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.publicKeyId.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-text-field> {% endblock %} {% block swag_amazon_pay_settings_card_account_private_key_modal %} <swag-amazon-pay-configuration-input-key-modal v-if="showInputKeyModal" @update-private-key="onUpdatePrivateKey" @modal-close="onCloseModal()" > </swag-amazon-pay-configuration-input-key-modal> {% endblock %} {% block swag_amazon_pay_configuration_card_account_content_field_private_key %} <mt-password-field :placeholder="getPrivateKeyPlaceholder()" :label="$tc('swag-amazon-pay-configuration.configForm.fields.privateKey.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.privateKey.helpText')" required disabled :passwordToggleAble="false" ></mt-password-field> {% endblock %} {% block swag_amazon_pay_configuration_card_account_content_button_input_private_key %} <mt-button variant="primary" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" @click="displayInputKeyModal" > {{ $tc('swag-amazon-pay-configuration.actions.insertPrivateKey') }} </mt-button> {% endblock %} {% block swag_amazon_pay_configuration_card_account_content_config_test %} <sw-button-process v-if="!showLoader" class="sw-settings-login-registration__test-action" :isLoading="showLoader" :processSuccess="isTestSuccessful" :disabled="showLoader || isTesting || isInherited" @click="onTest" > {{ $tc('swag-amazon-pay-configuration.actions.testConnection') }} </sw-button-process> {% endblock %} {% endblock %} </mt-card> {% endblock %} {% block swag_amazon_pay_configuration_card_general %} <mt-card v-if="!showLoader" class="swag-amazon-pay-configuration" :title="$tc('swag-amazon-pay-configuration.configForm.cards.general')" > {% block swag_amazon_pay_configuration_card_general_content %} {% block swag_amazon_pay_configuration_card_general_content_option_sandbox %} <mt-switch v-model="config.sandbox" :label="$tc('swag-amazon-pay-configuration.configForm.fields.sandbox.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.sandbox.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-switch> {% endblock %} <div class="sw-field sw-block-field sw-field--text is--disabled sw-field--default sw-field--margin-top" > {% block swag_amazon_pay_configuration_card_general_content_ipn_url %} <mt-text-field v-if="ipnUrlLoaded" v-model.trim="ipnUrl" disabled copyable :label="$tc('swag-amazon-pay-configuration.configForm.labelIpnUrl')" :helpText="$tc('swag-amazon-pay-configuration.configForm.ipnHelpText')" > </mt-text-field> {% endblock %} </div> {% block swag_amazon_pay_configuration_card_accountgeneral_option_soft_descriptor %} <mt-text-field v-model="config.softDescriptor" :label="$tc('swag-amazon-pay-configuration.configForm.fields.softDescriptor.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.softDescriptor.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.softDescriptor.helpText')" maxlength="16" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-text-field> {% endblock %} {% endblock %} </mt-card> {% endblock %} {% block swag_amazon_pay_configuration_card_display_options %} <mt-card v-if="!showLoader" class="swag-amazon-pay-configuration" :title="$tc('swag-amazon-pay-configuration.configForm.cards.displayOptions')" > {% block swag_amazon_pay_configuration_card_display_options_content %} <div class="swag-amazon-pay-configuration-columns"> <div class="column"> {% block swag_amazon_pay_configuration_card_display_options_content_option_product_page %} <mt-switch v-model="config.displayButtonOnProductPage" :label="$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnProductPage.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnProductPage.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-switch> {% endblock %} {% block swag_amazon_pay_configuration_card_display_options_content_option_listing_page %} <mt-switch v-model="config.displayButtonOnListingPage" :label="$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnListingPage.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnListingPage.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-switch> {% endblock %} {% block swag_amazon_pay_configuration_card_display_options_content_option_checkout_register %} <mt-switch v-model="config.displayButtonOnCheckoutRegisterPage" :label="$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnCheckoutRegisterPage.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnCheckoutRegisterPage.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-switch> {% endblock %} {% block swag_amazon_pay_configuration_card_display_options_content_option_registration_page %} <mt-switch v-model="config.displayLoginButtonOnRegistrationPage" :label="$tc('swag-amazon-pay-configuration.configForm.fields.displayLoginButtonOnRegistrationPage.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.displayLoginButtonOnRegistrationPage.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-switch> {% endblock %} </div> </div> <hr class="add-margin-top add-margin-bottom"/> {% block swag_amazon_pay_configuration_card_display_options_content_look %} <div class="swag-amazon-pay-configuration-columns"> <div class="column"> {% block swag_amazon_pay_configuration_card_display_options_content_option_button_color %} <sw-single-select v-model:value="config.buttonColor" :options="buttonColorOptions" :label="$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-single-select> {% endblock %} </div> </div> {% endblock %} <hr class="add-margin-top"/> <div class="swag-amazon-pay-configuration-columns add-margin-top"> <div class="column"> {% block swag_amazon_pay_configuration_card_display_options_content_option_hide_one_click_checkout %} <mt-switch v-model="config.hideOneClickCheckoutButtons" :label="$tc('swag-amazon-pay-configuration.configForm.fields.hideOneClickCheckoutButtons.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.hideOneClickCheckoutButtons.helpText')" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </mt-switch> {% endblock %} </div> </div> {% endblock %} </mt-card> {% endblock %} {% block swag_amazon_pay_configuration_card_state_mapping %} <mt-card v-if="!showLoader" class="swag-amazon-pay-configuration" :title="$tc('swag-amazon-pay-configuration.configForm.cards.paymentStateMapping')" > {% block swag_amazon_pay_configuration_card_state_mapping_content %} <div class="swag-amazon-pay-configuration-text add-margin-top"> {{ $tc('swag-amazon-pay-configuration.configForm.stateMappingExplanation') }} </div> {% block swag_amazon_pay_configuration_card_state_mapping_content_option_authorize %} <sw-entity-single-select v-model:value="config.paymentStateMappingAuthorize" class="swag-amazon-pay-configuration-authorize" entity="state_machine_state" :label="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingAuthorize.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingAuthorize.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingAuthorize.helpText')" :criteria="getPaymentStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_state_mapping_content_option_charge %} <sw-entity-single-select v-model:value="config.paymentStateMappingCharge" class="swag-amazon-pay-configuration-charge" entity="state_machine_state" :label="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCharge.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCharge.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCharge.helpText')" :criteria="getPaymentStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_state_mapping_content_option_partial_charge %} <sw-entity-single-select v-model:value="config.paymentStateMappingPartialCharge" class="swag-amazon-pay-configuration-partial-charge" entity="state_machine_state" :label="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialCharge.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialCharge.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialCharge.helpText')" :criteria="getPaymentStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_state_mapping_content_option_refund %} <sw-entity-single-select v-model:value="config.paymentStateMappingRefund" class="swag-amazon-pay-configuration-refund" entity="state_machine_state" :label="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingRefund.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingRefund.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingRefund.helpText')" :criteria="getPaymentStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_state_mapping_content_option_partial_refund %} <sw-entity-single-select v-model:value="config.paymentStateMappingPartialRefund" class="swag-amazon-pay-configuration-partial-refund" entity="state_machine_state" :label="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialRefund.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialRefund.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialRefund.helpText')" :criteria="getPaymentStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_state_mapping_content_option_cancel %} <sw-entity-single-select v-model:value="config.paymentStateMappingCancel" class="swag-amazon-pay-configuration-cancel" entity="state_machine_state" :label="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCancel.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCancel.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCancel.helpText')" :criteria="getPaymentStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% endblock %} </mt-card> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced %} <mt-card v-if="!showLoader" class="swag-amazon-pay-configuration" :title="$tc('swag-amazon-pay-configuration.configForm.cards.advanced')" > {% block swag_amazon_pay_configuration_card_advanced_content %} {% block swag_amazon_pay_configuration_card_advanced_content_option_auth_mode %} <sw-single-select v-model:value="config.authMode" required :label="$tc('swag-amazon-pay-configuration.configForm.fields.authMode.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.authMode.helpText')" :options="getAuthModeOptions" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced_content_option_charge_mode %} <sw-single-select v-model:value="config.chargeMode" required :label="$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.helpText')" :options="getChargeModeOptions" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced_content_option_charge_trigger_state %} <div v-if="isChargeOnShipping" class="sw-field--margin-top" > <sw-entity-single-select v-model:value="config.orderChargeTriggerState" entity="state_machine_state" required :label="$tc('swag-amazon-pay-configuration.configForm.fields.orderChargeTriggerState.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.orderChargeTriggerState.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.orderChargeTriggerState.helpText')" :criteria="getOrderStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> </div> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced_content_option_refund_trigger_state %} <sw-entity-single-select v-model:value="config.orderRefundTriggerState" entity="state_machine_state" :reset-option="$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.resetOption')" :label="$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.label')" :placeholder="$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.placeholder')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.helpText')" :criteria="getOrderStateCriteria" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-entity-single-select> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced_content_exclusions %} {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_products %} <sw-entity-multi-id-select v-model:value="config.excludedProductIds" :disabled="!acl.can('swag_amazonpay.editor')" :repository="productRepository" :criteria="excludedProductCriteria" :label="$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductIds.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductIds.helpText')" > {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_products_selection_label_property %} <template #selection-label-property="{ item }"> <sw-product-variant-info :variations="item.variation"> {{ item.translated.name || item.name }} </sw-product-variant-info> </template> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_products_result_label_property %} <template #result-label-property="{ item, searchTerm, highlightSearchTerm }" > <sw-product-variant-info :variations="item.variation"> {{ item.translated.name || item.name }} </sw-product-variant-info> </template> {% endblock %} </sw-entity-multi-id-select> {% endblock %} {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_product_streams %} <sw-entity-multi-id-select v-model:value="config.excludedProductStreamIds" :disabled="!acl.can('swag_amazonpay.editor')" :repository="productStreamRepository" :label="$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductStreamIds.label')" :helpText="$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductStreamIds.helpText')" > </sw-entity-multi-id-select> {% endblock %} {% endblock %} {% endblock %} </mt-card> {% endblock %} {% block swag_amazon_pay_configuration_card_logging %} <mt-card v-if="!showLoader" class="swag-amazon-pay-configuration" :title="$tc('swag-amazon-pay-configuration.configForm.cards.logHandling')" > {% block swag_amazon_pay_configuration_card_logging_content_mode %} <div class="swag-amazon-pay-configuration-text"> {{ $tc('swag-amazon-pay-configuration.configForm.loggingExplanation') }} <span class="headline headline-s"> {{ $tc('swag-amazon-pay-configuration.configForm.loggingHeadline') }} </span> </div> <div class="swag-amazon-pay-configuration-radio-help-text-columns"> <div class="column-left"> {% block swag_amazon_pay_configuration_card_logging_content_option_logging_mode %} <sw-radio-field v-model:value="config.loggingMode" :options="getLoggingOptions" :disabled="isInherited || !acl.can('swag_amazonpay.editor')" > </sw-radio-field> {% endblock %} </div> <div class="column-right"> <sw-help-text class="sw-field__help-text" :text="$tc('swag-amazon-pay-configuration.configForm.loggingBasicHelp')" ></sw-help-text> <sw-help-text class="sw-field__help-text" :text="$tc('swag-amazon-pay-configuration.configForm.loggingAdvancedHelp')" ></sw-help-text> </div> </div> {% endblock %} {% block swag_amazon_pay_configuration_card_logging_toolbar %} <template #toolbar> <swag-amazon-pay-configuration-log-download :availableLogFiles="availableLogFiles"> </swag-amazon-pay-configuration-log-download> </template> {% endblock %} </mt-card> {% endblock %} </div> {% endblock %}`,{Component:D}=Shopware,{Criteria:c}=Shopware.Data;D.register("swag-amazon-pay-configuration",{template:I,inject:["SwagAmazonPayConfigService","systemConfigApiService","repositoryFactory","acl"],mixins:["notification"],props:{configDomain:{type:String,required:!1,default:null},parentLoading:{type:Boolean,required:!1,default:!1}},data(){return{salesChannelId:null,isTestSuccessful:!1,isTesting:!1,showInputKeyModal:!1,ipnUrl:"https://example.com/",ipnUrlLoaded:!1,availableLogFiles:[],fallbackConfig:null,isLoading:!1,settingDefaultSalesChannelLoading:!1,defaultConfig:{merchantId:null,publicKeyId:null,privateKey:null,clientId:null,sandbox:!1,hideOneClickCheckoutButtons:!1,displayButtonOnProductPage:!0,displayButtonOnListingPage:!1,displayButtonOnCheckoutRegisterPage:!0,paymentStateMappingCharge:null,paymentStateMappingPartialCharge:null,paymentStateMappingRefund:null,paymentStateMappingPartialRefund:null,paymentStateMappingCancel:null,paymentStateMappingAuthorize:null,authMode:"immediately",chargeMode:"direct",orderChargeTriggerState:null,orderRefundTriggerState:null,excludedItems:null,sendErrorMail:null,loggingMode:"basic",ledgerCurrency:"EUR",softDescriptor:null,displayLoginButtonOnRegistrationPage:!0,inheritFromDefault:!1,buttonColor:"Gold",excludedProductIds:[],excludedProductStreamIds:[]},config:{},configBeforeInheritanceSwitch:null}},computed:{getRelevantConfigSalesChannelId(){return this.config.inheritFromDefault===!0?null:this.salesChannelId},isChargeOnShipping(){return this.config.chargeMode==="shipped"},isInheritanceSwitchVisible(){return!!(!this.isLoading&&this.salesChannelId)},getLedgerCurrencyOptions(){return[{value:"EUR",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.options.EUR")},{value:"GBP",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.options.GBP")},{value:"USD",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.options.USD")}]},getAuthModeOptions(){return[{value:"immediately",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.authMode.options.immediately")},{value:"canHandlePending",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.authMode.options.canHandlePending")}]},getChargeModeOptions(){return[{value:"direct",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.chargeMode.options.direct")},{value:"shipped",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.chargeMode.options.shipped")},{value:"manually",label:this.$tc("swag-amazon-pay-configuration.configForm.fields.chargeMode.options.manually")}]},getLoggingOptions(){return[{value:"basic",name:this.$tc("swag-amazon-pay-configuration.configForm.fields.loggingMode.options.basic")},{value:"advanced",name:this.$tc("swag-amazon-pay-configuration.configForm.fields.loggingMode.options.advanced")}]},isInherited(){return this.salesChannelId?this.config.inheritFromDefault:!1},getOrderStateCriteria(){const a=new c(1,100);return a.addAssociation("stateMachine"),a.addFilter(c.equalsAny("state_machine_state.stateMachine.technicalName",["order.state"])),a},getPaymentStateCriteria(){const a=new c(1,100);return a.addAssociation("stateMachine"),a.addFilter(c.equalsAny("state_machine_state.stateMachine.technicalName",["order_transaction.state"])),a},showLoader(){return this.parentLoading||this.isLoading},buttonColorOptions(){return[{label:this.$tc("swag-amazon-pay-configuration.configForm.fields.buttonColors.gold"),value:"Gold"},{label:this.$tc("swag-amazon-pay-configuration.configForm.fields.buttonColors.lightGray"),value:"LightGray"},{label:this.$tc("swag-amazon-pay-configuration.configForm.fields.buttonColors.darkGray"),value:"DarkGray"}]},productRepository(){return this.repositoryFactory.create("product")},productStreamRepository(){return this.repositoryFactory.create("product_stream")},excludedProductCriteria(){const a=new c(1,25);return a.addAssociation("options.group"),a}},watch:{config(){this.$emit("change-config",this.config,this.salesChannelId)}},created(){this.createdComponent()},methods:{createdComponent(){this.loadConfig(),this.getIpnUrl(),this.getLogFiles()},loadConfig(){const a={};this.isLoading=!0,this.systemConfigApiService.getValues(this.configDomain,this.salesChannelId).then(e=>{if(Object.keys(e).forEach(t=>{const n=t.replace(`${this.configDomain}.`,"");a[n]=e[t]}),Object.keys(a).length<1){this.config={...this.defaultConfig};return}if(Object.keys(this.defaultConfig).forEach(t=>{Shopware.Utils.object.hasOwnProperty(a,t)||(a[t]=this.defaultConfig[t])}),!this.salesChannelId){this.config=a,this.fallbackConfig=a;return}if(a.inheritFromDefault){this.config=this.fallbackConfig,this.config.inheritFromDefault=!0,this.configBeforeInheritanceSwitch=a;return}this.config=a}).finally(()=>{this.isLoading=!1})},getPrivateKeyPlaceholder(){return this.config.privateKey?"XXXXXXXXXXX":this.$tc("swag-amazon-pay-configuration.configForm.privateKeyEmpty")},getIpnUrl(){this.SwagAmazonPayConfigService.getIpnUrl().then(a=>{this.ipnUrl=a.url,this.ipnUrlLoaded=!0})},getLogFiles(){this.SwagAmazonPayConfigService.getLogFiles().then(a=>{Object.keys(a).forEach(e=>this.addLogFile(a,e))})},addLogFile(a,e){this.availableLogFiles.push({fileName:a[e]})},onTest(){this.isTestSuccessful=!1,this.isTesting=!0;const a={merchantId:this.config.merchantId,publicKeyId:this.config.publicKeyId,privateKey:this.config.privateKey,ledgerCurrency:this.config.ledgerCurrency,clientId:this.config.clientId,sandbox:this.config.sandbox,salesChannel:this.salesChannelId};this.SwagAmazonPayConfigService.validateCredentials(a).then(e=>{e.success?(this.createNotificationSuccess({title:this.$tc("swag-amazon-pay-configuration.notification.inspectConnectionTitle"),message:this.$tc(e.message)}),this.isTestSuccessful=!0,setTimeout(this.resetTestStatus,2e3)):this.createNotificationError({title:this.$tc("swag-amazon-pay-configuration.notification.inspectConnectionTitle"),message:this.$tc(e.message)+e.exceptionMessage})}).catch(()=>{this.createNotificationError({title:this.$tc("swag-amazon-pay-configuration.notification.inspectConnectionTitle"),message:this.$tc("swag-amazon-pay-configuration.exception.genericError")})}).finally(()=>{this.isTesting=!1})},onSwitchInheritance(a){a?(this.configBeforeInheritanceSwitch={...this.config},this.configBeforeInheritanceSwitch.inheritFromDefault=!1,this.config=this.fallbackConfig,this.config.inheritFromDefault=!0):(this.config={...this.configBeforeInheritanceSwitch},this.config.inheritFromDefault=!1)},displayInputKeyModal(){this.showInputKeyModal=!0},onUpdatePrivateKey(a){this.config.privateKey=a,this.showInputKeyModal=!1},resetTestStatus(){this.isTestSuccessful=!1},onCloseModal(){this.showInputKeyModal=!1},onSalesChannelChanged(a){this.salesChannelId=a,this.loadConfig()},onSetAmazonPayAsDefaultPaymentMethod(){this.settingDefaultSalesChannelLoading=!0,this.SwagAmazonPayConfigService.salesChannelDefault(this.salesChannelId).then(()=>{window.setTimeout(()=>{this.settingDefaultSalesChannelLoading=!1},250)})}}});const L=`{% block swag_amazon_pay_import_config_modal %} <sw-modal :title="$tc('swag-amazon-pay-configuration.importModal.title')" @modal-close="onCancel" > {% block swag_amazon_pay_import_config_modal_content %} <sw-container gap="0px 10px"> {% block swag_amazon_pay_import_config_modal_content_warning %} <mt-banner variant="info" :title="$tc('swag-amazon-pay-configuration.importModal.warning.title')" :showIcon="true" :closable="false" > {{ $tc('swag-amazon-pay-configuration.importModal.warning.content') }} </mt-banner> {% endblock %} {% block swag_amazon_pay_import_config_modal_content_version_missmatch_notification %} <sw-modal v-if="versions" :title="$tc('swag-amazon-pay-configuration.importModal.warning.title')" @modal-close="onCancelNotification" > <mt-banner variant="attention" :showIcon="true" :closable="false" > <p> {{ $tc('swag-amazon-pay-configuration.importModal.versionMismatch.info') }} </p> </mt-banner> <p v-html="$tc('swag-amazon-pay-configuration.importModal.versionMismatch.current', 0, { shopwareVersion: versions.current.shopware, pluginVersion: versions.current.plugin })" > </p> <p v-html="$tc('swag-amazon-pay-configuration.importModal.versionMismatch.export', 0, { shopwareVersion: versions.state.shopware, pluginVersion: versions.state.plugin })" > </p> {% block swag_amazon_pay_import_config_modal_content_version_missmatch_notification_footer %} <template #modal-footer> <mt-button :disabled="false" :square="false" :block="false" :isLoading="false" @click="onCancelNotification" ghost > {{ $tc('global.default.cancel') }} </mt-button> <mt-button :disabled="false" variant="critical" :square="false" :block="false" :isLoading="false" @click="onSubmit(true)" > {{ $tc('swag-amazon-pay-configuration.importModal.versionMismatch.proceed') }} </mt-button> </template> {% endblock %} </sw-modal> {% endblock %} {% block swag_amazon_pay_import_config_modal_content_file_upload %} <sw-file-input v-model:value="selectedFile" :label="$tc('swag-amazon-pay-configuration.importModal.infoText')" :allowedMimeTypes="['application/json']" > </sw-file-input> {% endblock %} </sw-container> {% endblock %} {% block swag_amazon_pay_import_config_modal_actions %} <template #modal-footer> {% block swag_amazon_pay_import_config_modal_actions_cancel %} <mt-button size="small" @click="onCancel" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_import_config_modal_actions_import %} <mt-button variant="primary" size="small" :disabled="!selectedFile" :isLoading="isLoading" @click="onSubmit(false)" > {{ $tc('global.default.apply') }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:T,Mixin:u}=Shopware;T.register("swag-amazon-pay-configuration-upload-modal",{template:L,inject:["SwagAmazonPayConfigService"],mixins:[u.getByName("notification"),u.getByName("sw-inline-snippet")],data(){return{isLoading:!1,selectedFile:null,versions:null}},methods:{onSubmit(a=!1){if(this.versions=null,!this.selectedFile){this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:this.$tc("swag-amazon-pay-configuration.importModal.notification.noFileSelected")});return}this.isLoading=!0,this.SwagAmazonPayConfigService.importConfig(this.selectedFile,a).then(e=>{if(this.isLoading=!1,"current"in e&&"state"in e){this.versions=e;return}this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-amazon-pay-configuration.importModal.notification.success")}),setTimeout(()=>window.location.reload(),1e3)}).catch(()=>{this.isLoading=!1,this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:this.$tc("swag-amazon-pay-configuration.importModal.notification.error")})})},onCancel(){this.$emit("modal-close")},onCancelNotification(){this.versions=null}}});const R=`{% block swag_amazon_pay_configuration_card_logging_content_download %} <sw-container> {% block swag_amazon_pay_configuration_card_logging_content_download_available_logfiles %} <sw-multi-select v-model:value="selectedLogFiles" valueProperty="fileName" labelProperty="fileName" :label="$tc('swag-amazon-pay-configuration.logDownload.selectLabel')" :options="availableLogFiles" :value="selectedLogFiles" :disabled="isPreparingArchive" @change="onChangeFileSelection" > </sw-multi-select> {% endblock %} {% block swag_amazon_pay_configuration_card_logging_content_download_button %} <div class="column-left"> <mt-button v-if="selectedLogFiles" :isLoading="isPreparingArchive" :disabled="selectedLogFiles.length < 1" @click="onDownloadLogFile" > {{ $tc('swag-amazon-pay-configuration.logDownload.buttonDownload') }} </mt-button> </div> {% endblock %} </sw-container> {% endblock %}`,{Component:B,Mixin:_}=Shopware;B.register("swag-amazon-pay-configuration-log-download",{template:R,inject:["SwagAmazonPayConfigService"],mixins:[_.getByName("notification"),_.getByName("sw-inline-snippet")],props:{availableLogFiles:{type:Array,required:!1,default:null}},data(){return{selectedLogFiles:[],isPreparingArchive:!1,downloadPath:null}},methods:{onDownloadLogFile(){if(this.selectedLogFiles){if(this.downloadPath){this.downloadFile(this.downloadPath,Shopware.Context.api);return}this.isPreparingArchive=!0,this.SwagAmazonPayConfigService.generateLogArchive(this.selectedLogFiles).then(a=>{this.downloadFile(a,Shopware.Context.api)}).catch(()=>{this.createNotificationError({title:this.$tc("global.default.error"),message:this.$tc("swag-amazon-pay-configuration.exception.genericError")})}).finally(()=>{this.isPreparingArchive=!1})}},downloadFile(a){this.downloadPath=a,this.SwagAmazonPayConfigService.downloadLogArchive(a).then(e=>{const t=document.createElement("a");t.setAttribute("download","swag-amazon-pay-logs.zip"),t.href=window.URL.createObjectURL(new Blob([e])),document.body.appendChild(t),t.click(),document.body.removeChild(t)})},onChangeFileSelection(){this.downloadPath=null}}});const O=`{% block swag_amazon_pay_configiguration_component_insecure_domain_notification %} <div> {% block swag_amazon_pay_configiguration_component_insecure_domain_notification_info %} <mt-banner v-if="!salesChannelId" variant="info" :title="$tc('global.default.info')" :showIcon="true" :closable="false" > {{ $tc('swag-amazon-pay-configuration.insecureDomainNotification.general') }} </mt-banner> {% endblock %} {% block swag_amazon_pay_configiguration_component_insecure_domain_notification_warning %} <mt-banner v-if="hasInsecureDomains" variant="attention" :title="$tc('global.default.info')" :showIcon="true" :closable="false" > <div class="swag-amazon-pay-configuration-text"> {{ $tc('swag-amazon-pay-configuration.insecureDomainNotification.salesChannel') }} {% block swag_amazon_pay_configiguration_component_insecure_domain_notification_warning_domains %} <ul> <li v-for="item in insecureDomains[salesChannelId]"> {{ item }} </li> </ul> {% endblock %} </div> </mt-banner> {% endblock %} </div> {% endblock %}`,{Component:N,Mixin:h}=Shopware,m=Shopware.Data.Criteria;N.register("swag-amazon-pay-insecure-domain-notification",{template:O,inject:["repositoryFactory"],mixins:[h.getByName("notification"),h.getByName("sw-inline-snippet")],props:{salesChannelId:{required:!1,type:String,default:""}},data(){return{insecureDomains:[]}},computed:{salesChannelDomainRepository(){return this.repositoryFactory.create("sales_channel_domain")},hasInsecureDomains(){return!(!this.salesChannelId||!(this.salesChannelId in this.insecureDomains))}},created(){this.createdComponent()},methods:{createdComponent(){this.loadInsecureDomains()},loadInsecureDomains(){const a=new m(1,500);return a.addFilter(m.multi("AND",[m.contains("url","http://")])),this.salesChannelDomainRepository.search(a,Shopware.Context.api).then(e=>{e.forEach(t=>{const n=t.salesChannelId,o=t.url;n in this.insecureDomains||(this.insecureDomains[n]=[]),this.insecureDomains[n].push(o)})})}}});const E=`{% block swag_amazon_pay_settings_icon %} <div class="swag-amazon-pay-settings-icon"> <img class="sw-settings-index__amazon-pay-icon" :src="assetFilter('swagamazonpay/static/img/plugin.svg')" /> </div> {% endblock %}`,{Component:K}=Shopware;K.register("swag-amazon-pay-settings-icon",{template:E,computed:{assetFilter(){return Shopware.Filter.getByName("asset")}}});const{Module:j}=Shopware;j.register("swag-amazon-pay-configuration",{type:"plugin",name:"SwagAmazonPayConfiguration",title:"swag-amazon-pay-configuration.module.title",description:"swag-amazon-pay-configuration.module.description",version:"1.0.0",targetVersion:"1.0.0",routes:{config:{component:"swag-amazon-pay-settings",path:"config",meta:{parentPath:"sw.extension.my-extensions",privilege:"swag_amazonpay.viewer"}}},extensionEntryRoute:{extensionName:"SwagAmazonPay",route:"swag.amazon.pay.configuration.config"},settingsItem:{group:"plugins",to:"swag.amazon.pay.configuration.config",label:"swag-amazon-pay-configuration.module.title",iconComponent:"swag-amazon-pay-settings-icon",backgroundEnabled:!0,privilege:"swag_amazonpay.viewer"}});const{Application:f}=Shopware,i=Shopware.Classes.ApiService;class q extends i{constructor(e,t,n="swag_amazon_pay_configuration"){super(e,t,n)}getIpnUrl(){const e=`_action/${this.getApiBasePath()}/get-ipn-url`;return this.httpClient.post(e,null,{headers:this.getBasicHeaders()}).then(t=>i.handleResponse(t))}validateCredentials(e){const t=`_action/${this.getApiBasePath()}/inspect-connection`;return this.httpClient.post(t,e,{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}generateRsaKeys(){const e=`_action/${this.getApiBasePath()}/generate-keypair`;return this.httpClient.post(e,null,{headers:this.getBasicHeaders()}).then(t=>i.handleResponse(t))}sendMail(e,t){const n=`_action/${this.getApiBasePath()}/send-activation-mail`;return this.httpClient.post(n,{content:e,merchantId:t},{headers:this.getBasicHeaders()}).then(o=>i.handleResponse(o))}exportConfig(){const e=`_action/${this.getApiBasePath()}/export-config`;return this.httpClient.post(e,null,{headers:this.getBasicHeaders()}).then(t=>i.handleResponse(t))}importConfig(e,t=!1){const n=`_action/${this.getApiBasePath()}/import-config/${t}`;return this.httpClient.post(n,e,{headers:this.getBasicHeaders()}).then(o=>i.handleResponse(o))}getLogFiles(){const e=`_action/${this.getApiBasePath()}/log-files`;return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(t=>i.handleResponse(t))}generateLogArchive(e){const t=`_action/${this.getApiBasePath()}/generate-log-archive`;return this.httpClient.post(t,{files:e},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}downloadLogArchive(e){const t=`/_action/swag_amazon_pay_configuration/download-log-archive?path=${e}`;return this.httpClient.get(t,{responseType:"blob",headers:this.getBasicHeaders()}).then(n=>n.data)}salesChannelDefault(e=null){const t=`_action/${this.getApiBasePath()}/saleschannel-default`;return this.httpClient.post(t,{salesChannelId:e},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}}f.addServiceProvider("SwagAmazonPayConfigService",a=>{const e=f.getContainer("init");return new q(e.httpClient,a.loginService)});const H=`{% block sw_order_detail_content_tabs_general %} {% parent() %} {% block swag_amazon_pay_order_payment_tab %} <template v-if="!isLoadingAmazonTransactions && amazonPayTransactions"> <sw-tabs-item v-for="amazonTransaction in amazonPayTransactions" v-bind:key="amazonTransaction.id" :route="getAmazonPayDetailsRoute(amazonTransaction.id)" :title="$tc('swag-amazon-pay-order.general.description')" > {{ $tc('swag-amazon-pay-order.general.title') }} </sw-tabs-item> </template> {% endblock %} {% endblock %} {% block sw_order_detail_content_view %} {% parent() %} {% endblock %}`,{Component:U,Context:V}=Shopware,{Criteria:g}=Shopware.Data;U.override("sw-order-detail",{template:H,data(){return{isLoadingAmazonTransactions:!0,amazonPayTransactions:[],hasIncompleteTransaction:!1}},computed:{showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){this.loadAmazonPayTransactions(this.orderId)},immediate:!0}},methods:{loadAmazonPayTransactions(a){if(!a){this.isLoadingAmazonPayTransactions=!1;return}this.amazonPayTransactions=[],this.isLoadingAmazonPayTransactions=!0;const e=this.repositoryFactory.create("order"),t=new g(1,1);t.addAssociation("transactions"),t.addFilter(g.equals("transactions.paymentMethodId","f7b88fc9c0104702a96f664dabfe2656")),t.addFilter(g.equals("id",a)),e.search(t,V.api).then(n=>{const o=n.first();o&&(this.identifier||(this.identifier=o.orderNumber),o.transactions.forEach(s=>{if(s.customFields&&s.customFields.swag_amazon_pay_charge_permission_id){this.amazonPayTransactions.push(s);return}this.hasIncompleteTransaction=!0}))}).finally(()=>{this.isLoadingAmazonTransactions=!1})},getAmazonPayDetailsRoute(a){return{name:"swag-amazon-pay-order.payment.detail",params:{id:this.$route.params.id,transactionId:a}}}}});const G=`{% block swag_amazon_pay_order_payment_page %} <div class="swag-amazon-pay-order-page"> {% block swag_amazon_pay_order_payment_page_warning %} <sw-container columns="1fr" class="swag-amazon-pay-order-notification-container" > <mt-banner v-if="isPartiallyCharged" variant="attention" appearance="default" :showIcon="true" :closable="false" > {{ $tc('swag-amazon-pay-order.notification.isPartialCharged') }} {{ $tc('swag-amazon-pay-order.notification.partialCharge') }} </mt-banner> <mt-banner v-if="isInvalidChargePermission" variant="attention" appearance="default" :showIcon="true" :closable="false" > {{ $tc('swag-amazon-pay-order.notification.invalidChargePermission') }} </mt-banner> </sw-container> {% endblock %} {% block swag_amazon_pay_order_payment_page_content %} <template v-if="!isLoading"> {% block swag_amazon_pay_order_payment_page_content_general_card %} <mt-card rows="2" :title="$tc('swag-amazon-pay-order.general.generalCardTitle')" :isLoading="isLoading" > {% block swag_amazon_pay_order_payment_page_content_general_card_top %} <sw-container columns="1fr 1fr" class="swag-amazon-pay-order-page__general-content" > {% block swag_amazon_pay_order_payment_page_content_general_card_top_buyer_info %} <swag-amazon-pay-buyer-info :paymentDetails="paymentDetails" :order="order" > </swag-amazon-pay-buyer-info> {% endblock %} {% block swag_amazon_pay_order_payment_page_content_general_card_top_amount_info %} <swag-amazon-pay-amount-info :paymentDetails="paymentDetails" :transaction="transaction" :refundStatus="refundStatus" :order="order" :isInvalidChargePermission="isInvalidChargePermission" > </swag-amazon-pay-amount-info> {% endblock %} {% block swag_amazon_pay_order_payment_page_content_general_card_top_toolbar %} <swag-amazon-pay-action-toolbar :paymentDetails="paymentDetails" @reload-payment="reloadOrderDetails" @update-payment-details="reloadOrderDetails(true)" > </swag-amazon-pay-action-toolbar> {% endblock %} </sw-container> {% endblock %} {% block swag_amazon_pay_order_payment_page_content_general_card_bottom %} <sw-container columns="1fr" class="sw-card-section sw-card-section--secondary" > {% block swag_amazon_pay_order_payment_page_content_general_card_bottom_checkout_info %} <swag-amazon-pay-checkout-info :paymentDetails="paymentDetails" :transaction="transaction" :order="order" > </swag-amazon-pay-checkout-info> {% endblock %} </sw-container> {% endblock %} </mt-card> {% endblock %} {% block swag_amazon_pay_order_payment_page_content_payment_history_card %} <mt-card rows="2" :title="$tc('swag-amazon-pay-order.payment-history.cardTitle')" > {% block swag_amazon_pay_order_payment_page_content_payment_history_card_content %} <template #grid> <swag-amazon-pay-payment-history :paymentDetails="paymentDetails" @reload-payment="reloadOrderDetails" > </swag-amazon-pay-payment-history> </template> {% endblock %} </mt-card> {% endblock %} </template> {% endblock %} {% block swag_amazon_pay_order_payment_page_content_loader %} <mt-loader v-if="isLoading"></mt-loader> {% endblock %} </div> {% endblock %}`,{Component:X,Mixin:y,Context:w}=Shopware,Y=Shopware.Data.Criteria;X.register("swag-amazon-pay-order-tab",{template:G,inject:["SwagAmazonPayOrderService","repositoryFactory"],mixins:[y.getByName("notification"),y.getByName("sw-inline-snippet")],data(){return{paymentDetails:{chargePermission:{limits:{amountLimit:null},presentmentCurrency:"EUR",statusDetails:null},charge:{captureAmount:null,refundedAmount:null,statusDetails:null}},refundStatus:null,refundPending:!1,order:null,isLoading:!0,isSuccess:!0,transaction:null,refreshHandler:null}},computed:{orderRepository(){return this.repositoryFactory.create("order")},transactionRepository(){return this.repositoryFactory.create("order_transaction")},isInvalidChargePermission(){return this.isSuccess===!0?!1:this.isLoading===!1&&!this.paymentDetails.chargePermission.reference},isPartiallyCharged(){return this.isSuccess!==!0?!1:this.paymentDetails.isPartiallyCaptured}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},beforeDestroy(){window.clearInterval(this.refreshHandler)},created(){this.createdComponent()},methods:{createdComponent(){this.loadData()},resetDataAttributes(){this.paymentDetails=null,this.isLoading=!0,this.isSuccess=!1,this.transaction=null},reloadOrderDetails(a=!1){return this.isSuccess=!0,this.loadData(a)},loadTransactionDetails(a=!1){const e=this.$route.params.transactionId;return e?this.loadTransaction(e).then(t=>{const n=t.customFields.swag_amazon_pay_charge_permission_id;return this.refreshHandler&&window.clearInterval(this.refreshHandler),!t.customFields||!t.customFields.swag_amazon_pay_charge_permission_id?(this.displayErrorMessage(),Promise.reject()):(this.transaction=t,this.loadPaymentDetails(n,a).then(o=>(this.isLoading=!1,o.chargePermission?(this.paymentDetails=o,this.isSuccess=!0,Promise.resolve()):(this.displayErrorMessage(),Promise.reject()))))}):Promise.resolve()},backgroundLoadPaymentHistory(a){this.loadPaymentDetails(a,!1).then(e=>{e.chargePermission&&(this.paymentDetails=e)})},loadData(a=!1){a&&(this.isLoading=!0);const e=this.$route.params.id;return this.loadOrder(e).then(t=>(this.order=t,this.loadTransactionDetails(a)))},loadOrder(a){const e=new Y(1,1);return e.addAssociation("addresses"),e.addAssociation("currency"),e.addAssociation("deliveries"),e.addAssociation("orderCustomer.salutation"),this.orderRepository.get(a,w.api,e)},loadTransaction(a){return this.transactionRepository.get(a,w.api)},loadPaymentDetails(a,e=!1){return this.SwagAmazonPayOrderService.fetchPaymentDetails(a,e)},displayErrorMessage(a){let e=this.$tc("swag-amazon-pay-order.general.errors.incompletePaymentProcess");a&&a.response&&a.response.data&&a.response.data.errors&&(e=a.response.data.errors[0].detail),this.createNotificationError({title:this.$tc("global.default.error"),message:e}),this.isSuccess=!1,this.isLoading=!1}}});const J=`{% block swag_amazon_pay_order_component_buyer_info %} <div class="swag-amazon-pay-buyer-info__container"> {# Logo #} {% block swag_amazon_pay_order_component_buyer_info_logo %} <div class="swag-amazon-pay-buyer-info__icon-container" align="center" > <img class="swag-amazon-pay-buyer-info__amazon-pay-icon" :src="assetFilter('swagamazonpay/static/img/plugin.svg')" /> </div> {% endblock %} {# Full name and E-Mail address #} {% block swag_amazon_pay_order_component_buyer_info_name_container %} <div class="swag-amazon-pay-buyer-info__name-container"> {% block swag_amazon_pay_order_component_buyer_info_name_container_name %} <div class="swag-amazon-pay-buyer-info__full-name"> {{ customerSalutation }} {{ order.orderCustomer.firstName }} {{ order.orderCustomer.lastName }} </div> {% endblock %} {% block swag_amazon_pay_order_component_buyer_info_name_container_email %} <div class="swag-amazon-pay-buyer-info__email"> {{ order.orderCustomer.email }} </div> {% endblock %} </div> {% endblock %} </div> {% endblock %}`,{Component:W}=Shopware;W.register("swag-amazon-pay-buyer-info",{template:J,props:{paymentDetails:{type:Object,required:!0},order:{type:Object,required:!0}},computed:{customerSalutation(){return this.order.orderCustomer.salutation.salutationKey==="not_specified"?"":this.order.orderCustomer.salutation.displayName},assetFilter(){return Shopware.Filter.getByName("asset")}}});const Q=`{% block swag_amazon_pay_order_component_amount_info %} <sw-container class="swag-amazon-pay-amount-info__container" rows="4" columns="1fr" > {% block swag_amazon_pay_order_component_amount_info_total %} <div class="swag-amazon-pay-amount-info__total-amount" align="right" > {{ totalAmount }} </div> {% endblock %} {% block swag_amazon_pay_order_component_amount_info_card %} {% block swag_amazon_pay_order_component_amount_info_captured %} <div class="swag-amazon-pay-amount-info__captured-amount" align="right" > {% block swag_amazon_pay_order_component_amount_info_captured_amount %} + {{ chargedAmount }} {% endblock %} {% block swag_amazon_pay_order_component_amount_info_captured_help %} <sw-help-text class="swag-amazon-pay-amount-info__help-icon" tooltipPosition="top" :text="$tc('swag-amazon-pay-order.amount-info.chargeTooltip', 0, { amount: chargedAmount })" > </sw-help-text> {% endblock %} </div> {% endblock %} {% block swag_amazon_pay_order_component_amount_info_refunded %} <div class="swag-amazon-pay-amount-info__refunded-amount" align="right" > {% block swag_amazon_pay_order_component_amount_info_refund_amount %} - {{ refundedAmount }} <span v-if="hasPendingRefunds">(-{{ refundPendingAmount }})</span> {% endblock %} {% block swag_amazon_pay_order_component_amount_info_refunded_help %} <sw-help-text class="swag-amazon-pay-amount-info__help-icon" tooltipPosition="top" :text="$tc('swag-amazon-pay-order.amount-info.refundTooltip', 0, { amount: refundedAmount })" > </sw-help-text> {% endblock %} </div> {% endblock %} {% endblock %} {% block swag_amazon_pay_order_component_amount_info_date %} <div class="swag-amazon-pay-amount-info__charge-date" align="right" > {{ dateFilter(transaction.createdAt) }} </div> {% endblock %} </sw-container> {% endblock %}`,{Component:Z}=Shopware,{currency:l}=Shopware.Utils.format;Z.register("swag-amazon-pay-amount-info",{template:Q,props:{paymentDetails:{type:Object,required:!0},transaction:{type:Object,required:!0},order:{type:Object,required:!0},refundStatus:{type:Object,required:!1,default:null},isInvalidChargePermission:{type:Boolean,required:!1,default:!1}},computed:{isLoading(){return!this.paymentDetails.chargePermission.reference},totalAmount(){return l(this.paymentDetails.chargePermission.amount||this.totalOrderPrice,this.paymentDetails.chargePermission.currency)},totalOrderPrice(){return l(this.order.price.totalPrice,this.order.currency.isoCode)},chargedAmount(){return l(this.paymentDetails.chargePermission.capturedAmount||0,this.paymentDetails.chargePermission.currency)},refundedAmount(){return l(this.paymentDetails.totalRefundedAmount||0,this.paymentDetails.chargePermission.currency)},refundPendingAmount(){return l(this.paymentDetails.totalRefundPendingAmount||0,this.paymentDetails.chargePermission.currency)},hasPendingRefunds(){return this.paymentDetails.hasPendingRefunds},dateFilter(){return Shopware.Filter.getByName("date")}}});const aa=`{% block swag_amazon_pay_order_component_action_toolbar %} <sw-container class="swag-amazon-pay-action-toolbar__container" rows="1" columns="1fr 1fr 1fr" gap="10px" > {% block swag_amazon_pay_order_component_action_toolbar_cancel_button %} <mt-button size="small" variant="secondary" class="swag-amazon-pay-action-toolbar__button" @click="updatePaymentDetails" ghost > {{ $tc('swag-amazon-pay-order.action-toolbar.refresh') }} </mt-button> <mt-button v-if="paymentDetails.chargePermission.status === 'Chargeable'" size="small" variant="secondary" class="swag-amazon-pay-action-toolbar__button" @click="showCreateChargeModal" ghost > {{ $tc('swag-amazon-pay-order.action-toolbar.createCharge') }} </mt-button> <mt-button size="small" class="swag-amazon-pay-action-toolbar__button" :disabled="!acl.can('order.editor')" v-if="!disableCancellation" variant="critical" @click="showCancelModal" ghost > {{ $tc('swag-amazon-pay-order.action-toolbar.cancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_order_component_action_toolbar_modals %} <swag-amazon-pay-cancel-modal v-if="cancelModalVisible" :paymentDetails="paymentDetails" @modal-close="closeModals" @reload-payment="reloadPaymentDetails" > </swag-amazon-pay-cancel-modal> <swag-amazon-pay-create-charge-modal v-if="createChargeModalVisible" :paymentDetails="paymentDetails" @modal-close="closeModals" @reload-payment="reloadPaymentDetails" > </swag-amazon-pay-create-charge-modal> {% endblock %} </sw-container> {% endblock %}`,{Component:ea}=Shopware;ea.register("swag-amazon-pay-action-toolbar",{template:aa,inject:["acl"],props:{paymentDetails:{type:Object,required:!0}},data(){return{cancelModalVisible:!1,createChargeModalVisible:!1}},computed:{disableCancellation(){const a=this.paymentDetails.chargePermission.status;return a===null?!0:a==="Closed"}},methods:{showCancelModal(){this.cancelModalVisible=!0},showCreateChargeModal(){this.createChargeModalVisible=!0},closeModals(){this.cancelModalVisible=!1,this.createChargeModalVisible=!1},updatePaymentDetails(){this.$emit("update-payment-details")},reloadPaymentDetails(){this.closeModals(),this.$nextTick().then(()=>{this.$emit("reload-payment")})}}});const ta=`{% block swag_amazon_pay_order_component_checkout_info %} <sw-container class="swag-amazon-pay-checkout-info__container" columns="1fr 1fr" rows="2" > {% block swag_amazon_pay_order_component_checkout_info_checkout_id_container %} <div class="swag-amazon-pay-checkout-info__checkout-id-container"> {% block swag_amazon_pay_order_component_checkout_info_checkout_id_container_headline %} <div class="swag-amazon-pay-checkout-info_header"> {{ $tc('swag-amazon-pay-order.checkout-info.referenceIdHeadline') }} </div> {% endblock %} {% block swag_amazon_pay_order_component_checkout_info_checkout_id_container_value %} <div class="swag-amazon-pay-checkout-info_label"> {{ transaction.customFields.swag_amazon_pay_charge_permission_id }} </div> {% endblock %} </div> {% endblock %} {% block swag_amazon_pay_order_component_checkout_info_status_container %} <div class="swag-amazon-pay-checkout-info__status-container"> {% block swag_amazon_pay_order_component_checkout_info_status_container_headline %} <div class="swag-amazon-pay-checkout-info_header"> {{ $tc('swag-amazon-pay-order.checkout-info.statusHeadline') }} </div> {% endblock %} {% block swag_amazon_pay_order_component_checkout_info_status_container_value %} <div v-if="paymentStatusText" class="swag-amazon-pay-checkout-info_label" > {{ paymentStatusText }} </div> {% endblock %} </div> {% endblock %} {# {% block swag_amazon_pay_order_component_checkout_info_billing_container %} <div class="swag-amazon-pay-checkout-info__billing-address-container"> {% block swag_amazon_pay_order_component_checkout_info_billing_container_headline %} <div class="swag-amazon-pay-checkout-info_header"> {{ $tc('swag-amazon-pay-order.checkout-info.billingAddressHeadline') }} </div> {% endblock %} {% block swag_amazon_pay_order_component_checkout_info_billing_container_value %} <sw-address :address="billingAddress"> </sw-address> {% endblock %} </div> {% endblock %} {% block swag_amazon_pay_order_component_checkout_info_shipping_container %} <div class="swag-amazon-pay-checkout-info__shipping-address-container"> {% block swag_amazon_pay_order_component_checkout_info_shipping_container_headline %} <div class="swag-amazon-pay-checkout-info_header"> {{ $tc('swag-amazon-pay-order.checkout-info.shippingAddressHeadline') }} </div> {% endblock %} {% block swag_amazon_pay_order_component_checkout_info_shipping_container_value %} <sw-address :address="shippingAddress"> </sw-address> {% endblock %} </div> {% endblock %} #} </sw-container> {% endblock %}`,{Component:na}=Shopware;na.register("swag-amazon-pay-checkout-info",{template:ta,props:{paymentDetails:{type:Object,required:!0},transaction:{type:Object,required:!0},order:{type:Object,required:!0}},computed:{billingAddress(){const a=this.order.billingAddressId;return this.order.addresses.get(a)},shippingAddress(){return this.order.deliveries.last().shippingOrderAddress},paymentStatusText(){return this.paymentDetails.chargePermission.status}}});const oa=`{% block swag_amazon_pay_order_charge_modal %} <sw-modal :title="$tc('swag-amazon-pay-order.charge-modal.title')" @modal-close="closeModal" > {% block swag_amazon_pay_order_charge_modal_content %} <template #default> {% block swag_amazon_pay_order_charge_modal_content_info_text %} <div class="swag-amazon-pay-charge-modal__info-text"> <span> {{ $tc('swag-amazon-pay-order.charge-modal.infoText') }} </span> </div> {% endblock %} {% block swag_amazon_pay_order_charge_modal_content_max_amount %} <div class="swag-amazon-pay-charge-modal__info-maximum-amount"> <span> {{ $tc('swag-amazon-pay-order.charge-modal.maximumAmount', 0, { amount: chargeAmountLimitFormatted }) }} </span> </div> {% endblock %} {% block swag_amazon_pay_order_charge_modal_content_fields %} <div class="swag-amazon-pay-charge-modal__field-container"> {% block swag_amazon_pay_order_charge_modal_content_fields_amount %} <mt-number-field v-model="chargeAmount" {# The template string is used to convert the refund amount to a string #} :placeholder="\`\${chargeAmountLimit}\`" :label="$tc('swag-amazon-pay-order.charge-modal.amountFieldLabel')" :min="0" :max="chargeAmountLimit" > <template #suffix> <span class="swag-amazon-pay-charge-modal__currency-code"> {{ paymentDetails.chargePermission.currency }} </span> </template> </mt-number-field> {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block swag_amazon_pay_order_charge_modal_actions %} <template #modal-footer> {% block swag_amazon_pay_order_charge_modal_cancel %} <mt-button size="small" @click="closeModal" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_order_charge_modal_confirm %} <mt-button variant="primary" size="small" :isLoading="isLoading" @click="onConfirm" > {{ $tc('swag-amazon-pay-order.charge-modal.buttonConfirm') }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:ia,Mixin:b}=Shopware,{currency:z}=Shopware.Utils.format;ia.register("swag-amazon-pay-charge-modal",{template:oa,inject:["SwagAmazonPayOrderService"],mixins:[b.getByName("notification"),b.getByName("sw-inline-snippet")],props:{paymentDetails:{type:Object,required:!0},chargeId:{type:String,required:!0}},data(){return{isLoading:!1,chargeAmount:null}},beforeMount(){this.chargeAmount=this.chargeAmountLimit},computed:{chargeAmountLimitFormatted(){return z(this.chargeAmountLimit,this.paymentDetails.chargePermission.currency)},chargeAmountLimit(){const a=this.getCharge();return a.amount-a.capturedAmount}},methods:{closeModal(){this.$emit("modal-close")},getCharge(){return this.paymentDetails.charges[this.chargeId]?this.paymentDetails.charges[this.chargeId].details:null},onConfirm(){(!this.chargeAmount||isNaN(this.chargeAmount)||!Number.isFinite(this.chargeAmount||this.chargeAmount===0))&&(this.chargeAmount=this.chargeAmountLimit);const a=this.paymentDetails.chargePermission.currency,e=z(this.chargeAmount,a);this.isLoading=!0,this.SwagAmazonPayOrderService.chargePayment(this.chargeId,this.chargeAmount,a).then(t=>{t.chargeId?(this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-amazon-pay-order.charge-modal.notification.success",0,{amount:e})}),this.$emit("reload-payment")):(this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:t.message}),this.isLoading=!1)}).catch(t=>{this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:t.message}),this.isLoading=!1})}}});const sa=`{% block swag_amazon_pay_order_charge_modal %} <sw-modal :title="$tc('swag-amazon-pay-order.create-charge-modal.title')" @modal-close="closeModal" > {% block swag_amazon_pay_order_charge_modal_content %} <template #default> {% block swag_amazon_pay_order_charge_modal_content_fields %} <div class="swag-amazon-pay-create-charge-modal__field-container"> {% block swag_amazon_pay_order_charge_modal_content_fields_amount %} <mt-number-field v-model="chargeAmount" :label="$tc('swag-amazon-pay-order.create-charge-modal.amountFieldLabel')" :min="0" > <template #suffix> <span class="swag-amazon-pay-create-charge-modal__currency-code" > {{ paymentDetails.chargePermission.currency }} </span> </template> </mt-number-field> {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block swag_amazon_pay_order_charge_modal_actions %} <template #modal-footer> {% block swag_amazon_pay_order_charge_modal_cancel %} <mt-button size="small" @click="closeModal" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_order_charge_modal_confirm %} <mt-button variant="primary" size="small" :isLoading="isLoading" @click="onConfirm" > {{ $tc('swag-amazon-pay-order.create-charge-modal.buttonConfirm') }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:ra,Mixin:k}=Shopware,{currency:v}=Shopware.Utils.format;ra.register("swag-amazon-pay-create-charge-modal",{template:sa,inject:["SwagAmazonPayOrderService"],mixins:[k.getByName("notification"),k.getByName("sw-inline-snippet")],props:{paymentDetails:{type:Object,required:!0}},data(){return{isLoading:!1,chargeAmount:null}},beforeMount(){this.chargeAmount=this.chargeAmountLimit},computed:{chargeAmountLimitFormatted(){return v(this.chargeAmountLimit,this.paymentDetails.chargePermission.currency)},chargeAmountLimit(){return this.paymentDetails.chargePermission.amount-this.paymentDetails.totalChargedAmount}},methods:{closeModal(){this.$emit("modal-close")},onConfirm(){this.chargeAmount||(this.chargeAmount=this.chargeAmountLimit);const a=this.paymentDetails.chargePermission.currency,e=v(this.chargeAmount,a);this.isLoading=!0,this.SwagAmazonPayOrderService.createCharge(this.paymentDetails.chargePermission.reference,this.chargeAmount).then(t=>{t.chargeId?(this.$emit("reload-payment"),this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-amazon-pay-order.create-charge-modal.notification.success",0,{amount:e})})):(this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:t.message}),this.isLoading=!1)}).catch(t=>{this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:t.message})}).finally(()=>{this.isLoading=!1,this.closeModal()})}}});const ca=`{% block swag_amazon_pay_order_refund_modal %} <sw-modal :title="$tc('swag-amazon-pay-order.refund-modal.title')" @modal-close="closeModal" > {% block swag_amazon_pay_order_refund_modal_content %} <template #default> {% block swag_amazon_pay_order_refund_modal_content_info_text %} {# <div class="swag-amazon-pay-refund-modal__info-text"> <span> {{ $tc('swag-amazon-pay-order.refund-modal.infoText') }} </span> </div> #} {% endblock %} {% block swag_amazon_pay_order_refund_modal_content_max_amount %} {# <div class="swag-amazon-pay-refund-modal__info-maximum-amount"> <span> {{ $tc('swag-amazon-pay-order.refund-modal.maximumAmount', 0, { refundAmountLimit: refundAmountLimitFormatted }) }} </span> </div> #} {% endblock %} {% block swag_amazon_pay_order_refund_modal_content_fields %} <div class="swag-amazon-pay-refund-modal__field-container"> {% block swag_amazon_pay_order_refund_modal_content_fields_amount %} <mt-number-field v-model="refundAmount" {# The template string is used to convert the refund amount to a string #} :placeholder="refundAmountDefault" :label="$tc('swag-amazon-pay-order.refund-modal.amountFieldLabel') + ' ' + $tc('swag-amazon-pay-order.refund-modal.maximumAmount', 0, { refundAmountLimit: refundAmountLimitFormatted })" :min="0" :max="refundAmountLimit" > <template #suffix> <span class="swag-amazon-pay-refund-modal__currency-code"> {{ paymentDetails.chargePermission.currency }} </span> </template> </mt-number-field> {% endblock %} {% block swag_amazon_pay_order_refund_modal_content_fields_reason %} <mt-text-field v-model="reason" :placeholder="$tc('swag-amazon-pay-order.refund-modal.reasonPlaceholder')" :label="$tc('swag-amazon-pay-order.refund-modal.reasonFieldLabel')" > maxlength="16"> </mt-text-field> {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block swag_amazon_pay_order_refund_modal_actions %} <template #modal-footer> {% block swag_amazon_pay_order_refund_modal_cancel %} <mt-button size="small" @click="closeModal" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_order_refund_modal_confirm %} <mt-button variant="primary" size="small" :isLoading="isLoading" @click="onConfirm" > {{ $tc('swag-amazon-pay-order.refund-modal.buttonConfirm') }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:la,Mixin:C}=Shopware,{currency:$}=Shopware.Utils.format;la.register("swag-amazon-pay-refund-modal",{template:ca,inject:["SwagAmazonPayOrderService"],mixins:[C.getByName("notification"),C.getByName("sw-inline-snippet")],props:{paymentDetails:{type:Object,required:!0},chargeId:{type:String,required:!0}},data(){return{isLoading:!1,refundAmount:null,reason:""}},beforeMount(){this.refundAmount=this.getDefaultRefundAmount()},computed:{refundAmountLimit(){const a=this.getCharge();return a===null?0:a.maxRefundableAmount},refundAmountLimitFormatted(){return $(this.refundAmountLimit,this.paymentDetails.chargePermission.currency,2)},refundAmountDefault(){this.getDefaultRefundAmount()}},methods:{closeModal(){this.$emit("modal-close")},getDefaultRefundAmount(){const a=this.getCharge();return a===null?0:a.defaultRefundableAmount},getCharge(){return this.paymentDetails.charges[this.chargeId]?this.paymentDetails.charges[this.chargeId]:null},validateForm(){return(!this.refundAmount||isNaN(this.refundAmount)||!Number.isFinite(this.refundAmount)||this.refundAmount===0||this.refundAmount>this.refundAmountLimit)&&(this.refundAmount=this.refundAmountDefault),!0},onConfirm(){if(this.validateForm()!==!0)return;const a=this.paymentDetails.chargePermission.currency,e=$(this.refundAmount,a,2);this.isLoading=!0,this.SwagAmazonPayOrderService.refundPayment(this.chargeId,this.refundAmount,a,this.reason).then(t=>{t.chargeId?(this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-amazon-pay-order.refund-modal.notification.success",0,{amount:e})}),this.$emit("reload-payment")):(this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:t.message}),this.isLoading=!1)}).catch(t=>{this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:t.message}),this.isLoading=!1})}}});const da=`{% block swag_amazon_pay_order_cancel_modal %} <sw-modal :title="$tc('swag-amazon-pay-order.cancel-modal.title')" @modal-close="closeModal" > {% block swag_amazon_pay_order_cancel_modal_content %} <template #default> {% block swag_amazon_pay_order_cancel_modal_content_info_text %} <div class="swag-amazon-pay-cancel-modal__info-text"> <span> {{ $tc('swag-amazon-pay-order.cancel-modal.infoText') }} </span> </div> {% endblock %} {% block swag_amazon_pay_order_cancel_modal_content_max_amount %} <div class="swag-amazon-pay-cancel-modal__info-maximum-amount"> <span> {{ $tc('swag-amazon-pay-order.cancel-modal.infoTextReason') }} </span> </div> {% endblock %} {% block swag_amazon_pay_order_cancel_modal_content_fields %} <div class="swag-amazon-pay-cancel-modal__field-container"> {% block swag_amazon_pay_order_cancel_modal_content_fields_reason %} <mt-text-field v-model="reason" :required="true" :placeholder="$tc('swag-amazon-pay-order.cancel-modal.reasonPlaceholder')" :label="$tc('swag-amazon-pay-order.cancel-modal.reasonFieldLabel')" > </mt-text-field> {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block swag_amazon_pay_order_cancel_modal_actions %} <template #modal-footer> {% block swag_amazon_pay_order_cancel_modal_cancel %} <mt-button size="small" @click="closeModal" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block swag_amazon_pay_order_cancel_modal_confirm %} <mt-button variant="primary" size="small" :isLoading="isLoading" :disabled="!reason" @click="onConfirm" > {{ $tc('swag-amazon-pay-order.refund-modal.buttonConfirm') }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:ma,Mixin:S}=Shopware;ma.register("swag-amazon-pay-cancel-modal",{template:da,inject:["SwagAmazonPayOrderService"],mixins:[S.getByName("notification"),S.getByName("sw-inline-snippet")],props:{paymentDetails:{type:Object,required:!0}},data(){return{isLoading:!1,reason:""}},methods:{closeModal(){this.$emit("modal-close")},onConfirm(){this.reason&&(this.isLoading=!0,this.SwagAmazonPayOrderService.cancelPayment(this.paymentDetails.chargePermission.reference,this.reason).then(a=>{if(a.statusDetails&&a.statusDetails.state==="Closed"){this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-amazon-pay-order.cancel-modal.notification.success")}),this.$emit("reload-payment");return}const e={title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:this.$tc("swag-amazon-pay-order.cancel-modal.notification.error")};a.message&&(e.message=a.message),this.createNotificationError(e)}).catch(a=>{this.createNotificationError({title:this.$tc("global.notification.unspecifiedSaveErrorMessage"),message:a.message})}).finally(()=>{this.isLoading=!1}))}}});const ga=`{% block swag_amazon_pay_order_component_payment_history %} <div> <sw-data-grid ref="swDataGrid" :dataSource="paymentDetails.transactionsCombined" :showSelection="false" :isLoading="isLoading" :compactMode="false" :showActions="false" :columns="columns" > {% block swag_amazon_pay_order_component_payment_history_data_grid_column_created %} <template #column-time="{ item }"> {{ dateFilter(item.time, { hour: '2-digit', minute: '2-digit',day: '2-digit', month: '2-digit', year: '2-digit' }) }} </template> {% endblock %} {% block swag_amazon_pay_order_component_payment_history_data_grid_column_amount %} <template #column-amount="{ item }"> <div v-if="item.type === 'Charge' && item.status === 'Captured'" class="amazon-pay-transaction-amount" > {{ formatCurrency(item.capturedAmount) }} </div> <div v-if="(item.type !== 'Charge' || item.status !== 'Captured') && item.type !== 'Refund'" class="amazon-pay-transaction-amount" > {{ formatCurrency(item.amount) }} </div> <div v-if="item.type === 'Refund'" class="amazon-pay-transaction-amount amazon-pay-transaction-amount-negative" > {{ formatCurrency(-item.amount) }} </div> </template> {% endblock %} {% block swag_amazon_pay_order_component_payment_history_data_grid_column_status %} <template #column-status="{ item }"> <span :class="{ 'amazon-pay-transaction-status-success':(item.status === 'Captured' ||item.status === 'Refunded'), 'amazon-pay-transaction-status-info':(item.status === 'Authorized' || item.status === 'RefundInitiated'), 'amazon-pay-transaction-status-warning':(item.status === 'AuthorizationInitiated'), 'amazon-pay-transaction-status-danger':(item.status === 'Declined' || item.status === 'Canceled') }" > {{ item.status }}</span> </template> {% endblock %} {% block swag_amazon_pay_order_component_payment_history_data_grid_column_actions %} <template #column-actions="{ item }"> <mt-button v-if="item.type === 'Charge' && paymentDetails.charges[item.reference].maxRefundableAmount > 0" size="small" variant="secondary" class="swag-amazon-pay-action-toolbar__button" :disabled="!acl.can('order.editor')" @click="showRefundModal(item)" ghost > {{ $tc('swag-amazon-pay-order.action-toolbar.refund') }} </mt-button> <mt-button size="small" variant="secondary" v-if="item.type === 'Charge' && item.status === 'Authorized'" class="swag-amazon-pay-action-toolbar__button" :disabled="!acl.can('order.editor')" @click="showCaptureModal(item)" ghost > {{ $tc('swag-amazon-pay-order.action-toolbar.charge') }} </mt-button> </template> {% endblock %} </sw-data-grid> <swag-amazon-pay-refund-modal v-if="refundModalVisible" :paymentDetails="paymentDetails" :chargeId="refundChargeId" @modal-close="closeModals" @reload-payment="reloadPaymentDetails" > </swag-amazon-pay-refund-modal> <swag-amazon-pay-charge-modal v-if="captureModalVisible" :paymentDetails="paymentDetails" :chargeId="captureChargeId" @modal-close="closeModals" @reload-payment="reloadPaymentDetails" > </swag-amazon-pay-charge-modal> </div> {% endblock %}`,{Component:pa,Context:wa}=Shopware,{currency:ua}=Shopware.Utils.format;pa.register("swag-amazon-pay-payment-history",{template:ga,inject:["acl"],props:{paymentDetails:{type:Object,required:!0}},data(){return{paymentNotifications:[],refundModalVisible:!1,captureModalVisible:!1,refundChargeId:null,captureChargeId:null,repository:null,isLoading:!1}},computed:{columns(){return[{property:"type",dataIndex:"type",label:this.$tc("swag-amazon-pay-order.payment-history.columns.subject"),primary:!0},{property:"reference",dataIndex:"reference",label:this.$tc("swag-amazon-pay-order.payment-history.columns.objectId")},{property:"amount",dataIndex:"amount",label:this.$tc("swag-amazon-pay-order.payment-history.columns.amount")},{property:"status",dataIndex:"status",align:"center",label:this.$tc("swag-amazon-pay-order.payment-history.columns.status")},{property:"time",dataIndex:"time",label:this.$tc("swag-amazon-pay-order.payment-history.columns.date")},{property:"actions",dataIndex:"actions",label:this.$tc("swag-amazon-pay-order.payment-history.columns.actions")}]},dateFilter(){return Shopware.Filter.getByName("date")}},created(){},methods:{showRefundModal(a){this.refundChargeId=a.reference,this.refundModalVisible=!0},showCaptureModal(a){this.captureChargeId=a.reference,this.captureModalVisible=!0},closeModals(){this.captureModalVisible=!1,this.refundModalVisible=!1},reloadPaymentDetails(){this.closeModals(),this.$nextTick().then(()=>{this.$emit("reload-payment")})},formatCurrency(a){return ua(a||0,this.paymentDetails.chargePermission.currency)}}});const{Module:_a}=Shopware;_a.register("swag-amazon-pay-order",{type:"plugin",name:"SwagAmazonPayOrder",title:"swag-amazon-pay-order.general.title",description:"swag-amazon-pay-order.general.description",version:"1.0.0",targetVersion:"1.0.0",routeMiddleware(a,e){e.name==="sw.order.detail"&&e.children.push({component:"swag-amazon-pay-order-tab",name:"swag-amazon-pay-order.payment.detail",isChildren:!0,path:"/sw/order/swag-amazon-pay-order/detail/:id/:transactionId",meta:{parentPath:"sw.order.index",privilege:"order.viewer"}}),a(e)}});const{Application:x}=Shopware,r=Shopware.Classes.ApiService;class ha extends r{constructor(e,t,n="swag-amazon-pay-order"){super(e,t,n)}fetchPaymentDetails(e,t=!1){const n=`_action/${this.getApiBasePath()}/payment-details/${e}`;return this.httpClient.get(n,{params:{refreshData:t?1:0},headers:this.getBasicHeaders()}).then(o=>r.handleResponse(o))}chargePayment(e,t,n,o=""){const s=`_action/${this.getApiBasePath()}/charge-payment/${e}`;return this.httpClient.post(s,{currencyCode:n,softDescriptor:o,amount:t},{headers:this.getBasicHeaders()}).then(d=>r.handleResponse(d))}createCharge(e,t,n=""){const o=`_action/${this.getApiBasePath()}/create-charge/${e}`;return this.httpClient.post(o,{softDescriptor:n,amount:t},{headers:this.getBasicHeaders()}).then(s=>r.handleResponse(s))}cancelPayment(e,t){const n=`_action/${this.getApiBasePath()}/cancel-payment/${e}`;return this.httpClient.post(n,{closureReason:t},{headers:this.getBasicHeaders()}).then(o=>r.handleResponse(o))}refundPayment(e,t,n,o=""){const s=`_action/${this.getApiBasePath()}/refund-payment/${e}`;return this.httpClient.post(s,{currencyCode:n,softDescriptor:o,amount:t},{headers:this.getBasicHeaders()}).then(d=>r.handleResponse(d))}}x.addServiceProvider("SwagAmazonPayOrderService",a=>{const e=x.getContainer("init");return new ha(e.httpClient,a.loginService)});const fa=`{% block sw_extension_card_base_context_menu_settings %} {% parent() %} <sw-context-menu-item v-if="extension.name === 'SwagAmazonPay' && extension.active === true" @click="onSwagAmazonPaySettings()" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.config') }} </sw-context-menu-item> {% endblock %}`,{Component:ya}=Shopware;ya.override("sw-extension-card-base",{template:fa,methods:{onSwagAmazonPaySettings(){this.$router.push({name:"swag.amazon.pay.configuration.config"})}}});
//# sourceMappingURL=swag-amazon-pay-CFjsWssk.js.map
