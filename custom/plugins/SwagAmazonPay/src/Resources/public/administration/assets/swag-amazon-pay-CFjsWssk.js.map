{"version":3,"file":"swag-amazon-pay-CFjsWssk.js","sources":["../../../app/administration/src/module/swag-amazon-pay-configuration/acl/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/page/swag-amazon-pay-settings/swag-amazon-pay-settings.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/page/swag-amazon-pay-settings/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration-input-key-modal/swag-amazon-pay-configuration-input-key-modal.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration-input-key-modal/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration/swag-amazon-pay-configuration.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration-upload-modal/swag-amazon-pay-configuration-upload-modal.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration-upload-modal/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration-log-download/swag-amazon-pay-configuration-log-download.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-configuration-log-download/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-insecure-domain-notification/swag-amazon-pay-insecure-domain-notification.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-insecure-domain-notification/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-settings-icon/swag-amazon-pay-settings-icon.html.twig","../../../app/administration/src/module/swag-amazon-pay-configuration/component/swag-amazon-pay-settings-icon/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/index.js","../../../app/administration/src/module/swag-amazon-pay-configuration/api/swag-amazon-pay-config.service.js","../../../app/administration/src/module/swag-amazon-pay-order/extension/sw-order/sw-order.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/extension/sw-order/index.js","../../../app/administration/src/module/swag-amazon-pay-order/page/swag-amazon-pay-order-tab/swag-amazon-pay-order-tab.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/page/swag-amazon-pay-order-tab/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-buyer-info/swag-amazon-pay-buyer-info.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-buyer-info/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-amount-info/swag-amazon-pay-amount-info.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-amount-info/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-action-toolbar/swag-amazon-pay-action-toolbar.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-action-toolbar/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-checkout-info/swag-amazon-pay-checkout-info.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-checkout-info/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-charge-modal/swag-amazon-pay-charge-modal.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-charge-modal/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-create-charge-modal/swag-amazon-pay-create-charge-modal.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-create-charge-modal/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-refund-modal/swag-amazon-pay-refund-modal.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-refund-modal/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-cancel-modal/swag-amazon-pay-cancel-modal.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-cancel-modal/index.js","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-payment-history/swag-amazon-pay-payment-history.html.twig","../../../app/administration/src/module/swag-amazon-pay-order/component/swag-amazon-pay-payment-history/index.js","../../../app/administration/src/module/swag-amazon-pay-order/index.js","../../../app/administration/src/module/swag-amazon-pay-order/api/swag-amazon-pay-order.service.js","../../../app/administration/src/extension/sw-extension-card-base/sw-extension-card-base.html.twig","../../../app/administration/src/extension/sw-extension-card-base/index.js"],"sourcesContent":["Shopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'swag_amazonpay',\n    key: 'swag_amazonpay',\n    roles: {\n        viewer: {\n            privileges: [\n                'sales_channel:read',\n                'sales_channel_domain:read',\n                'sales_channel_payment_method:read',\n                'system_config:read',\n            ],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'sales_channel:update',\n                'sales_channel_payment_method:create',\n                'sales_channel_payment_method:update',\n                'system_config:update',\n                'system_config:create',\n                'system_config:delete',\n            ],\n            dependencies: [\n                'swag_amazonpay.viewer',\n            ],\n        },\n    },\n});\n","{% block swag_amazon_pay_settings %}\n    <sw-page class=\"swag-amazon-pay-settings\">\n        {% block swag_amazon_pay_settings_header %}\n        <template #smart-bar-header>\n            <h2>\n                {{ $tc('sw-settings.index.title') }}\n                <mt-icon\n                    name=\"regular-chevron-right-xs\"\n                    size=\"16px\"\n                ></mt-icon>\n                {{ $tc('swag-amazon-pay-configuration.module.title') }}\n            </h2>\n        </template>\n        {% endblock %}\n\n    {% block swag_amazon_pay_settings_actions %}\n        <template #smart-bar-actions>\n            {% block swag_amazon_pay_settings_export_config %}\n            <mt-button\n                class=\"sw-settings-login-registration__export-action\"\n                :isLoading=\"isExporting\"\n                :disabled=\"isLoading || isExporting\"\n                @click=\"onExportConfig\"\n                variant=\"secondary\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.actions.exportConfig') }}\n            </mt-button>\n            {% endblock %}\n\n        {% block swag_amazon_pay_settings_import_config %}\n            <mt-button\n                class=\"sw-settings-login-registration__import-action\"\n                :isLoading=\"isImporting\"\n                :disabled=\"isLoading || isImporting || !acl.can('swag_amazonpay.editor')\"\n                @click=\"onImportConfig\"\n                variant=\"secondary\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.actions.importConfig') }}\n            </mt-button>\n            {% endblock %}\n\n        {% block swag_amazon_pay_settings_save %}\n            <mt-button\n                class=\"sw-settings-login-registration__save-action\"\n                variant=\"primary\"\n                :isLoading=\"isLoading\"\n                :disabled=\"isLoading\"\n                @click=\"onSave\"\n            >\n                {{ $tc('global.default.save') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n    {% block swag_amazon_pay_settings_content %}\n        <template #content>\n            {% block swag_amazon_pay_settings_content_config_import_modal %}\n            <swag-amazon-pay-configuration-upload-modal\n                v-if=\"showConfigImportModal\"\n                @modal-close=\"onCloseModal()\"\n            >\n                </swag-amazon-pay-configuration-upload-modal>\n            {% endblock %}\n            <sw-card-view>\n                {% block swag_amazon_pay_settings_content_card_view %}\n                <swag-amazon-pay-configuration\n                    salesChannelSwitchable\n                    inherit\n                    configDomain=\"SwagAmazonPay.settings\"\n                    :parentLoading=\"isLoading\"\n                    @change-config=\"onConfigChange\"\n                >\n                    </swag-amazon-pay-configuration>\n                {% endblock %}\n            </sw-card-view>\n        </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}","import template from './swag-amazon-pay-settings.html.twig';\nimport './swag-amazon-pay-settings.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-amazon-pay-settings', {\n    template,\n\n    inject: [\n        'SwagAmazonPayConfigService',\n        'systemConfigApiService',\n        'acl',\n    ],\n\n    mixins: [\n        'notification',\n        'sw-inline-snippet',\n    ],\n\n    data() {\n        return {\n            isSaveSuccessful: false,\n            isExporting: false,\n            isImporting: false,\n            showConfigImportModal: false,\n            config: null,\n            configDomain: 'SwagAmazonPay.settings',\n            salesChannelId: null,\n            isLoading: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$tc('swag-amazon-pay-configuration.module.title'),\n        };\n    },\n\n    methods: {\n        /**\n         * Called when the save button was clicked. Saves the configuration.\n         */\n        onSave() {\n            this.isLoading = true;\n\n            const configToBeSaved = {};\n\n            // Decide if all values should be saved (separate config for this sales channel)\n            // or inheritance should come in place\n            if (!this.config.inheritFromDefault) {\n                Object.keys(this.config).forEach((key) => {\n                    const configActualKey = this.configDomain.concat('.').concat(key);\n\n                    configToBeSaved[configActualKey] = this.config[key];\n                });\n            } else {\n                const key = this.configDomain.concat('.').concat('inheritFromDefault');\n\n                configToBeSaved[key] = true;\n            }\n\n            this.$emit('before-save-config', configToBeSaved);\n\n            this.systemConfigApiService.saveValues(configToBeSaved, this.salesChannelId).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('global.default.success'),\n                    message: this.$tc('swag-amazon-pay-configuration.notification.configSaveSuccessMessage'),\n                });\n\n                this.isSaveSuccessful = true;\n\n                this.$emit('save-config-success');\n            }).catch((error) => {\n                this.$emit('save-config-error', error);\n\n                this.createNotificationError({\n                    title: this.$tc('global.default.error'),\n                    message: error,\n                });\n            }).finally(() => {\n                this.$emit('after-save-config', configToBeSaved);\n\n                this.isLoading = false;\n            });\n        },\n\n        /**\n         * Called if a config field value changes inside the form.\n         * Functions as bind back for the actual config form.\n         *\n         * @param config\n         * @param salesChannelId\n         */\n        onConfigChange(config, salesChannelId) {\n            this.config = config;\n            this.salesChannelId = salesChannelId;\n        },\n\n        onExportConfig() {\n            this.isExporting = true;\n\n            this.SwagAmazonPayConfigService.exportConfig().then(response => {\n                const url = window.URL.createObjectURL(new Blob([JSON.stringify(response)]));\n                const link = document.createElement('a');\n\n                link.href = url;\n                link.setAttribute('download', 'swag-amazon-pay.config.json');\n\n                document.body.appendChild(link);\n                link.click();\n\n                document.body.removeChild(link);\n\n                this.isExportSuccessful = true;\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('swag-amazon-pay-configuration.exception.exportConfig.title'),\n                    message: this.$tc('swag-amazon-pay-configuration.exception.exportConfig.message'),\n                });\n            }).finally(() => {\n                this.isExporting = false;\n                this.isExportSuccessful = false;\n            });\n        },\n\n        onCloseModal() {\n            this.showConfigImportModal = false;\n            this.isImporting = false;\n        },\n\n        onImportConfig() {\n            this.showConfigImportModal = true;\n            this.isImporting = true;\n        },\n    },\n});\n","{% block swag_amazon_pay_configuration_input_key_modal %}\n    <sw-modal\n        :title=\"$tc('swag-amazon-pay-configuration.inputKeyModal.title')\"\n        @modal-close=\"onCancel\"\n    >\n        {% block swag_amazon_pay_configuration_input_key_modal_content %}\n        <sw-container gap=\"0px 10px\">\n            {% block swag_amazon_pay_configuration_input_key_modal_content_info_text %}\n            <sw-container gap=\"0px 10px\">\n                <mt-banner>\n                    <span\n                        v-html=\"$tc('swag-amazon-pay-configuration.inputKeyModal.infoText')\"\n                    ></span>\n                </mt-banner>\n            </sw-container>\n            {% endblock %}\n\n                {% block swag_amazon_pay_configuration_input_key_modal_content_private_key_input %}\n            <mt-textarea\n                :label=\"$tc('swag-amazon-pay-configuration.inputKeyModal.labelContent')\"\n                v-model=\"privateKey\"\n            ></mt-textarea>\n            {% endblock %}\n        </sw-container>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_input_key_modal_actions %}\n        <template #modal-footer>\n            {% block swag_amazon_pay_configuration_input_key_modal_actions_cancel %}\n            <mt-button\n                size=\"small\"\n                @click=\"onCancel\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.inputKeyModal.buttonCancel') }}\n            </mt-button>\n            {% endblock %}\n\n                {% block swag_amazon_pay_configuration_input_key_modal_actions_send %}\n            <mt-button\n                variant=\"primary\"\n                size=\"small\"\n                :disabled=\"!privateKey\"\n                @click=\"onConfirm\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.inputKeyModal.buttonSend') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import template from './swag-amazon-pay-configuration-input-key-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-amazon-pay-configuration-input-key-modal', {\n    template,\n\n    inject: [\n        'SwagAmazonPayConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            privateKey: '',\n        };\n    },\n\n    methods: {\n        /**\n         *\n         */\n        onConfirm() {\n            if (this.privateKey.includes('BEGIN RSA PRIVATE KEY') === false\n                && this.privateKey.includes('BEGIN PRIVATE KEY') === false\n            ) {\n                this.createNotificationWarning({\n                    title: this.$tc('swag-amazon-pay-configuration.inputKeyModal.notification.warning'),\n                    message: this.$tc('swag-amazon-pay-configuration.inputKeyModal.notification.invalidKeyFormat'),\n                });\n\n                return;\n            }\n\n            this.$emit('update-private-key', this.privateKey);\n        },\n\n        /**\n         * Called when the user clicks the close or cancel button of the modal.\n         */\n        onCancel() {\n            this.$emit('modal-close');\n        },\n    },\n});\n","{% block sw_system_config %}\n    <div class=\"sw-system-config\">\n        {% block swag_amazon_pay_configuration_sales_channel_switch %}\n        <div\n            class=\"sw-system-config__global-sales-channel-switch swag-amazon-pay-saleschannel-switch\"\n        >\n            <sw-sales-channel-switch\n                :label=\"$tc('sw-settings.system-config.labelSalesChannelSelect')\"\n                @change-sales-channel-id=\"onSalesChannelChanged\"\n            >\n                </sw-sales-channel-switch>\n            {% block swag_amazon_pay_configuration_sales_channel_switch_set_default_payment_method %}\n            <mt-button\n                class=\"swag-amazon-pay-configuration__salesChannelDefaultButton\"\n                :isLoading=\"settingDefaultSalesChannelLoading\"\n                :disabled=\"!acl.can('swag_amazonpay.editor')\"\n                @click=\"onSetAmazonPayAsDefaultPaymentMethod\"\n                variant=\"secondary\"\n                size=\"default\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.actions.setAsDefaultPaymentMethod') }}\n            </mt-button>\n            {% endblock %}\n\n                {% block swag_amazon_pay_configiguration_sales_channel_switch_insecure_domain_notification %}\n            <swag-amazon-pay-insecure-domain-notification :salesChannelId=\"salesChannelId\">\n                    </swag-amazon-pay-insecure-domain-notification>\n            {% endblock %}\n\n                {% block swag_amazon_pay_configiguration_sales_channel_switch_inherit_configuration %}\n            <mt-switch\n                v-if=\"isInheritanceSwitchVisible && !showLoader\"\n                v-model=\"config.inheritFromDefault\"\n                class=\"swag-amazon-pay-configuration-inheritance-field\"\n                :disabled=\"!acl.can('swag_amazonpay.editor')\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.inheritFromDefault.label')\"\n                @change=\"onSwitchInheritance\"\n            >\n                    </mt-switch>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_loading %}\n        <mt-loader v-if=\"showLoader\"></mt-loader>\n        {% endblock %}\n        {% block swag_amazon_pay_configuration_card_help %}\n        <mt-card\n            v-if=\"!showLoader\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.help')\"\n        >\n            <span\n                v-html=\"$tc('swag-amazon-pay-configuration.help.helpText')\"\n                class=\"swag-amazon-pay-configuration-text\"\n            ></span>\n        </mt-card>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_account %}\n        <mt-card\n            v-if=\"!showLoader\"\n            class=\"swag-amazon-pay-configuration\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.account')\"\n        >\n            {% block swag_amazon_pay_configuration_card_account_content %}\n                    {% block swag_amazon_pay_configuration_card_account_content_configuration_text %}\n            <div\n                class=\"swag-amazon-pay-configuration-text\"\n                v-if=\"!config.merchantId\"\n            >\n                <span class=\"headline headline-m\">\n                    {{ $tc('swag-amazon-pay-configuration.configForm.registerHeadline') }}\n                </span>\n                <span\n                    v-html=\"$tc('swag-amazon-pay-configuration.configForm.registerExplanation')\"\n                    class=\"swag-amazon-pay-configuration-text-register-explanation\"\n                ></span>\n            </div>\n            <div\n                class=\"swag-amazon-pay-configuration-text\"\n                v-if=\"!config.merchantId\"\n            >\n                <span class=\"headline headline-m\">\n                    {{ $tc('swag-amazon-pay-configuration.configForm.existingAccountHeadline') }}\n                </span>\n                <span\n                    v-html=\"$tc('swag-amazon-pay-configuration.configForm.existingAccountExplanation')\"\n                    class=\"swag-amazon-pay-configuration-text-existing-explanation\"\n                ></span>\n            </div>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_account_content_headline_account_information %}\n            <div class=\"swag-amazon-pay-configuration-text add-margin-top\">\n                <span class=\"headline headline-s\">\n                    {{ $tc('swag-amazon-pay-configuration.configForm.accountHeadline') }}\n                </span>\n            </div>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_account_content_option_ledger_currency %}\n            <div class=\"sw-field--margin-top\">\n                <sw-single-select\n                    v-model:value=\"config.ledgerCurrency\"\n                    required\n                    :options=\"getLedgerCurrencyOptions\"\n                    :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.label')\"\n                    :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.placeholder')\"\n                    :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.helpText')\"\n                    :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                >\n                            </sw-single-select>\n            </div>\n            {% endblock %}\n            <div class=\"swag-amazon-pay-configuration-columns\">\n                <div class=\"column\">\n                    {% block swag_amazon_pay_configuration_card_account_content_option_merchant_id %}\n                    <mt-text-field\n                        v-model=\"config.merchantId\"\n                        required\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.merchantId.label')\"\n                        :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.merchantId.placeholder')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.merchantId.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-text-field>\n                    {% endblock %}\n                </div>\n                <div class=\"column\"></div>\n                <div class=\"column\">\n                    {% block swag_amazon_pay_configuration_card_account_content_option_client_id %}\n                    <mt-text-field\n                        v-model=\"config.clientId\"\n                        required\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.clientId.label')\"\n                        :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.clientId.placeholder')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.clientId.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-text-field>\n                    {% endblock %}\n                </div>\n            </div>\n            {% block swag_amazon_pay_configuration_card_account_content_headline_credentials %}\n            <div class=\"swag-amazon-pay-configuration-text add-margin-top\">\n                <span class=\"headline headline-s\">\n                    {{ $tc('swag-amazon-pay-configuration.configForm.credentialsHeadline') }}\n                </span>\n            </div>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_account_content_option_public_key_id %}\n            <mt-text-field\n                v-model=\"config.publicKeyId\"\n                required\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.publicKeyId.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.publicKeyId.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.publicKeyId.helpText')\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </mt-text-field>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_settings_card_account_private_key_modal %}\n            <swag-amazon-pay-configuration-input-key-modal\n                v-if=\"showInputKeyModal\"\n                @update-private-key=\"onUpdatePrivateKey\"\n                @modal-close=\"onCloseModal()\"\n            >\n                        </swag-amazon-pay-configuration-input-key-modal>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_account_content_field_private_key %}\n            <mt-password-field\n                :placeholder=\"getPrivateKeyPlaceholder()\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.privateKey.label')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.privateKey.helpText')\"\n                required\n                disabled\n                :passwordToggleAble=\"false\"\n            ></mt-password-field>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_account_content_button_input_private_key %}\n            <mt-button\n                variant=\"primary\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                @click=\"displayInputKeyModal\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.actions.insertPrivateKey') }}\n            </mt-button>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_account_content_config_test %}\n            <sw-button-process\n                v-if=\"!showLoader\"\n                class=\"sw-settings-login-registration__test-action\"\n                :isLoading=\"showLoader\"\n                :processSuccess=\"isTestSuccessful\"\n                :disabled=\"showLoader || isTesting || isInherited\"\n                @click=\"onTest\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.actions.testConnection') }}\n            </sw-button-process>\n            {% endblock %}\n\n                {% endblock %}\n        </mt-card>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_general %}\n        <mt-card\n            v-if=\"!showLoader\"\n            class=\"swag-amazon-pay-configuration\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.general')\"\n        >\n            {% block swag_amazon_pay_configuration_card_general_content %}\n                    {% block swag_amazon_pay_configuration_card_general_content_option_sandbox %}\n            <mt-switch\n                v-model=\"config.sandbox\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.sandbox.label')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.sandbox.helpText')\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </mt-switch>\n            {% endblock %}\n            <div\n                class=\"sw-field sw-block-field sw-field--text is--disabled sw-field--default sw-field--margin-top\"\n            >\n                {% block swag_amazon_pay_configuration_card_general_content_ipn_url %}\n                <mt-text-field\n                    v-if=\"ipnUrlLoaded\"\n                    v-model.trim=\"ipnUrl\"\n                    disabled\n                    copyable\n                    :label=\"$tc('swag-amazon-pay-configuration.configForm.labelIpnUrl')\"\n                    :helpText=\"$tc('swag-amazon-pay-configuration.configForm.ipnHelpText')\"\n                >\n                            </mt-text-field>\n                {% endblock %}\n            </div>\n            {% block swag_amazon_pay_configuration_card_accountgeneral_option_soft_descriptor %}\n            <mt-text-field\n                v-model=\"config.softDescriptor\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.softDescriptor.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.softDescriptor.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.softDescriptor.helpText')\"\n                maxlength=\"16\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </mt-text-field>\n            {% endblock %}\n                {% endblock %}\n        </mt-card>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_display_options %}\n        <mt-card\n            v-if=\"!showLoader\"\n            class=\"swag-amazon-pay-configuration\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.displayOptions')\"\n        >\n            {% block swag_amazon_pay_configuration_card_display_options_content %}\n            <div class=\"swag-amazon-pay-configuration-columns\">\n                <div class=\"column\">\n                    {% block swag_amazon_pay_configuration_card_display_options_content_option_product_page %}\n                    <mt-switch\n                        v-model=\"config.displayButtonOnProductPage\"\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnProductPage.label')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnProductPage.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-switch>\n                    {% endblock %}\n\n                            {% block swag_amazon_pay_configuration_card_display_options_content_option_listing_page %}\n                    <mt-switch\n                        v-model=\"config.displayButtonOnListingPage\"\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnListingPage.label')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnListingPage.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-switch>\n                    {% endblock %}\n\n                            {% block swag_amazon_pay_configuration_card_display_options_content_option_checkout_register %}\n                    <mt-switch\n                        v-model=\"config.displayButtonOnCheckoutRegisterPage\"\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnCheckoutRegisterPage.label')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayButtonOnCheckoutRegisterPage.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-switch>\n                    {% endblock %}\n\n                            {% block swag_amazon_pay_configuration_card_display_options_content_option_registration_page %}\n                    <mt-switch\n                        v-model=\"config.displayLoginButtonOnRegistrationPage\"\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayLoginButtonOnRegistrationPage.label')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.displayLoginButtonOnRegistrationPage.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-switch>\n                    {% endblock %}\n                </div>\n            </div>\n            <hr class=\"add-margin-top add-margin-bottom\"/>\n            {% block swag_amazon_pay_configuration_card_display_options_content_look %}\n            <div class=\"swag-amazon-pay-configuration-columns\">\n                <div class=\"column\">\n                    {% block swag_amazon_pay_configuration_card_display_options_content_option_button_color %}\n                    <sw-single-select\n                        v-model:value=\"config.buttonColor\"\n                        :options=\"buttonColorOptions\"\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.label')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                    </sw-single-select>\n                    {% endblock %}\n                </div>\n            </div>\n            {% endblock %}\n            <hr class=\"add-margin-top\"/>\n            <div class=\"swag-amazon-pay-configuration-columns add-margin-top\">\n                <div class=\"column\">\n                    {% block swag_amazon_pay_configuration_card_display_options_content_option_hide_one_click_checkout %}\n                    <mt-switch\n                        v-model=\"config.hideOneClickCheckoutButtons\"\n                        :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.hideOneClickCheckoutButtons.label')\"\n                        :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.hideOneClickCheckoutButtons.helpText')\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </mt-switch>\n                    {% endblock %}\n                </div>\n            </div>\n            {% endblock %}\n        </mt-card>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_state_mapping %}\n        <mt-card\n            v-if=\"!showLoader\"\n            class=\"swag-amazon-pay-configuration\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.paymentStateMapping')\"\n        >\n            {% block swag_amazon_pay_configuration_card_state_mapping_content %}\n            <div class=\"swag-amazon-pay-configuration-text add-margin-top\">\n                {{ $tc('swag-amazon-pay-configuration.configForm.stateMappingExplanation') }}\n            </div>\n            {% block swag_amazon_pay_configuration_card_state_mapping_content_option_authorize %}\n            <sw-entity-single-select\n                v-model:value=\"config.paymentStateMappingAuthorize\"\n                class=\"swag-amazon-pay-configuration-authorize\"\n                entity=\"state_machine_state\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingAuthorize.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingAuthorize.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingAuthorize.helpText')\"\n                :criteria=\"getPaymentStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_state_mapping_content_option_charge %}\n            <sw-entity-single-select\n                v-model:value=\"config.paymentStateMappingCharge\"\n                class=\"swag-amazon-pay-configuration-charge\"\n                entity=\"state_machine_state\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCharge.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCharge.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCharge.helpText')\"\n                :criteria=\"getPaymentStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_state_mapping_content_option_partial_charge %}\n            <sw-entity-single-select\n                v-model:value=\"config.paymentStateMappingPartialCharge\"\n                class=\"swag-amazon-pay-configuration-partial-charge\"\n                entity=\"state_machine_state\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialCharge.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialCharge.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialCharge.helpText')\"\n                :criteria=\"getPaymentStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_state_mapping_content_option_refund %}\n            <sw-entity-single-select\n                v-model:value=\"config.paymentStateMappingRefund\"\n                class=\"swag-amazon-pay-configuration-refund\"\n                entity=\"state_machine_state\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingRefund.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingRefund.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingRefund.helpText')\"\n                :criteria=\"getPaymentStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_state_mapping_content_option_partial_refund %}\n            <sw-entity-single-select\n                v-model:value=\"config.paymentStateMappingPartialRefund\"\n                class=\"swag-amazon-pay-configuration-partial-refund\"\n                entity=\"state_machine_state\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialRefund.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialRefund.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingPartialRefund.helpText')\"\n                :criteria=\"getPaymentStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_state_mapping_content_option_cancel %}\n            <sw-entity-single-select\n                v-model:value=\"config.paymentStateMappingCancel\"\n                class=\"swag-amazon-pay-configuration-cancel\"\n                entity=\"state_machine_state\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCancel.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCancel.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.paymentStateMappingCancel.helpText')\"\n                :criteria=\"getPaymentStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n                {% endblock %}\n        </mt-card>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_advanced %}\n        <mt-card\n            v-if=\"!showLoader\"\n            class=\"swag-amazon-pay-configuration\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.advanced')\"\n        >\n            {% block swag_amazon_pay_configuration_card_advanced_content %}\n                    {% block swag_amazon_pay_configuration_card_advanced_content_option_auth_mode %}\n            <sw-single-select\n                v-model:value=\"config.authMode\"\n                required\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.authMode.label')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.authMode.helpText')\"\n                :options=\"getAuthModeOptions\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_advanced_content_option_charge_mode %}\n            <sw-single-select\n                v-model:value=\"config.chargeMode\"\n                required\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.helpText')\"\n                :options=\"getChargeModeOptions\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_advanced_content_option_charge_trigger_state %}\n            <div\n                v-if=\"isChargeOnShipping\"\n                class=\"sw-field--margin-top\"\n            >\n                <sw-entity-single-select\n                    v-model:value=\"config.orderChargeTriggerState\"\n                    entity=\"state_machine_state\"\n                    required\n                    :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderChargeTriggerState.label')\"\n                    :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderChargeTriggerState.placeholder')\"\n                    :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderChargeTriggerState.helpText')\"\n                    :criteria=\"getOrderStateCriteria\"\n                    :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                >\n                            </sw-entity-single-select>\n            </div>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_advanced_content_option_refund_trigger_state %}\n            <sw-entity-single-select\n                v-model:value=\"config.orderRefundTriggerState\"\n                entity=\"state_machine_state\"\n                :reset-option=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.resetOption')\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.label')\"\n                :placeholder=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.placeholder')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.orderRefundTriggerState.helpText')\"\n                :criteria=\"getOrderStateCriteria\"\n                :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n            >\n                        </sw-entity-single-select>\n            {% endblock %}\n\n                    {% block swag_amazon_pay_configuration_card_advanced_content_exclusions %}\n                        {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_products %}\n            <sw-entity-multi-id-select\n                v-model:value=\"config.excludedProductIds\"\n                :disabled=\"!acl.can('swag_amazonpay.editor')\"\n                :repository=\"productRepository\"\n                :criteria=\"excludedProductCriteria\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductIds.label')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductIds.helpText')\"\n            >\n                {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_products_selection_label_property %}\n                <template #selection-label-property=\"{ item }\">\n                    <sw-product-variant-info :variations=\"item.variation\">\n                        {{ item.translated.name || item.name }}\n                    </sw-product-variant-info>\n                </template>\n                {% endblock %}\n\n                                {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_products_result_label_property %}\n                <template\n                    #result-label-property=\"{ item, searchTerm, highlightSearchTerm }\"\n                >\n                    <sw-product-variant-info :variations=\"item.variation\">\n                        {{ item.translated.name || item.name }}\n                    </sw-product-variant-info>\n                </template>\n                {% endblock %}\n            </sw-entity-multi-id-select>\n            {% endblock %}\n\n                        {% block swag_amazon_pay_configuration_card_advanced_content_exclusions_product_streams %}\n            <sw-entity-multi-id-select\n                v-model:value=\"config.excludedProductStreamIds\"\n                :disabled=\"!acl.can('swag_amazonpay.editor')\"\n                :repository=\"productStreamRepository\"\n                :label=\"$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductStreamIds.label')\"\n                :helpText=\"$tc('swag-amazon-pay-configuration.configForm.fields.excludedProductStreamIds.helpText')\"\n            >\n                            </sw-entity-multi-id-select>\n            {% endblock %}\n                    {% endblock %}\n\n                {% endblock %}\n        </mt-card>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_logging %}\n        <mt-card\n            v-if=\"!showLoader\"\n            class=\"swag-amazon-pay-configuration\"\n            :title=\"$tc('swag-amazon-pay-configuration.configForm.cards.logHandling')\"\n        >\n            {% block swag_amazon_pay_configuration_card_logging_content_mode %}\n            <div class=\"swag-amazon-pay-configuration-text\">\n                {{ $tc('swag-amazon-pay-configuration.configForm.loggingExplanation') }}\n                <span class=\"headline headline-s\">\n                    {{ $tc('swag-amazon-pay-configuration.configForm.loggingHeadline') }}\n                </span>\n            </div>\n            <div class=\"swag-amazon-pay-configuration-radio-help-text-columns\">\n                <div class=\"column-left\">\n                    {% block swag_amazon_pay_configuration_card_logging_content_option_logging_mode %}\n                    <sw-radio-field\n                        v-model:value=\"config.loggingMode\"\n                        :options=\"getLoggingOptions\"\n                        :disabled=\"isInherited || !acl.can('swag_amazonpay.editor')\"\n                    >\n                                </sw-radio-field>\n                    {% endblock %}\n                </div>\n                <div class=\"column-right\">\n                    <sw-help-text\n                        class=\"sw-field__help-text\"\n                        :text=\"$tc('swag-amazon-pay-configuration.configForm.loggingBasicHelp')\"\n                    ></sw-help-text>\n                    <sw-help-text\n                        class=\"sw-field__help-text\"\n                        :text=\"$tc('swag-amazon-pay-configuration.configForm.loggingAdvancedHelp')\"\n                    ></sw-help-text>\n                </div>\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_configuration_card_logging_toolbar %}\n            <template #toolbar>\n                <swag-amazon-pay-configuration-log-download :availableLogFiles=\"availableLogFiles\">\n                        </swag-amazon-pay-configuration-log-download>\n            </template>\n            {% endblock %}\n        </mt-card>\n        {% endblock %}\n    </div>\n{% endblock %}","import template from './swag-amazon-pay-configuration.html.twig';\nimport './swag-amazon-pay-configuration.scss';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-amazon-pay-configuration', {\n\n    template,\n\n    inject: [\n        'SwagAmazonPayConfigService',\n        'systemConfigApiService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        configDomain: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        parentLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            salesChannelId: null,\n            isTestSuccessful: false,\n            isTesting: false,\n            showInputKeyModal: false,\n            ipnUrl: 'https://example.com/',\n            ipnUrlLoaded: false,\n            availableLogFiles: [],\n            fallbackConfig: null,\n            isLoading: false,\n            settingDefaultSalesChannelLoading: false,\n\n            // @see src/Components/Config/ConfigServiceInterface.php\n            defaultConfig: {\n                merchantId: null,\n                publicKeyId: null,\n                privateKey: null,\n                clientId: null,\n                sandbox: false,\n                hideOneClickCheckoutButtons: false,\n                displayButtonOnProductPage: true,\n                displayButtonOnListingPage: false,\n                displayButtonOnCheckoutRegisterPage: true,\n                paymentStateMappingCharge: null,\n                paymentStateMappingPartialCharge: null,\n                paymentStateMappingRefund: null,\n                paymentStateMappingPartialRefund: null,\n                paymentStateMappingCancel: null,\n                paymentStateMappingAuthorize: null,\n                authMode: 'immediately',\n                chargeMode: 'direct',\n                orderChargeTriggerState: null,\n                orderRefundTriggerState: null,\n                excludedItems: null,\n                sendErrorMail: null,\n                loggingMode: 'basic',\n                ledgerCurrency: 'EUR',\n                softDescriptor: null,\n                displayLoginButtonOnRegistrationPage: true,\n                inheritFromDefault: false,\n                buttonColor: 'Gold',\n                excludedProductIds: [],\n                excludedProductStreamIds: [],\n            },\n            config: {},\n            configBeforeInheritanceSwitch: null,\n        };\n    },\n\n    computed: {\n        getRelevantConfigSalesChannelId() {\n            if (this.config.inheritFromDefault === true) {\n                return null;\n            }\n\n            return this.salesChannelId;\n        },\n\n        isChargeOnShipping() {\n            const chargeMode = this.config.chargeMode;\n\n            return chargeMode === 'shipped';\n        },\n\n        isInheritanceSwitchVisible() {\n            return !!(!this.isLoading && this.salesChannelId);\n        },\n\n        getLedgerCurrencyOptions() {\n            return [\n                {\n                    value: 'EUR',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.options.EUR'),\n                },\n                {\n                    value: 'GBP',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.options.GBP'),\n                },\n                {\n                    value: 'USD',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.ledgerCurrency.options.USD'),\n                },\n            ];\n        },\n\n        getAuthModeOptions() {\n            return [\n                {\n                    value: 'immediately',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.authMode.options.immediately'),\n                },\n                {\n                    value: 'canHandlePending',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.authMode.options.canHandlePending'),\n                },\n            ];\n        },\n\n        getChargeModeOptions() {\n            return [\n                {\n                    value: 'direct',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.options.direct'),\n                },\n                {\n                    value: 'shipped',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.options.shipped'),\n                },\n                {\n                    value: 'manually',\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.chargeMode.options.manually'),\n                },\n            ];\n        },\n\n        getLoggingOptions() {\n            return [\n                {\n                    value: 'basic',\n                    name: this.$tc('swag-amazon-pay-configuration.configForm.fields.loggingMode.options.basic'),\n                },\n                {\n                    value: 'advanced',\n                    name: this.$tc('swag-amazon-pay-configuration.configForm.fields.loggingMode.options.advanced'),\n                },\n            ];\n        },\n\n        isInherited() {\n            if (!this.salesChannelId) {\n                return false;\n            }\n\n            return this.config.inheritFromDefault;\n        },\n\n        /**\n         *\n         * @returns {Object.Criteria}\n         */\n        getOrderStateCriteria() {\n            const criteria = new Criteria(1, 100);\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_state.stateMachine.technicalName',\n                    ['order.state'],\n                ),\n            );\n\n            return criteria;\n        },\n\n        /**\n         *\n         * @returns {Object.Criteria}\n         */\n        getPaymentStateCriteria() {\n            const criteria = new Criteria(1, 100);\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_state.stateMachine.technicalName',\n                    ['order_transaction.state'],\n                ),\n            );\n\n            return criteria;\n        },\n\n        showLoader() {\n            return this.parentLoading || this.isLoading;\n        },\n\n        buttonColorOptions() {\n            return [\n                {\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.gold'),\n                    value: 'Gold',\n                },\n                {\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.lightGray'),\n                    value: 'LightGray',\n                },\n                {\n                    label: this.$tc('swag-amazon-pay-configuration.configForm.fields.buttonColors.darkGray'),\n                    value: 'DarkGray',\n                },\n            ];\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productStreamRepository() {\n            return this.repositoryFactory.create('product_stream');\n        },\n\n        excludedProductCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n    },\n\n    watch: {\n        config() {\n            this.$emit('change-config', this.config, this.salesChannelId);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadConfig();\n            this.getIpnUrl();\n            this.getLogFiles();\n        },\n\n        /**\n         * Loading configuration elements, remove domain and arrange them in a global config array\n         */\n        loadConfig() {\n            const result = {};\n\n            this.isLoading = true;\n\n            this.systemConfigApiService.getValues(this.configDomain, this.salesChannelId)\n                .then((config) => {\n                    // Remove domain and config prefix to get variable names on root level\n                    Object.keys(config).forEach((key) => {\n                        const configActualKey = key.replace(`${this.configDomain}.`, '');\n\n                        result[configActualKey] = config[key];\n                    });\n\n                    // No config saved? Write default\n                    if (Object.keys(result).length < 1) {\n                        this.config = { ...this.defaultConfig };\n\n                        return;\n                    }\n\n                    // If a new configuration key is missing, for example due to a plugin update add defaultConfig value\n                    Object.keys(this.defaultConfig).forEach((key) => {\n                        if (Shopware.Utils.object.hasOwnProperty(result, key)) {\n                            return;\n                        }\n\n                        result[key] = this.defaultConfig[key];\n                    });\n\n                    if (!this.salesChannelId) {\n                        this.config = result;\n                        this.fallbackConfig = result;\n\n                        return;\n                    }\n\n                    if (result.inheritFromDefault) {\n                        this.config = this.fallbackConfig;\n                        this.config.inheritFromDefault = true;\n                        this.configBeforeInheritanceSwitch = result;\n\n                        return;\n                    }\n\n                    this.config = result;\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        /**\n         * @returns {string}\n         */\n        getPrivateKeyPlaceholder() {\n            if (this.config.privateKey) {\n                return 'XXXXXXXXXXX';\n            }\n\n            return this.$tc('swag-amazon-pay-configuration.configForm.privateKeyEmpty');\n        },\n\n        /**\n         * Request and set IPN url\n         *\n         * @returns void\n         */\n        getIpnUrl() {\n            this.SwagAmazonPayConfigService.getIpnUrl().then(response => {\n                this.ipnUrl = response.url;\n                this.ipnUrlLoaded = true;\n            });\n        },\n\n        getLogFiles() {\n            this.SwagAmazonPayConfigService.getLogFiles().then(response => {\n                Object.keys(response).forEach(item => this.addLogFile(response, item));\n            });\n        },\n\n        addLogFile(response, item) {\n            this.availableLogFiles.push({ fileName: response[item] });\n        },\n\n        onTest() {\n            this.isTestSuccessful = false;\n            this.isTesting = true;\n\n            const credentials = {\n                merchantId: this.config.merchantId,\n                publicKeyId: this.config.publicKeyId,\n                privateKey: this.config.privateKey,\n                ledgerCurrency: this.config.ledgerCurrency,\n                clientId: this.config.clientId,\n                sandbox: this.config.sandbox,\n                salesChannel: this.salesChannelId,\n            };\n\n            this.SwagAmazonPayConfigService.validateCredentials(credentials)\n                .then(response => {\n                    if (response.success) {\n                        this.createNotificationSuccess({\n                            title: this.$tc('swag-amazon-pay-configuration.notification.inspectConnectionTitle'),\n                            message: this.$tc(response.message),\n                        });\n\n                        this.isTestSuccessful = true;\n\n                        setTimeout(this.resetTestStatus, 2000);\n                    } else {\n                        this.createNotificationError({\n                            title: this.$tc('swag-amazon-pay-configuration.notification.inspectConnectionTitle'),\n                            message: this.$tc(response.message) + response.exceptionMessage,\n                        });\n                    }\n                }).catch(() => {\n                    this.createNotificationError({\n                        title: this.$tc('swag-amazon-pay-configuration.notification.inspectConnectionTitle'),\n                        message: this.$tc('swag-amazon-pay-configuration.exception.genericError'),\n                    });\n                }).finally(() => {\n                    this.isTesting = false;\n                });\n        },\n\n        onSwitchInheritance(useInheritance) {\n            if (useInheritance) {\n                // Create a working copy of the current form to be able to restore it after switching back to no inheritance\n                this.configBeforeInheritanceSwitch = { ...this.config };\n                this.configBeforeInheritanceSwitch.inheritFromDefault = false;\n\n                this.config = this.fallbackConfig;\n                this.config.inheritFromDefault = true;\n            } else {\n                this.config = { ...this.configBeforeInheritanceSwitch };\n                this.config.inheritFromDefault = false;\n            }\n        },\n\n        displayInputKeyModal() {\n            this.showInputKeyModal = true;\n        },\n\n        onUpdatePrivateKey(value) {\n            this.config.privateKey = value;\n            this.showInputKeyModal = false;\n        },\n\n        resetTestStatus() {\n            this.isTestSuccessful = false;\n        },\n\n        onCloseModal() {\n            this.showInputKeyModal = false;\n        },\n\n        onSalesChannelChanged(salesChannelId) {\n            this.salesChannelId = salesChannelId;\n            this.loadConfig();\n        },\n\n        onSetAmazonPayAsDefaultPaymentMethod() {\n            this.settingDefaultSalesChannelLoading = true;\n\n            this.SwagAmazonPayConfigService.salesChannelDefault(this.salesChannelId).then(() => {\n                window.setTimeout(() => {\n                    this.settingDefaultSalesChannelLoading = false;\n                }, 250);\n            });\n        },\n    },\n});\n","{% block swag_amazon_pay_import_config_modal %}\n    <sw-modal\n        :title=\"$tc('swag-amazon-pay-configuration.importModal.title')\"\n        @modal-close=\"onCancel\"\n    >\n        {% block swag_amazon_pay_import_config_modal_content %}\n        <sw-container gap=\"0px 10px\">\n            {% block swag_amazon_pay_import_config_modal_content_warning %}\n            <mt-banner\n                variant=\"info\"\n                :title=\"$tc('swag-amazon-pay-configuration.importModal.warning.title')\"\n                :showIcon=\"true\"\n                :closable=\"false\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.importModal.warning.content') }}\n            </mt-banner>\n            {% endblock %}\n\n            {% block swag_amazon_pay_import_config_modal_content_version_missmatch_notification %}\n            <sw-modal\n                v-if=\"versions\"\n                :title=\"$tc('swag-amazon-pay-configuration.importModal.warning.title')\"\n                @modal-close=\"onCancelNotification\"\n            >\n                <mt-banner\n                    variant=\"attention\"\n                    :showIcon=\"true\"\n                    :closable=\"false\"\n                >\n                    <p>\n                        {{ $tc('swag-amazon-pay-configuration.importModal.versionMismatch.info') }}\n                    </p>\n                </mt-banner>\n                <p\n                    v-html=\"$tc('swag-amazon-pay-configuration.importModal.versionMismatch.current', 0, {\n                            shopwareVersion: versions.current.shopware,\n                            pluginVersion: versions.current.plugin\n                        })\"\n                >\n                    </p>\n                <p\n                    v-html=\"$tc('swag-amazon-pay-configuration.importModal.versionMismatch.export', 0, {\n                            shopwareVersion: versions.state.shopware,\n                            pluginVersion: versions.state.plugin\n                        })\"\n                >\n                    </p>\n                {% block swag_amazon_pay_import_config_modal_content_version_missmatch_notification_footer %}\n                <template #modal-footer>\n                    <mt-button\n                        :disabled=\"false\"\n                        :square=\"false\"\n                        :block=\"false\"\n                        :isLoading=\"false\"\n                        @click=\"onCancelNotification\"\n                        ghost\n                    >\n                        {{ $tc('global.default.cancel') }}\n                    </mt-button>\n                    <mt-button\n                        :disabled=\"false\"\n                        variant=\"critical\"\n                        :square=\"false\"\n                        :block=\"false\"\n                        :isLoading=\"false\"\n                        @click=\"onSubmit(true)\"\n                    >\n                        {{ $tc('swag-amazon-pay-configuration.importModal.versionMismatch.proceed') }}\n                    </mt-button>\n                </template>\n                {% endblock %}\n            </sw-modal>\n            {% endblock %}\n\n            {% block swag_amazon_pay_import_config_modal_content_file_upload %}\n            <sw-file-input\n                v-model:value=\"selectedFile\"\n                :label=\"$tc('swag-amazon-pay-configuration.importModal.infoText')\"\n                :allowedMimeTypes=\"['application/json']\"\n            >\n                </sw-file-input>\n            {% endblock %}\n        </sw-container>\n        {% endblock %}\n\n    {% block swag_amazon_pay_import_config_modal_actions %}\n        <template #modal-footer>\n            {% block swag_amazon_pay_import_config_modal_actions_cancel %}\n            <mt-button\n                size=\"small\"\n                @click=\"onCancel\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </mt-button>\n            {% endblock %}\n\n            {% block swag_amazon_pay_import_config_modal_actions_import %}\n            <mt-button\n                variant=\"primary\"\n                size=\"small\"\n                :disabled=\"!selectedFile\"\n                :isLoading=\"isLoading\"\n                @click=\"onSubmit(false)\"\n            >\n                {{ $tc('global.default.apply') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import template from './swag-amazon-pay-configuration-upload-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-amazon-pay-configuration-upload-modal', {\n    template,\n\n    inject: [\n        'SwagAmazonPayConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            selectedFile: null,\n            versions: null,\n        };\n    },\n\n    methods: {\n        onSubmit(ignoreVersionMismatch = false) {\n            this.versions = null;\n\n            if (!this.selectedFile) {\n                this.createNotificationError({\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: this.$tc('swag-amazon-pay-configuration.importModal.notification.noFileSelected'),\n                });\n\n                return;\n            }\n\n            this.isLoading = true;\n\n            this.SwagAmazonPayConfigService.importConfig(this.selectedFile, ignoreVersionMismatch).then((response) => {\n                this.isLoading = false;\n\n                if ('current' in response && 'state' in response) {\n                    this.versions = response;\n                    return;\n                }\n\n                this.createNotificationSuccess({\n                    title: this.$tc('global.default.success'),\n                    message: this.$tc('swag-amazon-pay-configuration.importModal.notification.success'),\n                });\n\n                setTimeout(() => window.location.reload(), 1000);\n            }).catch(() => {\n                this.isLoading = false;\n\n                this.createNotificationError({\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: this.$tc('swag-amazon-pay-configuration.importModal.notification.error'),\n                });\n            });\n        },\n\n        /**\n         * Called when the user clicks the close or cancel button of the modal.\n         */\n        onCancel() {\n            this.$emit('modal-close');\n        },\n\n        onCancelNotification() {\n            this.versions = null;\n        },\n    },\n});\n","{% block swag_amazon_pay_configuration_card_logging_content_download %}\n    <sw-container>\n        {% block swag_amazon_pay_configuration_card_logging_content_download_available_logfiles %}\n        <sw-multi-select\n            v-model:value=\"selectedLogFiles\"\n            valueProperty=\"fileName\"\n            labelProperty=\"fileName\"\n            :label=\"$tc('swag-amazon-pay-configuration.logDownload.selectLabel')\"\n            :options=\"availableLogFiles\"\n            :value=\"selectedLogFiles\"\n            :disabled=\"isPreparingArchive\"\n            @change=\"onChangeFileSelection\"\n        >\n            </sw-multi-select>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configuration_card_logging_content_download_button %}\n        <div class=\"column-left\">\n            <mt-button\n                v-if=\"selectedLogFiles\"\n                :isLoading=\"isPreparingArchive\"\n                :disabled=\"selectedLogFiles.length < 1\"\n                @click=\"onDownloadLogFile\"\n            >\n                {{ $tc('swag-amazon-pay-configuration.logDownload.buttonDownload') }}\n            </mt-button>\n        </div>\n        {% endblock %}\n    </sw-container>\n{% endblock %}","import template from './swag-amazon-pay-configuration-log-download.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-amazon-pay-configuration-log-download', {\n    template,\n\n    inject: [\n        'SwagAmazonPayConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        availableLogFiles: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            selectedLogFiles: [],\n            isPreparingArchive: false,\n            downloadPath: null,\n        };\n    },\n\n    methods: {\n        onDownloadLogFile() {\n            if (!this.selectedLogFiles) {\n                return;\n            }\n\n            if (this.downloadPath) {\n                this.downloadFile(this.downloadPath, Shopware.Context.api);\n\n                return;\n            }\n\n            this.isPreparingArchive = true;\n            this.SwagAmazonPayConfigService.generateLogArchive(this.selectedLogFiles).then((downloadPath) => {\n                this.downloadFile(downloadPath, Shopware.Context.api);\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('global.default.error'),\n                    message: this.$tc('swag-amazon-pay-configuration.exception.genericError'),\n                });\n            }).finally(() => {\n                this.isPreparingArchive = false;\n            });\n        },\n\n        downloadFile(downloadPath) {\n            this.downloadPath = downloadPath;\n\n            this.SwagAmazonPayConfigService.downloadLogArchive(downloadPath).then((fileData) => {\n                const link = document.createElement('a');\n\n                link.setAttribute('download', 'swag-amazon-pay-logs.zip');\n                link.href = window.URL.createObjectURL(new Blob([fileData]));\n\n                document.body.appendChild(link);\n\n                link.click();\n\n                document.body.removeChild(link);\n            });\n        },\n\n        onChangeFileSelection() {\n            this.downloadPath = null;\n        },\n    },\n});\n","{% block swag_amazon_pay_configiguration_component_insecure_domain_notification %}\n    <div>\n        {% block swag_amazon_pay_configiguration_component_insecure_domain_notification_info %}\n        <mt-banner\n            v-if=\"!salesChannelId\"\n            variant=\"info\"\n            :title=\"$tc('global.default.info')\"\n            :showIcon=\"true\"\n            :closable=\"false\"\n        >\n            {{ $tc('swag-amazon-pay-configuration.insecureDomainNotification.general') }}\n        </mt-banner>\n        {% endblock %}\n\n        {% block swag_amazon_pay_configiguration_component_insecure_domain_notification_warning %}\n        <mt-banner\n            v-if=\"hasInsecureDomains\"\n            variant=\"attention\"\n            :title=\"$tc('global.default.info')\"\n            :showIcon=\"true\"\n            :closable=\"false\"\n        >\n            <div class=\"swag-amazon-pay-configuration-text\">\n                {{ $tc('swag-amazon-pay-configuration.insecureDomainNotification.salesChannel') }}\n                {% block swag_amazon_pay_configiguration_component_insecure_domain_notification_warning_domains %}\n                <ul>\n                    <li v-for=\"item in insecureDomains[salesChannelId]\">\n                                {{ item }}\n                            </li>\n                </ul>\n                {% endblock %}\n            </div>\n        </mt-banner>\n        {% endblock %}\n    </div>\n{% endblock %}","import template from './swag-amazon-pay-insecure-domain-notification.html.twig';\n\nconst { Component, Mixin } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('swag-amazon-pay-insecure-domain-notification', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        salesChannelId: {\n            required: false,\n            type: String,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            insecureDomains: [],\n        };\n    },\n\n    computed: {\n        salesChannelDomainRepository() {\n            return this.repositoryFactory.create('sales_channel_domain');\n        },\n\n        hasInsecureDomains() {\n            if (!this.salesChannelId) {\n                return false;\n            }\n\n            if (!(this.salesChannelId in this.insecureDomains)) {\n                return false;\n            }\n\n            return true;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadInsecureDomains();\n        },\n\n        loadInsecureDomains() {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addFilter(Criteria.multi(\n                'AND',\n                [\n                    Criteria.contains('url', 'http://'),\n                ],\n            ));\n\n            return this.salesChannelDomainRepository\n                .search(criteria, Shopware.Context.api)\n                .then((result) => {\n                    result.forEach((domain) => {\n                        const key = domain.salesChannelId;\n                        const url = domain.url;\n\n                        if (!(key in this.insecureDomains)) {\n                            this.insecureDomains[key] = [];\n                        }\n\n                        this.insecureDomains[key].push(url);\n                    });\n                });\n        },\n    },\n});\n","{% block swag_amazon_pay_settings_icon %}\n    <div class=\"swag-amazon-pay-settings-icon\">\n        <img\n            class=\"sw-settings-index__amazon-pay-icon\"\n            :src=\"assetFilter('swagamazonpay/static/img/plugin.svg')\"\n        />\n    </div>\n{% endblock %}","import template from './swag-amazon-pay-settings-icon.html.twig';\nimport './swag-amazon-pay-settings-icon.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-amazon-pay-settings-icon', {\n    template,\n    computed:{\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    }\n});\n","import './acl';\nimport './page/swag-amazon-pay-settings';\nimport './component/swag-amazon-pay-configuration-input-key-modal';\nimport './component/swag-amazon-pay-configuration';\nimport './component/swag-amazon-pay-configuration-upload-modal';\nimport './component/swag-amazon-pay-configuration-log-download';\nimport './component/swag-amazon-pay-insecure-domain-notification';\nimport './component/swag-amazon-pay-settings-icon';\n\nconst {Module} = Shopware;\n\nModule.register('swag-amazon-pay-configuration', {\n    type: 'plugin',\n    name: 'SwagAmazonPayConfiguration',\n    title: 'swag-amazon-pay-configuration.module.title',\n    description: 'swag-amazon-pay-configuration.module.description',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    routes: {\n        config: {\n            component: 'swag-amazon-pay-settings',\n            path: 'config',\n            meta: {\n                parentPath: 'sw.extension.my-extensions',\n                privilege: 'swag_amazonpay.viewer',\n            },\n        },\n    },\n    extensionEntryRoute:{\n        extensionName: 'SwagAmazonPay',\n        route: 'swag.amazon.pay.configuration.config',\n    },\n    settingsItem: {\n        group: 'plugins',\n        to: 'swag.amazon.pay.configuration.config',\n        label: 'swag-amazon-pay-configuration.module.title',\n        iconComponent: 'swag-amazon-pay-settings-icon',\n        backgroundEnabled: true,\n        privilege: 'swag_amazonpay.viewer',\n    },\n});\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass SwagAmazonPayConfigService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'swag_amazon_pay_configuration') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * @return {Promise<AxiosResponse<T>>}\n     */\n    getIpnUrl() {\n        const apiRoute = `_action/${this.getApiBasePath()}/get-ipn-url`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                null,\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @return {Promise<AxiosResponse<T>>}\n     */\n    validateCredentials(credentials) {\n        const apiRoute = `_action/${this.getApiBasePath()}/inspect-connection`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                credentials,\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @return {Promise<AxiosResponse<T>>}\n     */\n    generateRsaKeys() {\n        const apiRoute = `_action/${this.getApiBasePath()}/generate-keypair`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                null,\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @param {string} content\n     * @param {string} merchantId\n     */\n    sendMail(content, merchantId) {\n        const apiRoute = `_action/${this.getApiBasePath()}/send-activation-mail`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    content: content,\n                    merchantId: merchantId,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @return {Promise<AxiosResponse<T>>}\n     */\n    exportConfig() {\n        const apiRoute = `_action/${this.getApiBasePath()}/export-config`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                null,\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @param {File} file\n     * @return {Promise<AxiosResponse<T>>}\n     */\n    importConfig(file, ignoreVersionMismatch = false) {\n        const apiRoute = `_action/${this.getApiBasePath()}/import-config/${ignoreVersionMismatch}`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                file,\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getLogFiles() {\n        const apiRoute = `_action/${this.getApiBasePath()}/log-files`;\n\n        return this.httpClient\n            .get(\n                apiRoute,\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    generateLogArchive(files) {\n        const apiRoute = `_action/${this.getApiBasePath()}/generate-log-archive`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    files: files,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    downloadLogArchive(downloadPath) {\n        const url = `/_action/swag_amazon_pay_configuration/download-log-archive?path=${downloadPath}`;\n\n        return this.httpClient\n            .get(\n                url,\n                {\n                    responseType: 'blob',\n                    headers: this.getBasicHeaders(),\n                },\n            ).then((response) => {\n                return response.data;\n            });\n    }\n\n    salesChannelDefault(salesChannelId = null) {\n        const apiRoute = `_action/${this.getApiBasePath()}/saleschannel-default`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    salesChannelId,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('SwagAmazonPayConfigService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new SwagAmazonPayConfigService(initContainer.httpClient, container.loginService);\n});\n","{% block sw_order_detail_content_tabs_general %}\n    {% parent() %}\n\n    {% block swag_amazon_pay_order_payment_tab %}\n        <template v-if=\"!isLoadingAmazonTransactions && amazonPayTransactions\">\n            <sw-tabs-item\n                v-for=\"amazonTransaction in amazonPayTransactions\"\n                v-bind:key=\"amazonTransaction.id\"\n                :route=\"getAmazonPayDetailsRoute(amazonTransaction.id)\"\n                :title=\"$tc('swag-amazon-pay-order.general.description')\"\n            >\n                {{ $tc('swag-amazon-pay-order.general.title') }}\n            </sw-tabs-item>\n        </template>\n    {% endblock %}\n{% endblock %}\n{% block sw_order_detail_content_view %}\n    <!-- <sw-container v-if=\"hasIncompleteTransaction\" columns=\"1fr\" class=\"swag-amazon-pay-order-notification-container\">\n        <sw-alert variant=\"warning\" appearance=\"default\" :showIcon=\"true\" :closable=\"false\">\n            {{ $tc('swag-amazon-pay-order.notification.invalidTransaction') }}\n        </sw-alert>\n    </sw-container> -->\n    {% parent() %}\n{% endblock %}","import template from './sw-order.html.twig';\nimport './sw-order.scss';\n\nconst {Component, Context} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.override('sw-order-detail', {\n    template,\n\n    data() {\n        return {\n            isLoadingAmazonTransactions: true,\n            amazonPayTransactions: [],\n            hasIncompleteTransaction: false,\n        };\n    },\n\n    computed: {\n        showTabs() {\n            return true;\n        },\n    },\n\n    watch: {\n        orderId: {\n            deep: true,\n            handler() {\n                this.loadAmazonPayTransactions(this.orderId);\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        loadAmazonPayTransactions(orderId) {\n            if (!orderId) {\n                this.isLoadingAmazonPayTransactions = false;\n\n                return;\n            }\n            this.amazonPayTransactions = [];\n            this.isLoadingAmazonPayTransactions = true;\n\n            const orderRepository = this.repositoryFactory.create('order');\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.addAssociation('transactions');\n\n            orderCriteria.addFilter(Criteria.equals('transactions.paymentMethodId', 'f7b88fc9c0104702a96f664dabfe2656'));\n            orderCriteria.addFilter(Criteria.equals('id', orderId));\n\n            orderRepository.search(orderCriteria, Context.api).then((searchResult) => {\n                const order = searchResult.first();\n\n                if (!order) {\n                    return;\n                }\n\n                if (!this.identifier) {\n                    this.identifier = order.orderNumber;\n                }\n\n                order.transactions.forEach((orderTransaction) => {\n                    if (orderTransaction.customFields && orderTransaction.customFields.swag_amazon_pay_charge_permission_id) {\n                        this.amazonPayTransactions.push(orderTransaction);\n                        return;\n                    }\n\n                    this.hasIncompleteTransaction = true;\n                });\n            }).finally(() => {\n                this.isLoadingAmazonTransactions = false;\n            });\n        },\n\n        getAmazonPayDetailsRoute(transactionId) {\n            return {\n                name: 'swag-amazon-pay-order.payment.detail',\n                params: {\n                    id: this.$route.params.id,\n                    transactionId: transactionId,\n                },\n            };\n        },\n    },\n});\n","{% block swag_amazon_pay_order_payment_page %}\n    <div class=\"swag-amazon-pay-order-page\">\n        {% block swag_amazon_pay_order_payment_page_warning %}\n        <sw-container\n            columns=\"1fr\"\n            class=\"swag-amazon-pay-order-notification-container\"\n        >\n            <mt-banner\n                v-if=\"isPartiallyCharged\"\n                variant=\"attention\"\n                appearance=\"default\"\n                :showIcon=\"true\"\n                :closable=\"false\"\n            >\n                {{ $tc('swag-amazon-pay-order.notification.isPartialCharged') }}\n                {{ $tc('swag-amazon-pay-order.notification.partialCharge') }}\n            </mt-banner>\n            <mt-banner\n                v-if=\"isInvalidChargePermission\"\n                variant=\"attention\"\n                appearance=\"default\"\n                :showIcon=\"true\"\n                :closable=\"false\"\n            >\n                {{ $tc('swag-amazon-pay-order.notification.invalidChargePermission') }}\n            </mt-banner>\n        </sw-container>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_payment_page_content %}\n        <template v-if=\"!isLoading\">\n            {% block swag_amazon_pay_order_payment_page_content_general_card %}\n            <mt-card\n                rows=\"2\"\n                :title=\"$tc('swag-amazon-pay-order.general.generalCardTitle')\"\n                :isLoading=\"isLoading\"\n            >\n                {% block swag_amazon_pay_order_payment_page_content_general_card_top %}\n                <sw-container\n                    columns=\"1fr 1fr\"\n                    class=\"swag-amazon-pay-order-page__general-content\"\n                >\n                    {% block swag_amazon_pay_order_payment_page_content_general_card_top_buyer_info %}\n                    <swag-amazon-pay-buyer-info\n                        :paymentDetails=\"paymentDetails\"\n                        :order=\"order\"\n                    >\n                                    </swag-amazon-pay-buyer-info>\n                    {% endblock %}\n\n                                {% block swag_amazon_pay_order_payment_page_content_general_card_top_amount_info %}\n                    <swag-amazon-pay-amount-info\n                        :paymentDetails=\"paymentDetails\"\n                        :transaction=\"transaction\"\n                        :refundStatus=\"refundStatus\"\n                        :order=\"order\"\n                        :isInvalidChargePermission=\"isInvalidChargePermission\"\n                    >\n                                    </swag-amazon-pay-amount-info>\n                    {% endblock %}\n\n                                {% block swag_amazon_pay_order_payment_page_content_general_card_top_toolbar %}\n                    <swag-amazon-pay-action-toolbar\n                        :paymentDetails=\"paymentDetails\"\n                        @reload-payment=\"reloadOrderDetails\"\n                        @update-payment-details=\"reloadOrderDetails(true)\"\n                    >\n                                    </swag-amazon-pay-action-toolbar>\n                    {% endblock %}\n                </sw-container>\n                {% endblock %}\n\n                        {% block swag_amazon_pay_order_payment_page_content_general_card_bottom %}\n                <sw-container\n                    columns=\"1fr\"\n                    class=\"sw-card-section sw-card-section--secondary\"\n                >\n                    {% block swag_amazon_pay_order_payment_page_content_general_card_bottom_checkout_info %}\n                    <swag-amazon-pay-checkout-info\n                        :paymentDetails=\"paymentDetails\"\n                        :transaction=\"transaction\"\n                        :order=\"order\"\n                    >\n                                    </swag-amazon-pay-checkout-info>\n                    {% endblock %}\n                </sw-container>\n                {% endblock %}\n            </mt-card>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_payment_page_content_payment_history_card %}\n            <mt-card\n                rows=\"2\"\n                :title=\"$tc('swag-amazon-pay-order.payment-history.cardTitle')\"\n            >\n                {% block swag_amazon_pay_order_payment_page_content_payment_history_card_content %}\n                <template #grid>\n                    <swag-amazon-pay-payment-history\n                        :paymentDetails=\"paymentDetails\"\n                        @reload-payment=\"reloadOrderDetails\"\n                    >\n                                </swag-amazon-pay-payment-history>\n                </template>\n                {% endblock %}\n            </mt-card>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_payment_page_content_loader %}\n        <mt-loader v-if=\"isLoading\"></mt-loader>\n        {% endblock %}\n    </div>\n{% endblock %}","import template from './swag-amazon-pay-order-tab.html.twig';\nimport './swag-amazon-pay-order-tab.scss';\n\nconst {Component, Mixin, Context} = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('swag-amazon-pay-order-tab', {\n    template,\n\n    inject: [\n        'SwagAmazonPayOrderService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            paymentDetails: {\n                chargePermission: {\n                    limits: {\n                        amountLimit: null,\n                    },\n                    presentmentCurrency: 'EUR',\n                    statusDetails: null,\n                },\n                charge: {\n                    captureAmount: null,\n                    refundedAmount: null,\n                    statusDetails: null,\n                },\n            },\n            refundStatus: null,\n            refundPending: false,\n            order: null,\n            isLoading: true,\n            isSuccess: true,\n            transaction: null,\n            refreshHandler: null,\n        };\n    },\n\n    computed: {\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        transactionRepository() {\n            return this.repositoryFactory.create('order_transaction');\n        },\n\n        isInvalidChargePermission() {\n            if (this.isSuccess === true) {\n                return false;\n            }\n\n            if (this.isLoading === false && !this.paymentDetails.chargePermission.reference) {\n                return true;\n            }\n\n            return false;\n        },\n\n        isPartiallyCharged() {\n            if (this.isSuccess !== true) {\n                return false;\n            }\n            return this.paymentDetails.isPartiallyCaptured;\n        },\n    },\n\n    watch: {\n        '$route'() {\n            this.resetDataAttributes();\n            this.createdComponent();\n        },\n    },\n\n    beforeDestroy() {\n        window.clearInterval(this.refreshHandler);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadData();\n        },\n\n        resetDataAttributes() {\n            this.paymentDetails = null;\n            this.isLoading = true;\n            this.isSuccess = false;\n            this.transaction = null;\n        },\n\n        reloadOrderDetails(refreshData = false) {\n            this.isSuccess = true;\n            return this.loadData(refreshData);\n        },\n\n        loadTransactionDetails(refreshData = false) {\n            const transactionId = this.$route.params.transactionId;\n            if(!transactionId) {\n                return Promise.resolve();\n            }\n            const me = this;\n            // It's required to reload the whole transaction to get the new custom field values (e.g. after a refund)\n            return this.loadTransaction(transactionId).then((transaction) => {\n                const chargePermissionId = transaction.customFields.swag_amazon_pay_charge_permission_id;\n\n                if(this.refreshHandler){\n                    window.clearInterval(this.refreshHandler);\n                }\n\n                //this causes the modals to rerender and overwrite custom input in the amount fields (as long as they are not saved by blur/input event)\n                // this.refreshHandler = setInterval(function(){\n                //     me.backgroundLoadPaymentHistory(chargePermissionId);\n                // }, 10000);\n\n                if (!transaction.customFields || !transaction.customFields.swag_amazon_pay_charge_permission_id) {\n                    this.displayErrorMessage();\n                    return Promise.reject();\n                }\n\n\n                this.transaction = transaction;\n\n                return this.loadPaymentDetails(chargePermissionId, refreshData).then((response) => {\n                    this.isLoading = false;\n                    if (!response.chargePermission) {\n                        this.displayErrorMessage();\n                        return Promise.reject();\n                    }\n                    this.paymentDetails = response;\n                    this.isSuccess = true;\n                    return Promise.resolve();\n                });\n            });\n        },\n\n        backgroundLoadPaymentHistory(chargePermissionId){\n            this.loadPaymentDetails(chargePermissionId, false).then((response) => {\n                if (!response.chargePermission) {\n                    return;\n                }\n                this.paymentDetails = response;\n            });\n        },\n\n        loadData(refreshData = false) {\n            if(refreshData) {\n                this.isLoading = true;\n            }\n            const orderId = this.$route.params.id;\n\n            return this.loadOrder(orderId).then((order) => {\n                this.order = order;\n                return this.loadTransactionDetails(refreshData);\n            });\n        },\n\n        loadOrder(orderId) {\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.addAssociation('addresses');\n            orderCriteria.addAssociation('currency');\n            orderCriteria.addAssociation('deliveries');\n            orderCriteria.addAssociation('orderCustomer.salutation');\n\n            return this.orderRepository.get(orderId, Context.api, orderCriteria);\n        },\n\n        loadTransaction(transactionId) {\n            return this.transactionRepository.get(transactionId, Context.api);\n        },\n\n        loadPaymentDetails(chargePermissionId, refreshData = false) {\n            return this.SwagAmazonPayOrderService.fetchPaymentDetails(chargePermissionId, refreshData);\n        },\n\n        displayErrorMessage(apiError) {\n            let errorMessage = this.$tc('swag-amazon-pay-order.general.errors.incompletePaymentProcess');\n            if (apiError && apiError.response && apiError.response.data && apiError.response.data.errors) {\n                errorMessage = apiError.response.data.errors[0].detail;\n            }\n\n            this.createNotificationError({\n                title: this.$tc('global.default.error'),\n                message: errorMessage,\n            });\n\n            this.isSuccess = false;\n            this.isLoading = false;\n        }\n    },\n});\n","{% block swag_amazon_pay_order_component_buyer_info %}\n    <div class=\"swag-amazon-pay-buyer-info__container\">\n        {# Logo #}\n        {% block swag_amazon_pay_order_component_buyer_info_logo %}\n        <div\n            class=\"swag-amazon-pay-buyer-info__icon-container\"\n            align=\"center\"\n        >\n            <img\n                class=\"swag-amazon-pay-buyer-info__amazon-pay-icon\"\n                :src=\"assetFilter('swagamazonpay/static/img/plugin.svg')\"\n            />\n        </div>\n        {% endblock %}\n\n        {# Full name and E-Mail address #}\n        {% block swag_amazon_pay_order_component_buyer_info_name_container %}\n        <div class=\"swag-amazon-pay-buyer-info__name-container\">\n            {% block swag_amazon_pay_order_component_buyer_info_name_container_name %}\n            <div class=\"swag-amazon-pay-buyer-info__full-name\">\n                {{ customerSalutation }}\n                {{ order.orderCustomer.firstName }}\n                {{ order.orderCustomer.lastName }}\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_component_buyer_info_name_container_email %}\n            <div class=\"swag-amazon-pay-buyer-info__email\">\n                {{ order.orderCustomer.email }}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </div>\n{% endblock %}","import template from './swag-amazon-pay-buyer-info.html.twig';\nimport './swag-amazon-pay-buyer-info.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-amazon-pay-buyer-info', {\n    template,\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    computed: {\n        customerSalutation() {\n            const salutationKey = this.order.orderCustomer.salutation.salutationKey;\n\n            return salutationKey === 'not_specified' ? '' : this.order.orderCustomer.salutation.displayName;\n        },\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","{% block swag_amazon_pay_order_component_amount_info %}\n    <sw-container\n        class=\"swag-amazon-pay-amount-info__container\"\n        rows=\"4\"\n        columns=\"1fr\"\n    >\n        {% block swag_amazon_pay_order_component_amount_info_total %}\n        <div\n            class=\"swag-amazon-pay-amount-info__total-amount\"\n            align=\"right\"\n        >\n                {{ totalAmount }}\n            </div>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_component_amount_info_card %}\n\n            {% block swag_amazon_pay_order_component_amount_info_captured %}\n            <div\n                class=\"swag-amazon-pay-amount-info__captured-amount\"\n                align=\"right\"\n            >\n                {% block swag_amazon_pay_order_component_amount_info_captured_amount %}\n                            +\n                {{ chargedAmount }}\n                {% endblock %}\n\n                        {% block swag_amazon_pay_order_component_amount_info_captured_help %}\n                <sw-help-text\n                    class=\"swag-amazon-pay-amount-info__help-icon\"\n                    tooltipPosition=\"top\"\n                    :text=\"$tc('swag-amazon-pay-order.amount-info.chargeTooltip', 0, {\n                                              amount: chargedAmount\n                                          })\"\n                >\n                            </sw-help-text>\n                {% endblock %}\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_component_amount_info_refunded %}\n            <div\n                class=\"swag-amazon-pay-amount-info__refunded-amount\"\n                align=\"right\"\n            >\n                {% block swag_amazon_pay_order_component_amount_info_refund_amount %}\n                            -\n                {{ refundedAmount }}\n                <span v-if=\"hasPendingRefunds\">(-{{ refundPendingAmount }})</span>\n                {% endblock %}\n\n                        {% block swag_amazon_pay_order_component_amount_info_refunded_help %}\n                <sw-help-text\n                    class=\"swag-amazon-pay-amount-info__help-icon\"\n                    tooltipPosition=\"top\"\n                    :text=\"$tc('swag-amazon-pay-order.amount-info.refundTooltip', 0, {\n                                              amount: refundedAmount\n                                          })\"\n                >\n                            </sw-help-text>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_component_amount_info_date %}\n        <div\n            class=\"swag-amazon-pay-amount-info__charge-date\"\n            align=\"right\"\n        >\n            {{ dateFilter(transaction.createdAt) }}\n        </div>\n        {% endblock %}\n    </sw-container>\n{% endblock %}","import template from './swag-amazon-pay-amount-info.html.twig';\nimport './swag-amazon-pay-amount-info.scss';\n\nconst { Component } = Shopware;\nconst { currency } = Shopware.Utils.format;\n\nComponent.register('swag-amazon-pay-amount-info', {\n    template,\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n        transaction: {\n            type: Object,\n            required: true,\n        },\n        order: {\n            type: Object,\n            required: true,\n        },\n        refundStatus: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        isInvalidChargePermission: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    computed: {\n        isLoading() {\n            return !this.paymentDetails.chargePermission.reference;\n        },\n\n        totalAmount() {\n            return currency(\n                this.paymentDetails.chargePermission.amount || this.totalOrderPrice,\n                this.paymentDetails.chargePermission.currency\n            );\n        },\n\n        totalOrderPrice() {\n            return currency(\n                this.order.price.totalPrice,\n                this.order.currency.isoCode\n            );\n        },\n\n        chargedAmount() {\n            return currency(\n                this.paymentDetails.chargePermission.capturedAmount || 0.0,\n                this.paymentDetails.chargePermission.currency\n            );\n        },\n\n        refundedAmount() {\n            return currency(\n                this.paymentDetails.totalRefundedAmount || 0.0,\n                this.paymentDetails.chargePermission.currency\n            );\n        },\n\n        refundPendingAmount() {\n            return currency(\n                this.paymentDetails.totalRefundPendingAmount || 0.0,\n                this.paymentDetails.chargePermission.currency\n            );\n        },\n\n        hasPendingRefunds() {\n            return this.paymentDetails.hasPendingRefunds;\n        },\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n    //\n    // watch: {\n    //     refundPending() {\n    //         this.$emit('refund-pending-change', this.refundPending);\n    //     },\n    // },\n});\n","{% block swag_amazon_pay_order_component_action_toolbar %}\n    <sw-container\n        class=\"swag-amazon-pay-action-toolbar__container\"\n        rows=\"1\"\n        columns=\"1fr 1fr 1fr\"\n        gap=\"10px\"\n    >\n        {% block swag_amazon_pay_order_component_action_toolbar_cancel_button %}\n        <mt-button\n            size=\"small\"\n            variant=\"secondary\"\n            class=\"swag-amazon-pay-action-toolbar__button\"\n            @click=\"updatePaymentDetails\"\n            ghost\n        >\n            {{ $tc('swag-amazon-pay-order.action-toolbar.refresh') }}\n        </mt-button>\n        <mt-button\n            v-if=\"paymentDetails.chargePermission.status === 'Chargeable'\"\n            size=\"small\"\n            variant=\"secondary\"\n            class=\"swag-amazon-pay-action-toolbar__button\"\n            @click=\"showCreateChargeModal\"\n            ghost\n        >\n            {{ $tc('swag-amazon-pay-order.action-toolbar.createCharge') }}\n        </mt-button>\n        <mt-button\n            size=\"small\"\n            class=\"swag-amazon-pay-action-toolbar__button\"\n            :disabled=\"!acl.can('order.editor')\"\n            v-if=\"!disableCancellation\"\n            variant=\"critical\"\n            @click=\"showCancelModal\"\n            ghost\n        >\n            {{ $tc('swag-amazon-pay-order.action-toolbar.cancel') }}\n        </mt-button>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_component_action_toolbar_modals %}\n        <swag-amazon-pay-cancel-modal\n            v-if=\"cancelModalVisible\"\n            :paymentDetails=\"paymentDetails\"\n            @modal-close=\"closeModals\"\n            @reload-payment=\"reloadPaymentDetails\"\n        >\n            </swag-amazon-pay-cancel-modal>\n        <swag-amazon-pay-create-charge-modal\n            v-if=\"createChargeModalVisible\"\n            :paymentDetails=\"paymentDetails\"\n            @modal-close=\"closeModals\"\n            @reload-payment=\"reloadPaymentDetails\"\n        >\n            </swag-amazon-pay-create-charge-modal>\n        {% endblock %}\n    </sw-container>\n{% endblock %}","import template from './swag-amazon-pay-action-toolbar.html.twig';\nimport './swag-amazon-pay-action-toolbar.scss';\n\nconst {Component} = Shopware;\n\nComponent.register('swag-amazon-pay-action-toolbar', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            cancelModalVisible: false,\n            createChargeModalVisible: false,\n        };\n    },\n\n    computed: {\n        disableCancellation() {\n            const chargePermissionStatusDetails = this.paymentDetails.chargePermission.status;\n\n            if (chargePermissionStatusDetails === null) {\n                return true;\n            }\n\n            return chargePermissionStatusDetails === 'Closed';\n        },\n    },\n\n    methods: {\n        showCancelModal() {\n            this.cancelModalVisible = true;\n        },\n        showCreateChargeModal() {\n            this.createChargeModalVisible = true;\n        },\n\n        closeModals() {\n            this.cancelModalVisible = false;\n            this.createChargeModalVisible = false;\n        },\n        updatePaymentDetails() {\n            this.$emit('update-payment-details');\n        },\n        reloadPaymentDetails() {\n            this.closeModals();\n\n            // Wait for the next tick to trigger the reload. Otherwise, the Modal won't be hidden correctly.\n            this.$nextTick().then(() => {\n                this.$emit('reload-payment');\n            });\n        },\n    },\n});\n","{% block swag_amazon_pay_order_component_checkout_info %}\n    <sw-container\n        class=\"swag-amazon-pay-checkout-info__container\"\n        columns=\"1fr 1fr\"\n        rows=\"2\"\n    >\n        {% block swag_amazon_pay_order_component_checkout_info_checkout_id_container %}\n        <div class=\"swag-amazon-pay-checkout-info__checkout-id-container\">\n            {% block swag_amazon_pay_order_component_checkout_info_checkout_id_container_headline %}\n            <div class=\"swag-amazon-pay-checkout-info_header\">\n                {{ $tc('swag-amazon-pay-order.checkout-info.referenceIdHeadline') }}\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_component_checkout_info_checkout_id_container_value %}\n            <div class=\"swag-amazon-pay-checkout-info_label\">\n                {{ transaction.customFields.swag_amazon_pay_charge_permission_id }}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_component_checkout_info_status_container %}\n        <div class=\"swag-amazon-pay-checkout-info__status-container\">\n            {% block swag_amazon_pay_order_component_checkout_info_status_container_headline %}\n            <div class=\"swag-amazon-pay-checkout-info_header\">\n                {{ $tc('swag-amazon-pay-order.checkout-info.statusHeadline') }}\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_component_checkout_info_status_container_value %}\n            <div\n                v-if=\"paymentStatusText\"\n                class=\"swag-amazon-pay-checkout-info_label\"\n            >\n                        {{ paymentStatusText }}\n                    </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n        {#\n        {% block swag_amazon_pay_order_component_checkout_info_billing_container %}\n        <div class=\"swag-amazon-pay-checkout-info__billing-address-container\">\n            {% block swag_amazon_pay_order_component_checkout_info_billing_container_headline %}\n            <div class=\"swag-amazon-pay-checkout-info_header\">\n                {{ $tc('swag-amazon-pay-order.checkout-info.billingAddressHeadline') }}\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_component_checkout_info_billing_container_value %}\n            <sw-address :address=\"billingAddress\">\n                    </sw-address>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_component_checkout_info_shipping_container %}\n        <div class=\"swag-amazon-pay-checkout-info__shipping-address-container\">\n            {% block swag_amazon_pay_order_component_checkout_info_shipping_container_headline %}\n            <div class=\"swag-amazon-pay-checkout-info_header\">\n                {{ $tc('swag-amazon-pay-order.checkout-info.shippingAddressHeadline') }}\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_component_checkout_info_shipping_container_value %}\n            <sw-address :address=\"shippingAddress\">\n                    </sw-address>\n            {% endblock %}\n        </div>\n        {% endblock %}\n        #}\n    </sw-container>\n{% endblock %}","import template from './swag-amazon-pay-checkout-info.html.twig';\nimport './swag-amazon-pay-checkout-info.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-amazon-pay-checkout-info', {\n    template,\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n        transaction: {\n            type: Object,\n            required: true,\n        },\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    computed: {\n        billingAddress() {\n            const billingAddressId = this.order.billingAddressId;\n            return this.order.addresses.get(billingAddressId);\n        },\n\n        shippingAddress() {\n            return this.order.deliveries.last().shippingOrderAddress;\n        },\n\n        paymentStatusText() {\n            return this.paymentDetails.chargePermission.status;\n        },\n    },\n});\n","{% block swag_amazon_pay_order_charge_modal %}\n    <sw-modal\n        :title=\"$tc('swag-amazon-pay-order.charge-modal.title')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block swag_amazon_pay_order_charge_modal_content %}\n        <template #default>\n            {% block swag_amazon_pay_order_charge_modal_content_info_text %}\n            <div class=\"swag-amazon-pay-charge-modal__info-text\">\n                <span>\n                    {{ $tc('swag-amazon-pay-order.charge-modal.infoText') }}\n                </span>\n            </div>\n            {% endblock %}\n\n        {% block swag_amazon_pay_order_charge_modal_content_max_amount %}\n            <div class=\"swag-amazon-pay-charge-modal__info-maximum-amount\">\n                <span>\n                    {{ $tc('swag-amazon-pay-order.charge-modal.maximumAmount', 0, { amount: chargeAmountLimitFormatted }) }}\n                </span>\n            </div>\n            {% endblock %}\n\n        {% block swag_amazon_pay_order_charge_modal_content_fields %}\n            <div class=\"swag-amazon-pay-charge-modal__field-container\">\n                {% block swag_amazon_pay_order_charge_modal_content_fields_amount %}\n                <mt-number-field\n                    v-model=\"chargeAmount\"\n                    {#\n                    The\n                    template\n                    string\n                    is\n                    used\n                    to\n                    convert\n                    the\n                    refund\n                    amount\n                    to\n                    a\n                    string\n                    #}\n                    :placeholder=\"`${chargeAmountLimit}`\"\n                    :label=\"$tc('swag-amazon-pay-order.charge-modal.amountFieldLabel')\"\n                    :min=\"0\"\n                    :max=\"chargeAmountLimit\"\n                >\n                    <template #suffix>\n                        <span class=\"swag-amazon-pay-charge-modal__currency-code\">\n                            {{ paymentDetails.chargePermission.currency }}\n                        </span>\n                    </template>\n                </mt-number-field>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n    {% block swag_amazon_pay_order_charge_modal_actions %}\n        <template #modal-footer>\n            {% block swag_amazon_pay_order_charge_modal_cancel %}\n            <mt-button\n                size=\"small\"\n                @click=\"closeModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </mt-button>\n            {% endblock %}\n\n            {% block swag_amazon_pay_order_charge_modal_confirm %}\n            <mt-button\n                variant=\"primary\"\n                size=\"small\"\n                :isLoading=\"isLoading\"\n                @click=\"onConfirm\"\n            >\n                {{ $tc('swag-amazon-pay-order.charge-modal.buttonConfirm') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import template from './swag-amazon-pay-charge-modal.html.twig';\nimport './swag-amazon-pay-charge-modal.scss';\n\nconst {Component, Mixin} = Shopware;\nconst {currency} = Shopware.Utils.format;\n\nComponent.register('swag-amazon-pay-charge-modal', {\n    template,\n\n    inject: ['SwagAmazonPayOrderService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n        chargeId: {\n            type: String,\n            required: true,\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            chargeAmount: null,\n        };\n    },\n\n    beforeMount() {\n        this.chargeAmount = this.chargeAmountLimit;\n    },\n\n    computed: {\n        chargeAmountLimitFormatted() {\n            return currency(\n                this.chargeAmountLimit,\n                this.paymentDetails.chargePermission.currency\n            );\n        },\n\n        chargeAmountLimit() {\n            const charge = this.getCharge();\n            return charge.amount - charge.capturedAmount;\n        },\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n        getCharge() {\n            return this.paymentDetails.charges[this.chargeId] ? this.paymentDetails.charges[this.chargeId].details : null;\n        },\n\n        onConfirm() {\n            if (!this.chargeAmount\n                 \n                || isNaN(this.chargeAmount)\n                || !Number.isFinite(this.chargeAmount\n                    || this.chargeAmount === 0)\n            ) {\n                this.chargeAmount = this.chargeAmountLimit;\n            }\n\n            const currencyCode = this.paymentDetails.chargePermission.currency;\n            const amountFormatted = currency(this.chargeAmount, currencyCode);\n\n            this.isLoading = true;\n\n            this.SwagAmazonPayOrderService.chargePayment(\n                this.chargeId,\n                this.chargeAmount,\n                currencyCode,\n            ).then((response) => {\n                if (!response.chargeId) {\n                    this.createNotificationError({\n                        title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                        message: response.message,\n                    });\n\n                    this.isLoading = false;\n                } else {\n                    this.createNotificationSuccess({\n                        title: this.$tc('global.default.success'),\n                        message: this.$tc('swag-amazon-pay-order.charge-modal.notification.success', 0, {\n                            amount: amountFormatted,\n                        }),\n                    });\n\n                    this.$emit('reload-payment');\n                }\n            }).catch((response) => {\n                this.createNotificationError({\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: response.message,\n                });\n\n                this.isLoading = false;\n            });\n        },\n    },\n});\n","{% block swag_amazon_pay_order_charge_modal %}\n    <sw-modal\n        :title=\"$tc('swag-amazon-pay-order.create-charge-modal.title')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block swag_amazon_pay_order_charge_modal_content %}\n        <template #default>\n            {% block swag_amazon_pay_order_charge_modal_content_fields %}\n            <div class=\"swag-amazon-pay-create-charge-modal__field-container\">\n                {% block swag_amazon_pay_order_charge_modal_content_fields_amount %}\n                <mt-number-field\n                    v-model=\"chargeAmount\"\n                    :label=\"$tc('swag-amazon-pay-order.create-charge-modal.amountFieldLabel')\"\n                    :min=\"0\"\n                >\n                    <template #suffix>\n                        <span\n                            class=\"swag-amazon-pay-create-charge-modal__currency-code\"\n                        >\n                            {{ paymentDetails.chargePermission.currency }}\n                        </span>\n                    </template>\n                </mt-number-field>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n    {% block swag_amazon_pay_order_charge_modal_actions %}\n        <template #modal-footer>\n            {% block swag_amazon_pay_order_charge_modal_cancel %}\n            <mt-button\n                size=\"small\"\n                @click=\"closeModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </mt-button>\n            {% endblock %}\n\n            {% block swag_amazon_pay_order_charge_modal_confirm %}\n            <mt-button\n                variant=\"primary\"\n                size=\"small\"\n                :isLoading=\"isLoading\"\n                @click=\"onConfirm\"\n            >\n                {{ $tc('swag-amazon-pay-order.create-charge-modal.buttonConfirm') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import template from './swag-amazon-pay-create-charge-modal.html.twig';\nimport './swag-amazon-pay-create-charge-modal.scss';\n\nconst {Component, Mixin} = Shopware;\nconst {currency} = Shopware.Utils.format;\n\nComponent.register('swag-amazon-pay-create-charge-modal', {\n    template,\n\n    inject: ['SwagAmazonPayOrderService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            chargeAmount: null,\n        };\n    },\n\n    beforeMount() {\n        this.chargeAmount = this.chargeAmountLimit;\n    },\n\n    computed: {\n        chargeAmountLimitFormatted() {\n            return currency(\n                this.chargeAmountLimit,\n                this.paymentDetails.chargePermission.currency\n            );\n        },\n\n        chargeAmountLimit() {\n            return this.paymentDetails.chargePermission.amount - this.paymentDetails.totalChargedAmount;\n        },\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        onConfirm() {\n            if (!this.chargeAmount) {\n                this.chargeAmount = this.chargeAmountLimit;\n            }\n            const currencyCode = this.paymentDetails.chargePermission.currency;\n            const amountFormatted = currency(this.chargeAmount, currencyCode);\n\n            this.isLoading = true;\n\n            this.SwagAmazonPayOrderService.createCharge(\n                this.paymentDetails.chargePermission.reference,\n                this.chargeAmount\n            ).then((response) => {\n                if (!response.chargeId) {\n                    this.createNotificationError({\n                        title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                        message: response.message,\n                    });\n                    this.isLoading = false;\n                } else {\n                    this.$emit('reload-payment');\n                    this.createNotificationSuccess({\n                        title: this.$tc('global.default.success'),\n                        message: this.$tc('swag-amazon-pay-order.create-charge-modal.notification.success', 0, {\n                            amount: amountFormatted,\n                        }),\n                    });\n\n                }\n            }).catch((response) => {\n                this.createNotificationError({\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: response.message,\n                });\n            }).finally(() => {\n                this.isLoading = false;\n                this.closeModal();\n            });\n\n        },\n    },\n});\n","{% block swag_amazon_pay_order_refund_modal %}\n    <sw-modal\n        :title=\"$tc('swag-amazon-pay-order.refund-modal.title')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block swag_amazon_pay_order_refund_modal_content %}\n        <template #default>\n            {% block swag_amazon_pay_order_refund_modal_content_info_text %}\n                    {#\n            <div class=\"swag-amazon-pay-refund-modal__info-text\">\n                <span>\n                    {{ $tc('swag-amazon-pay-order.refund-modal.infoText') }}\n                </span>\n            </div>\n            #}\n                {% endblock %}\n\n                {% block swag_amazon_pay_order_refund_modal_content_max_amount %}\n                    {#\n            <div class=\"swag-amazon-pay-refund-modal__info-maximum-amount\">\n                <span>\n                    {{ $tc('swag-amazon-pay-order.refund-modal.maximumAmount', 0, { refundAmountLimit: refundAmountLimitFormatted }) }}\n                </span>\n            </div>\n            #}\n                {% endblock %}\n\n                {% block swag_amazon_pay_order_refund_modal_content_fields %}\n            <div class=\"swag-amazon-pay-refund-modal__field-container\">\n                {% block swag_amazon_pay_order_refund_modal_content_fields_amount %}\n                <mt-number-field\n                    v-model=\"refundAmount\"\n                    {#\n                    The\n                    template\n                    string\n                    is\n                    used\n                    to\n                    convert\n                    the\n                    refund\n                    amount\n                    to\n                    a\n                    string\n                    #}\n                    :placeholder=\"refundAmountDefault\"\n                    :label=\"$tc('swag-amazon-pay-order.refund-modal.amountFieldLabel') + ' ' + $tc('swag-amazon-pay-order.refund-modal.maximumAmount', 0, { refundAmountLimit: refundAmountLimitFormatted })\"\n                    :min=\"0\"\n                    :max=\"refundAmountLimit\"\n                >\n                    <template #suffix>\n                        <span class=\"swag-amazon-pay-refund-modal__currency-code\">\n                            {{ paymentDetails.chargePermission.currency }}\n                        </span>\n                    </template>\n                </mt-number-field>\n                {% endblock %}\n\n                    {% block swag_amazon_pay_order_refund_modal_content_fields_reason %}\n                <mt-text-field\n                    v-model=\"reason\"\n                    :placeholder=\"$tc('swag-amazon-pay-order.refund-modal.reasonPlaceholder')\"\n                    :label=\"$tc('swag-amazon-pay-order.refund-modal.reasonFieldLabel')\"\n                >\n                                  maxlength=\"16\">\n                        </mt-text-field>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_refund_modal_actions %}\n        <template #modal-footer>\n            {% block swag_amazon_pay_order_refund_modal_cancel %}\n            <mt-button\n                size=\"small\"\n                @click=\"closeModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </mt-button>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_refund_modal_confirm %}\n            <mt-button\n                variant=\"primary\"\n                size=\"small\"\n                :isLoading=\"isLoading\"\n                @click=\"onConfirm\"\n            >\n                {{ $tc('swag-amazon-pay-order.refund-modal.buttonConfirm') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import template from './swag-amazon-pay-refund-modal.html.twig';\nimport './swag-amazon-pay-refund-modal.scss';\n\nconst {Component, Mixin} = Shopware;\nconst {currency} = Shopware.Utils.format;\n\nComponent.register('swag-amazon-pay-refund-modal', {\n    template,\n\n    inject: ['SwagAmazonPayOrderService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n        chargeId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            refundAmount: null,\n            reason: '',\n        };\n    },\n\n    beforeMount() {\n        this.refundAmount = this.getDefaultRefundAmount();\n    },\n    computed: {\n        refundAmountLimit() {\n            const charge = this.getCharge();\n            if (charge === null) {\n                return 0.0;\n            }\n            return charge.maxRefundableAmount;\n        },\n\n        refundAmountLimitFormatted() {\n            return currency(\n                this.refundAmountLimit,\n                this.paymentDetails.chargePermission.currency,\n                2\n            );\n        },\n\n        refundAmountDefault() {\n            this.getDefaultRefundAmount();\n        },\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        getDefaultRefundAmount() {\n            const charge = this.getCharge();\n            if (charge === null) {\n                return 0.0;\n            }\n            return charge.defaultRefundableAmount;\n        },\n\n        getCharge() {\n            return this.paymentDetails.charges[this.chargeId] ? this.paymentDetails.charges[this.chargeId] : null;\n        },\n\n        validateForm() {\n            if (!this.refundAmount\n                 \n                || isNaN(this.refundAmount)\n                || !Number.isFinite(this.refundAmount)\n                || this.refundAmount === 0\n                || this.refundAmount > this.refundAmountLimit\n            ) {\n                this.refundAmount = this.refundAmountDefault;\n            }\n\n            return true;\n        },\n\n        onConfirm() {\n            if (this.validateForm() !== true) {\n                return;\n            }\n\n            const currencyCode = this.paymentDetails.chargePermission.currency;\n            const amountFormatted = currency(this.refundAmount, currencyCode, 2);\n\n            this.isLoading = true;\n\n            this.SwagAmazonPayOrderService.refundPayment(\n                this.chargeId,\n                this.refundAmount,\n                currencyCode,\n                this.reason,\n            ).then((response) => {\n                if (!response.chargeId) {\n                    this.createNotificationError({\n                        title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                        message: response.message,\n                    });\n\n                    this.isLoading = false;\n                } else {\n                    this.createNotificationSuccess({\n                        title: this.$tc('global.default.success'),\n                        message: this.$tc('swag-amazon-pay-order.refund-modal.notification.success', 0, {\n                            amount: amountFormatted,\n                        }),\n                    });\n\n                    this.$emit('reload-payment');\n                }\n            }).catch((response) => {\n                this.createNotificationError({\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: response.message,\n                });\n\n                this.isLoading = false;\n            });\n        },\n    },\n});\n","{% block swag_amazon_pay_order_cancel_modal %}\n    <sw-modal\n        :title=\"$tc('swag-amazon-pay-order.cancel-modal.title')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block swag_amazon_pay_order_cancel_modal_content %}\n        <template #default>\n            {% block swag_amazon_pay_order_cancel_modal_content_info_text %}\n            <div class=\"swag-amazon-pay-cancel-modal__info-text\">\n                <span>\n                    {{ $tc('swag-amazon-pay-order.cancel-modal.infoText') }}\n                </span>\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_cancel_modal_content_max_amount %}\n            <div class=\"swag-amazon-pay-cancel-modal__info-maximum-amount\">\n                <span>\n                    {{ $tc('swag-amazon-pay-order.cancel-modal.infoTextReason') }}\n                </span>\n            </div>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_cancel_modal_content_fields %}\n            <div class=\"swag-amazon-pay-cancel-modal__field-container\">\n                {% block swag_amazon_pay_order_cancel_modal_content_fields_reason %}\n                <mt-text-field\n                    v-model=\"reason\"\n                    :required=\"true\"\n                    :placeholder=\"$tc('swag-amazon-pay-order.cancel-modal.reasonPlaceholder')\"\n                    :label=\"$tc('swag-amazon-pay-order.cancel-modal.reasonFieldLabel')\"\n                >\n                        </mt-text-field>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n        {% block swag_amazon_pay_order_cancel_modal_actions %}\n        <template #modal-footer>\n            {% block swag_amazon_pay_order_cancel_modal_cancel %}\n            <mt-button\n                size=\"small\"\n                @click=\"closeModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </mt-button>\n            {% endblock %}\n\n                {% block swag_amazon_pay_order_cancel_modal_confirm %}\n            <mt-button\n                variant=\"primary\"\n                size=\"small\"\n                :isLoading=\"isLoading\"\n                :disabled=\"!reason\"\n                @click=\"onConfirm\"\n            >\n                {{ $tc('swag-amazon-pay-order.refund-modal.buttonConfirm') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import template from './swag-amazon-pay-cancel-modal.html.twig';\nimport './swag-amazon-pay-cancel-modal.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('swag-amazon-pay-cancel-modal', {\n    template,\n\n    inject: ['SwagAmazonPayOrderService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            reason: '',\n        };\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        onConfirm() {\n            if (!this.reason) {\n                return;\n            }\n\n            this.isLoading = true;\n\n            this.SwagAmazonPayOrderService.cancelPayment(\n                this.paymentDetails.chargePermission.reference,\n                this.reason,\n            ).then((response) => {\n                if (response.statusDetails && response.statusDetails.state === 'Closed') {\n                    this.createNotificationSuccess({\n                        title: this.$tc('global.default.success'),\n                        message: this.$tc('swag-amazon-pay-order.cancel-modal.notification.success'),\n                    });\n\n                    this.$emit('reload-payment');\n\n                    return;\n                }\n\n                const notificationData = {\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: this.$tc('swag-amazon-pay-order.cancel-modal.notification.error'),\n                };\n\n                if (response.message) {\n                    notificationData.message = response.message;\n                }\n\n                this.createNotificationError(notificationData);\n            }).catch((response) => {\n                this.createNotificationError({\n                    title: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    message: response.message,\n                });\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n    },\n});\n","{% block swag_amazon_pay_order_component_payment_history %}\n    <div>\n        <sw-data-grid\n            ref=\"swDataGrid\"\n            :dataSource=\"paymentDetails.transactionsCombined\"\n            :showSelection=\"false\"\n            :isLoading=\"isLoading\"\n            :compactMode=\"false\"\n            :showActions=\"false\"\n            :columns=\"columns\"\n        >\n            {% block swag_amazon_pay_order_component_payment_history_data_grid_column_created %}\n            <template #column-time=\"{ item }\">\n                {{ dateFilter(item.time, { hour: '2-digit', minute: '2-digit',day: '2-digit', month: '2-digit', year: '2-digit' }) }}\n            </template>\n            {% endblock %}\n            {% block swag_amazon_pay_order_component_payment_history_data_grid_column_amount %}\n            <template #column-amount=\"{ item }\">\n                <div\n                    v-if=\"item.type === 'Charge' && item.status === 'Captured'\"\n                    class=\"amazon-pay-transaction-amount\"\n                >\n                    {{ formatCurrency(item.capturedAmount) }}\n                </div>\n                <div\n                    v-if=\"(item.type !== 'Charge' || item.status !== 'Captured') && item.type !== 'Refund'\"\n                    class=\"amazon-pay-transaction-amount\"\n                >\n                    {{ formatCurrency(item.amount) }}\n                </div>\n                <div\n                    v-if=\"item.type === 'Refund'\"\n                    class=\"amazon-pay-transaction-amount amazon-pay-transaction-amount-negative\"\n                >\n                    {{ formatCurrency(-item.amount) }}\n                </div>\n            </template>\n            {% endblock %}\n            {% block swag_amazon_pay_order_component_payment_history_data_grid_column_status %}\n            <template #column-status=\"{ item }\">\n                <span\n                    :class=\"{\n                                'amazon-pay-transaction-status-success':(item.status === 'Captured' ||item.status === 'Refunded'),\n                                'amazon-pay-transaction-status-info':(item.status === 'Authorized' || item.status === 'RefundInitiated'),\n                                'amazon-pay-transaction-status-warning':(item.status === 'AuthorizationInitiated'),\n                                'amazon-pay-transaction-status-danger':(item.status === 'Declined' || item.status === 'Canceled')\n                        }\"\n                >\n                        {{ item.status }}</span>\n            </template>\n            {% endblock %}\n            {% block swag_amazon_pay_order_component_payment_history_data_grid_column_actions %}\n            <template #column-actions=\"{ item }\">\n                <mt-button\n                    v-if=\"item.type === 'Charge' && paymentDetails.charges[item.reference].maxRefundableAmount > 0\"\n                    size=\"small\"\n                    variant=\"secondary\"\n                    class=\"swag-amazon-pay-action-toolbar__button\"\n                    :disabled=\"!acl.can('order.editor')\"\n                    @click=\"showRefundModal(item)\"\n                    ghost\n                >\n                    {{ $tc('swag-amazon-pay-order.action-toolbar.refund') }}\n                </mt-button>\n                <mt-button\n                    size=\"small\"\n                    variant=\"secondary\"\n                    v-if=\"item.type === 'Charge' && item.status === 'Authorized'\"\n                    class=\"swag-amazon-pay-action-toolbar__button\"\n                    :disabled=\"!acl.can('order.editor')\"\n                    @click=\"showCaptureModal(item)\"\n                    ghost\n                >\n                    {{ $tc('swag-amazon-pay-order.action-toolbar.charge') }}\n                </mt-button>\n            </template>\n            {% endblock %}\n        </sw-data-grid>\n        <swag-amazon-pay-refund-modal\n            v-if=\"refundModalVisible\"\n            :paymentDetails=\"paymentDetails\"\n            :chargeId=\"refundChargeId\"\n            @modal-close=\"closeModals\"\n            @reload-payment=\"reloadPaymentDetails\"\n        >\n        </swag-amazon-pay-refund-modal>\n        <swag-amazon-pay-charge-modal\n            v-if=\"captureModalVisible\"\n            :paymentDetails=\"paymentDetails\"\n            :chargeId=\"captureChargeId\"\n            @modal-close=\"closeModals\"\n            @reload-payment=\"reloadPaymentDetails\"\n        >\n        </swag-amazon-pay-charge-modal>\n    </div>\n{% endblock %}","import template from './swag-amazon-pay-payment-history.html.twig';\nimport './swag-amazon-pay-payment-history.scss';\nconst {Component, Context} = Shopware;\nconst { currency } = Shopware.Utils.format;\n\nComponent.register('swag-amazon-pay-payment-history', {\n    template,\n    inject: [\n        'acl',\n    ],\n    props: {\n        paymentDetails: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            paymentNotifications: [],\n            refundModalVisible: false,\n            captureModalVisible: false,\n            refundChargeId: null,\n            captureChargeId: null,\n            repository: null,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        columns() {\n            return [\n                {\n                    property: 'type',\n                    dataIndex: 'type',\n                    label: this.$tc('swag-amazon-pay-order.payment-history.columns.subject'),\n                    primary: true,\n                },\n                {\n                    property: 'reference',\n                    dataIndex: 'reference',\n                    label: this.$tc('swag-amazon-pay-order.payment-history.columns.objectId'),\n                },\n                {\n                    property: 'amount',\n                    dataIndex: 'amount',\n                    label: this.$tc('swag-amazon-pay-order.payment-history.columns.amount'),\n                },\n                {\n                    property: 'status',\n                    dataIndex: 'status',\n                    align: 'center',\n                    label: this.$tc('swag-amazon-pay-order.payment-history.columns.status'),\n                },\n                {\n                    property: 'time',\n                    dataIndex: 'time',\n                    label: this.$tc('swag-amazon-pay-order.payment-history.columns.date'),\n                },\n                {\n                    property: 'actions',\n                    dataIndex: 'actions',\n                    label: this.$tc('swag-amazon-pay-order.payment-history.columns.actions'),\n                }\n            ];\n        },\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    created() {\n    },\n\n    methods: {\n        showRefundModal(transaction) {\n            this.refundChargeId = transaction.reference;\n            this.refundModalVisible = true;\n        },\n        showCaptureModal(transaction) {\n            this.captureChargeId = transaction.reference;\n            this.captureModalVisible = true;\n        },\n        closeModals() {\n            this.captureModalVisible = false;\n            this.refundModalVisible = false;\n        },\n        reloadPaymentDetails() {\n            this.closeModals();\n\n            // Wait for the next tick to trigger the reload. Otherwise, the Modal won't be hidden correctly.\n            this.$nextTick().then(() => {\n                this.$emit('reload-payment');\n            });\n        },\n        formatCurrency(value) {\n            return currency(\n                value || 0.0,\n                this.paymentDetails.chargePermission.currency\n            );\n        }\n    },\n});\n","import './extension/sw-order';\nimport './page/swag-amazon-pay-order-tab';\nimport './component/swag-amazon-pay-buyer-info';\nimport './component/swag-amazon-pay-amount-info';\nimport './component/swag-amazon-pay-action-toolbar';\nimport './component/swag-amazon-pay-checkout-info';\nimport './component/swag-amazon-pay-charge-modal';\nimport './component/swag-amazon-pay-create-charge-modal';\nimport './component/swag-amazon-pay-refund-modal';\nimport './component/swag-amazon-pay-cancel-modal';\nimport './component/swag-amazon-pay-payment-history';\n\nconst { Module } = Shopware;\n\nModule.register('swag-amazon-pay-order', {\n    type: 'plugin',\n    name: 'SwagAmazonPayOrder',\n    title: 'swag-amazon-pay-order.general.title',\n    description: 'swag-amazon-pay-order.general.description',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.order.detail') {\n            currentRoute.children.push({\n                component: 'swag-amazon-pay-order-tab',\n                name: 'swag-amazon-pay-order.payment.detail',\n                isChildren: true,\n                path: '/sw/order/swag-amazon-pay-order/detail/:id/:transactionId',\n                meta: {\n                    parentPath: 'sw.order.index',\n                    privilege: 'order.viewer',\n                },\n            });\n        }\n\n        next(currentRoute);\n    },\n});\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass SwagAmazonPayOrderService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'swag-amazon-pay-order') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    fetchPaymentDetails(chargePermissionId, refreshData = false) {\n        const apiRoute = `_action/${this.getApiBasePath()}/payment-details/${chargePermissionId}`;\n        return this.httpClient.get(\n            apiRoute,\n            {\n                params: {refreshData:refreshData?1:0},\n                headers: this.getBasicHeaders(),\n            },\n        )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    chargePayment(chargeId, amount, currencyCode, softDescriptor = '') {\n        const apiRoute = `_action/${this.getApiBasePath()}/charge-payment/${chargeId}`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    currencyCode: currencyCode,\n                    softDescriptor: softDescriptor,\n                    amount: amount,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    createCharge(chargePermissionId, amount, softDescriptor = '') {\n        const apiRoute = `_action/${this.getApiBasePath()}/create-charge/${chargePermissionId}`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    softDescriptor: softDescriptor,\n                    amount: amount,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    cancelPayment(chargePermissionId, closureReason) {\n        const apiRoute = `_action/${this.getApiBasePath()}/cancel-payment/${chargePermissionId}`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    closureReason: closureReason,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    refundPayment(chargeId, amount, currencyCode, softDescriptor = '') {\n        const apiRoute = `_action/${this.getApiBasePath()}/refund-payment/${chargeId}`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    currencyCode: currencyCode,\n                    softDescriptor: softDescriptor,\n                    amount: amount,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('SwagAmazonPayOrderService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new SwagAmazonPayOrderService(initContainer.httpClient, container.loginService);\n});\n\n","{% block sw_extension_card_base_context_menu_settings %}\n    {% parent() %}\n\n    <sw-context-menu-item\n        v-if=\"extension.name === 'SwagAmazonPay' && extension.active === true\"\n        @click=\"onSwagAmazonPaySettings()\"\n    >\n        {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.config') }}\n    </sw-context-menu-item>\n{% endblock %}","import template from './sw-extension-card-base.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-extension-card-base', {\n    template,\n    methods: {\n        onSwagAmazonPaySettings() {\n            this.$router.push({ name: 'swag.amazon.pay.configuration.config' });\n        },\n    },\n});\n"],"names":["template$i","Component","template","configToBeSaved","key","configActualKey","error","config","salesChannelId","response","url","link","template$h","Mixin","template$g","Criteria","criteria","result","item","credentials","useInheritance","value","template$f","ignoreVersionMismatch","template$e","downloadPath","fileData","template$d","domain","template$c","Module","Application","ApiService","SwagAmazonPayConfigService","httpClient","loginService","apiEndpoint","apiRoute","content","merchantId","file","files","container","initContainer","template$b","Context","orderId","orderRepository","orderCriteria","searchResult","order","orderTransaction","transactionId","template$a","refreshData","transaction","chargePermissionId","apiError","errorMessage","template$9","template$8","currency","template$7","chargePermissionStatusDetails","template$6","billingAddressId","template$5","charge","currencyCode","amountFormatted","template$4","template$3","template$2","notificationData","template$1","next","currentRoute","SwagAmazonPayOrderService","chargeId","amount","softDescriptor","closureReason"],"mappings":"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"}