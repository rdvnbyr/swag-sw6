{"version":3,"file":"klarna-payment-D1nTT4IA.js","sources":["../../../app/administration/src/api/klarna-payment-configuration.service.js","../../../app/administration/src/api/klarna-payment-order.service.js","../../../app/administration/src/api/klarna-payment-order-update.service.js","../../../app/administration/src/api/klarna-payment-wizard.service.js","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-payment-plugin-icon/klarna-payment-plugin-icon.html.twig","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-payment-plugin-icon/index.js","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-select-order-state/index.js","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-select-delivery-state/index.js","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-select-payment-codes/klarna-select-payment-codes.html.twig","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-select-payment-codes/index.js","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-select-salutation/index.js","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-disable-address-validation-field/klarna-disable-address-validation-field.html.twig","../../../app/administration/src/module/klarna-payment-configuration/components/klarna-disable-address-validation-field/index.js","../../../app/administration/src/module/klarna-payment-configuration/page/klarna-payment-settings/klarna-payment-settings.html.twig","../../../app/administration/src/module/klarna-payment-configuration/page/klarna-payment-settings/klarna-payment-settings-with-inheritance.html.twig","../../../app/administration/src/module/klarna-payment-configuration/page/klarna-payment-settings/index.js","../../../app/administration/src/module/klarna-payment-configuration/page/klarna-payment-wizard/klarna-payment-wizard.html.twig","../../../app/administration/src/module/klarna-payment-configuration/page/klarna-payment-wizard/index.js","../../../app/administration/src/module/klarna-payment-configuration/index.js","../../../app/administration/src/module/klarna-payment-order-management/extension/sw-order-detail/sw-order-detail.html.twig","../../../app/administration/src/module/klarna-payment-order-management/extension/sw-order-detail/index.js","../../../app/administration/src/module/klarna-payment-order-management/extension/sw-order-detail-base/index.js","../../../app/administration/src/module/klarna-payment-order-management/page/klarna-payment-tab/klarna-payment-tab.html.twig","../../../app/administration/src/module/klarna-payment-order-management/page/klarna-payment-tab/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-capture-button/klarna-capture-button.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-capture-button/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-order-items/klarna-order-items.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-order-items/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-payment-authorization/klarna-payment-authorization.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-payment-authorization/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-payment-cancel/klarna-order-cancel.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-payment-cancel/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-refund-button/klarna-refund-button.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-refund-button/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-release-amount/klarna-release-amount.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-release-amount/index.js","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-transaction-history/klarna-transaction-history.html.twig","../../../app/administration/src/module/klarna-payment-order-management/component/klarna-transaction-history/index.js","../../../app/administration/src/module/klarna-payment-order-management/index.js","../../../app/administration/src/module/sw-system-config/index.js","../../../app/administration/src/module/sw-form-field-renderer/index.js"],"sourcesContent":["const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass KlarnaPaymentConfigurationService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'klarna_payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    validateCredentials(credentials, endpoint) {\n        const payload = {...credentials, endpoint};\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/validate-credentials`,\n                payload,\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getEuApiRegionKey() {\n        return this.getApiRegionKey('eu');\n    }\n\n    getUsApiRegionKey() {\n        return this.getApiRegionKey('us');\n    }\n\n    getApiRegionKey(region) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/fetch-${region}-api-region-key`,\n                {},\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('KlarnaPaymentConfigurationService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new KlarnaPaymentConfigurationService(initContainer.httpClient, container.loginService);\n});\n\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass KlarnaPaymentOrderService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'klarna_payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    fetchOrderData(orderId, klarnaOrderId, salesChannel) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/fetch_order`,\n                {\n                    order_id: orderId,\n                    klarna_order_id: klarnaOrderId,\n                    salesChannel: salesChannel\n                },\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    captureOrder(request) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/capture_order`,\n                request,\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    refundOrder(request) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/refund_order`,\n                request,\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    cancelPayment(orderTransactionId, orderId, klarnaOrderId, salesChannel) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/cancel_payment`,\n                {\n                    orderTransactionId: orderTransactionId,\n                    order_id: orderId,\n                    klarna_order_id: klarnaOrderId,\n                    salesChannel: salesChannel\n                },\n                {\n                    headers: headers\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    releaseRemainingAuthorization(orderId, klarnaOrderId, salesChannel) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/release_remaining_authorization`,\n                {\n                    order_id: orderId,\n                    klarna_order_id: klarnaOrderId,\n                    salesChannel: salesChannel\n                },\n                {\n                    headers: headers\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    extendAuthorization(orderId, klarnaOrderId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/extend_authorization`,\n                {\n                    order_id: orderId,\n                    klarna_order_id: klarnaOrderId\n                },\n                {\n                    headers: headers\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('KlarnaPaymentOrderService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new KlarnaPaymentOrderService(initContainer.httpClient, container.loginService);\n});\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass KlarnaPaymentOrderUpdateService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'klarna_payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    updateOrder(orderId, versionId) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/update_order`,\n                {\n                    orderId: orderId\n                },\n                {\n                    headers: this.getBasicHeaders(KlarnaPaymentOrderUpdateService.getVersionHeader(versionId))\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('KlarnaPaymentOrderUpdateService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new KlarnaPaymentOrderUpdateService(initContainer.httpClient, container.loginService);\n});\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass KlarnaPaymentWizardService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'klarna_payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    finalizeInstallation(tableData) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/finalize_installation`,\n                {\n                    tableData: JSON.stringify(tableData)\n                },\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    fetchData() {\n        return this.httpClient\n            .get(`_action/${this.getApiBasePath()}/fetch_data`,\n                {\n                    headers: this.getBasicHeaders()\n                })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('KlarnaPaymentWizardService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new KlarnaPaymentWizardService(initContainer.httpClient, container.loginService);\n});\n\n","{% block klarna_payment_plugin_icon %}\n    <img :src=\"assetFilter('/klarnapayment/administration/static/plugin.png')\">\n{% endblock %}\n","import template from './klarna-payment-plugin-icon.html.twig';\n\nconst { Component, Filter } = Shopware;\n\nComponent.register('klarna-payment-plugin-icon', {\n    template,\n\n    computed: {\n        assetFilter() {\n            return Filter.getByName('asset');\n        },\n    }\n});\n","const { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.extend('klarna-select-order-state', 'sw-entity-single-select', {\n    props: {\n        criteria: {\n            type: Object,\n            required: false,\n            default() {\n                const criteria = new Criteria(1, 100);\n\n                criteria.addFilter(\n                    Criteria.equals(\n                        'stateMachine.technicalName',\n                        'order.state'\n                    )\n                );\n\n                return criteria;\n            }\n        }\n    }\n});\n","const { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.extend('klarna-select-delivery-state', 'sw-entity-single-select', {\n    props: {\n        criteria: {\n            type: Object,\n            required: false,\n            default() {\n                const criteria = new Criteria(1, 100);\n\n                criteria.addFilter(\n                    Criteria.equals(\n                        'stateMachine.technicalName',\n                        'order_delivery.state'\n                    )\n                );\n\n                return criteria;\n            }\n        }\n    }\n});\n","{% block sw_multi_select %}\n    <div>\n\n        <div class=\"klarna-payment-settings-kp__info\">\n            <ul>\n                <li>\n                    <h3>{{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.payLater.title') }}</h3>\n                    <img src=\"https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.png\" :title=\"$tc('klarna-payment-configuration.settingsForm.klarnaPayments.payLater.title')\" :alt=\"$tc('klarna-payment-configuration.settingsForm.klarnaPayments.payLater.title')\"/>\n                    <p>{{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.payLater.description') }}</p>\n                </li>\n                <li>\n                    <h3>{{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.sliceIt.title') }}</h3>\n                    <img src=\"https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.png\" :title=\"$tc('klarna-payment-configuration.settingsForm.klarnaPayments.sliceIt.title')\" :alt=\"$tc('klarna-payment-configuration.settingsForm.klarnaPayments.sliceIt.title')\"/>\n                    <p>{{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.sliceIt.description') }}</p>\n                </li>\n                <li>\n                    <h3>{{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.payNow.title') }}</h3>\n                    <img src=\"https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.png\" :title=\"$tc('klarna-payment-configuration.settingsForm.klarnaPayments.payNow.title')\" :alt=\"$tc('klarna-payment-configuration.settingsForm.klarnaPayments.payNow.title')\"/>\n                    <p>{{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.payNow.description') }}</p>\n                    <p><mt-icon name=\"regular-info-circle\" small color=\"#3498db\"/> {{ $tc('klarna-payment-configuration.settingsForm.klarnaPayments.payNow.additional') }}</p>\n                </li>\n            </ul>\n        </div>\n\n        {% parent() %}\n\n    </div>\n{% endblock %}\n","import template from './klarna-select-payment-codes.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.extend('klarna-select-payment-codes', 'sw-multi-select', {\n    template\n});\n","const { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.extend('klarna-select-salutation', 'sw-entity-single-select', {\n    props: {\n        criteria: {\n            type: Object,\n            required: false,\n            default() {\n                return new Criteria(1, 100);\n            }\n        }\n    }\n});\n","{% block klarna_switch_field %}\n    {# v-on=\"$listeners\" needed becaues vue/compat removes them from $attrs #}\n    {# New mt-switch component #}\n    <mt-switch\n        v-if=\"useMeteorComponent\"\n        v-bind=\"$attrs\"\n        :bordered=\"true\"\n        :checked=\"checkedValue\"\n        @change=\"onChangeHandler\"\n    >\n        <slot></slot>\n    </mt-switch>\n\n    {# v-on=\"$listeners\" needed becaues vue/compat removes them from $attrs #}\n    {# Deprecated component #}\n    {# TODO - check #}\n    <sw-switch-field-deprecated\n        v-else\n        v-bind=\"$attrs\"\n        :bordered=\"true\"\n        :value=\"value\"\n        @update:value=\"onChangeHandler\"\n    >\n        <slot></slot>\n    </sw-switch-field-deprecated>\n\n    {% block klarna_disable_address_validation_confirm_modal %}\n        <sw-confirm-modal\n            v-if=\"showDisableAddressValidationModal\"\n            class=\"klarna-disable-address-validation-modal\"\n            :title=\"$tc('klarna-payment-configuration.settingsForm.apiConfiguration.modal.title')\"\n            :text=\"$tc('klarna-payment-configuration.settingsForm.apiConfiguration.modal.text')\"\n            @confirm=\"onConfirmDisableAddressValidation\"\n            @close=\"onCloseDisableAddressValidationModal\"\n            @cancel=\"onCloseDisableAddressValidationModal\"\n        />\n    {% endblock %}\n{% endblock %}","import template from './klarna-disable-address-validation-field.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('klarna-disable-address-validation-field', {\n    template,\n\n    compatConfig: Shopware.compatConfig,\n\n    emits: ['update:value'],\n\n    props: {\n        value: {\n            type: Boolean,\n            required: false,\n        },\n\n        checked: {\n            type: Boolean,\n            required: false,\n        },\n    },\n\n    computed: {\n        checkedValue() {\n            if (typeof this.checked === 'boolean') {\n                return this.checked;\n            }\n\n            return this.value;\n        },\n\n        useMeteorComponent() {\n            // Use new meteor component in major\n            if (Shopware.Feature.isActive('v6.7.0.0')) {\n                return true;\n            }\n\n            // Throw warning when deprecated component is used\n            Shopware.Utils.debug.warn(\n                'sw-switch-field',\n                // eslint-disable-next-line max-len\n                'The old usage of \"sw-switch-field\" is deprecated and will be removed in v6.7.0.0. Please use \"mt-switch\" instead.',\n            );\n\n            return false;\n        },\n    },\n\n    methods: {\n        onChangeHandler(value) {\n            if(value){\n                this.showDisableAddressValidationModal = true;\n\n                setTimeout(() => {\n                    /** set link on modal text */\n                    let modalText = document.querySelector('.klarna-disable-address-validation-modal .sw-confirm-modal__text');\n                    modalText.innerHTML = modalText.innerHTML + \" <a href='https://www.klarna.com/international/merchant-protection-program/' target='_blank'>Merchant Protection Program</a>.\";\n                }, 100);\n            }\n\n            this.$emit('update:value', value);\n        },\n\n        onCloseDisableAddressValidationModal(){\n            this.showDisableAddressValidationModal = false;\n\n            this.$emit('update:value', false);\n        },\n\n        onConfirmDisableAddressValidation(){\n            this.$emit('update:value', true);\n\n            this.showDisableAddressValidationModal = false;\n        }\n    },\n\n    data() {\n        return {\n            showDisableAddressValidationModal: false\n        };\n    },\n});","{% block klarna_payment_settings %}\n    <sw-page class=\"klarna-payment\">\n        {% block klarna_payment_settings_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc('sw-settings.index.title') }}\n                    <mt-icon\n                        :name=\"arrowIconName\"\n                        small\n                    />\n                    {{ $tc('klarna-payment-configuration.settingsForm.title') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block klarna_payment_settings_actions %}\n            <template #smart-bar-actions>\n                {% block klarna_payment_settings_actions_wizard %}\n                    <mt-button\n                      :disabled=\"isLoading || isTesting\"\n                      variant=\"secondary\"\n                      size='default'\n                      @click=\"onWizard\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.buttons.wizard') }}\n                    </mt-button>\n                {% endblock %}\n                {% block klarna_payment_settings_actions_test %}\n                    <sw-button-process\n                      :is-loading=\"isTesting\"\n                      :process-success=\"isTestSuccessful\"\n                      @update:process-success=\"onTestFinished()\"\n                      :disabled=\"isLoading\"\n                      @click=\"onTest()\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.buttons.test') }}\n                    </sw-button-process>\n                {% endblock %}\n\n                {% block klarna_payment_settings_actions_save %}\n                    <sw-button-process\n                      class=\"sw-settings-login-registration__save-action\"\n                      :is-loading=\"isLoading\"\n                      :process-success=\"isSaveSuccessful\"\n                      @update:process-success=\"onSaveFinished()\"\n                      :disabled=\"isLoading || isTesting\"\n                      variant=\"primary\"\n                      @click=\"onSave\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.buttons.save') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block klarna_payment_settings_content %}\n            <template #content>\n                <mt-card :hero=\"true\" :isLoading=\"false\" :large=\"false\">\n                    <sw-alert variant=\"info\" appearance=\"default\" :show-icon=\"true\" :closable=\"false\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.inheritanceWarning') }}\n                    </sw-alert>\n                </mt-card>\n\n                <mt-card v-if=\"showNotificationGlobalPurchaseFlowMissing\">\n                    <sw-alert variant=\"info\" appearance=\"default\" :show-icon=\"true\" :closable=\"false\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.globalPurchaseMissingInfo') }}\n                    </sw-alert>\n                </mt-card>\n\n                <sw-card-view>\n                    <sw-system-config\n                        ref=\"systemConfig\"\n                        salesChannelSwitchable\n                        inherit\n                        @config-changed=\"onConfigChange\"\n                        @saleschannel-changed=\"setSalesChannelDomainsWithoutHttps\"\n                        domain=\"KlarnaPayment.settings\">\n\n                        <template #beforeElements=\"{ card, config }\">\n                            <template v-if=\"!showNotificationGlobalPurchaseFlowMissing\">\n                                <template v-if=\"card.name == 'payment_settings'\">\n                                    <sw-alert variant=\"info\" appearance=\"default\" :show-icon=\"true\" :closable=\"false\">\n                                        {{ $tc('klarna-payment-configuration.settingsForm.deprecatedConfiguration') }}\n                                    </sw-alert>\n                                </template>\n                            </template>\n                        </template>\n\n                        <template #card-element=\"{ element, config }\">\n                            <div v-show=\"displayField(element, config)\">\n                                <div v-if=\"element.name.endsWith('testMode')\">\n                                    <sw-alert\n                                        variant=\"info\"\n                                        appearance=\"pill\">\n                                        {{ $tc('klarna-payment-configuration.settingsForm.apiConfiguration.notice') }}\n                                    </sw-alert>\n                                </div>\n\n                                <sw-form-field-renderer\n                                    v-bind=\"$refs.systemConfig.getElementBind(element)\"\n                                    v-model:value=\"$refs.systemConfig.actualConfigData[$refs.systemConfig.currentSalesChannelId][element.name]\"\n                                />\n\n                                <div v-if=\"element.name.endsWith('isOnsiteMessagingActive')\" class=\"klarna-field--osm-description\">\n                                    <p>\n                                        <a v-if=\"getConfigValue('testMode')\" target=\"_blank\"\n                                          :href=\"$tc('klarna-payment-configuration.settingsForm.onsiteMessaging.playgroundUrl')\">\n                                            <mt-button size=\"x-small\">\n                                                {{ $tc('klarna-payment-configuration.settingsForm.onsiteMessaging.generate')}}\n                                            </mt-button>\n                                        </a>\n                                        <a v-else target=\"_blank\"\n                                          :href=\"$tc('klarna-payment-configuration.settingsForm.onsiteMessaging.defaultUrl')\">\n                                            <mt-button size=\"x-small\">\n                                                {{ $tc('klarna-payment-configuration.settingsForm.onsiteMessaging.generate')}}\n                                            </mt-button>\n                                        </a>\n                                    </p>\n                                </div>\n                            </div>\n                        </template>\n                    </sw-system-config>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n","{% block klarna_payment_settings %}\n    <sw-page class=\"klarna-payment\">\n        {% block klarna_payment_settings_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc('sw-settings.index.title') }}\n                    <mt-icon\n                        :name=\"arrowIconName\"\n                        small\n                    />\n                    {{ $tc('klarna-payment-configuration.settingsForm.title') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block klarna_payment_settings_actions %}\n            <template #smart-bar-actions>\n                {% block klarna_payment_settings_actions_wizard %}\n                    <mt-button\n                      :disabled=\"isLoading || isTesting\"\n                      variant=\"secondary\"\n                      size='default'\n                      @click=\"onWizard\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.buttons.wizard') }}\n                    </mt-button>\n                {% endblock %}\n                {% block klarna_payment_settings_actions_test %}\n                    <sw-button-process\n                      :is-loading=\"isTesting\"\n                      :process-success=\"isTestSuccessful\"\n                      @update:process-success=\"onTestFinished()\"\n                      :disabled=\"isLoading\"\n                      @click=\"onTest()\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.buttons.test') }}\n                    </sw-button-process>\n                {% endblock %}\n\n                {% block klarna_payment_settings_actions_save %}\n                    <sw-button-process\n                      class=\"sw-settings-login-registration__save-action\"\n                      :is-loading=\"isLoading\"\n                      :process-success=\"isSaveSuccessful\"\n                      @update:process-success=\"onSaveFinished()\"\n                      :disabled=\"isLoading || isTesting\"\n                      variant=\"primary\"\n                      @click=\"onSave\">\n                        {{ $tc('klarna-payment-configuration.settingsForm.buttons.save') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block klarna_payment_settings_content %}\n            <template #content>\n                <sw-card-view>\n                    <mt-card v-if=\"showNotificationGlobalPurchaseFlowMissing\">\n                        <sw-alert variant=\"info\" appearance=\"default\" :show-icon=\"true\" :closable=\"false\">\n                            {{ $tc('klarna-payment-configuration.settingsForm.globalPurchaseMissingInfo') }}\n                        </sw-alert>\n                    </mt-card>\n\n                    <sw-system-config\n                        ref=\"systemConfig\"\n                        sales-channel-switchable\n                        inherit\n                        @config-changed=\"onConfigChange\"\n                        @saleschannel-changed=\"setSalesChannelDomainsWithoutHttps\"\n                        domain=\"KlarnaPayment.settings\"\n                    >\n                        <template #beforeElements=\"{ card, config }\">\n                            <template v-if=\"!showNotificationGlobalPurchaseFlowMissing\">\n                                <template v-if=\"card.name == 'payment_settings'\">\n                                    <sw-alert variant=\"info\" appearance=\"default\" :show-icon=\"true\" :closable=\"false\">\n                                        {{ $tc('klarna-payment-configuration.settingsForm.deprecatedConfiguration') }}\n                                    </sw-alert>\n                                </template>\n                            </template>\n                        </template>\n\n                        <template #card-element=\"{ element, config }\">\n                            <sw-inherit-wrapper\n                                v-model:value=\"$refs.systemConfig.actualConfigData[$refs.systemConfig.currentSalesChannelId][element.name]\"\n                                v-bind=\"$refs.systemConfig.getInheritWrapperBind(element)\"\n                                :has-parent=\"$refs.systemConfig.isNotDefaultSalesChannel\"\n                                :inherited-value=\"$refs.systemConfig.getInheritedValue(element)\"\n                                :class=\"'sw-system-config--field-' + $refs.systemConfig.kebabCase($refs.systemConfig.getElementBind(element).name)\"\n                            >\n                                <template #content=\"props\">\n                                    <div v-show=\"displayField(element, config)\">\n                                        <div v-if=\"element.name.endsWith('testMode')\">\n                                            <sw-alert\n                                                variant=\"info\"\n                                                appearance=\"pill\">\n                                                {{ $tc('klarna-payment-configuration.settingsForm.apiConfiguration.notice') }}\n                                            </sw-alert>\n                                        </div>\n\n                                        <sw-form-field-renderer\n                                          v-bind=\"$refs.systemConfig.getElementBind(element, props)\"\n                                          :key=\"props.isInheritField + props.isInherited\"\n                                          :disabled=\"props.isInherited\"\n                                          :value=\"props.currentValue\"\n                                          @update:value=\"props.updateCurrentValue\"\n                                          />\n\n                                        <div v-if=\"element.name.endsWith('isOnsiteMessagingActive')\" class=\"klarna-field--osm-description\">\n                                            <p>\n                                                <a v-if=\"getConfigValue('testMode')\" target=\"_blank\"\n                                                  :href=\"$tc('klarna-payment-configuration.settingsForm.onsiteMessaging.playgroundUrl')\">\n                                                    <mt-button size=\"x-small\">\n                                                        {{ $tc('klarna-payment-configuration.settingsForm.onsiteMessaging.generate')}}\n                                                    </mt-button>\n                                                </a>\n                                                <a v-else target=\"_blank\"\n                                                  :href=\"$tc('klarna-payment-configuration.settingsForm.onsiteMessaging.defaultUrl')\">\n                                                    <mt-button size=\"x-small\">\n                                                        {{ $tc('klarna-payment-configuration.settingsForm.onsiteMessaging.generate')}}\n                                                    </mt-button>\n                                                </a>\n                                            </p>\n                                        </div>\n                                    </div>\n                                </template>\n                            </sw-inherit-wrapper>\n                        </template>\n                    </sw-system-config>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n   </sw-page>\n{% endblock %}\n","import templateDefault from './klarna-payment-settings.html.twig';\nimport templateWithInheritance from './klarna-payment-settings-with-inheritance.html.twig';\nimport './klarna-payment-settings.scss';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nconst version = Context.app.config.version;\nconst match = version.match(/((\\d+)\\.?(\\d+?)\\.?(\\d+)?\\.?(\\d*))-?([A-z]+?\\d+)?/i);\n\nlet template = templateDefault;\n\n// Version has to be higher than 6.3.4.x for using inheritance\nif (match && parseInt(match[2], 10) === 6 && (parseInt(match[3], 10) > 3 || parseInt(match[4], 10) > 4)) {\n    template = templateWithInheritance;\n}\n\nComponent.register('klarna-payment-settings', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    inject: [\n        'repositoryFactory',\n        'KlarnaPaymentConfigurationService'\n    ],\n\n    data() {\n        return {\n            euApiRegionKey: '',\n            usApiRegionKey: '',\n            apiRegionKeys: [],\n            isLoading: false,\n            isTesting: false,\n            isTestSuccessful: false,\n            isSaveSuccessful: false,\n            config: {},\n            paymentMethods: [],\n            externalCheckoutPaymentMethods: [],\n            configDomain: 'KlarnaPayment.settings.',\n            salesChannelDomainsWithoutHttps: [],\n            showNotificationGlobalPurchaseFlowMissing: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        salesChannelDomainRepository() {\n            return this.repositoryFactory.create('sales_channel_domain');\n        },\n\n        arrowIconName() {\n            if (match[3] >= 5) {\n                return 'regular-chevron-right-xs';\n            }\n\n            return 'small-arrow-medium-right';\n        }\n    },\n\n    methods: {\n        createdComponent() {\n            const me = this;\n\n            this.setSalesChannelDomainsWithoutHttps();\n\n            this.paymentMethodRepository.search(new Criteria(), Context.api).then((searchResult) => {\n                searchResult.forEach(((paymentMethod) => {\n                    me.paymentMethods.push({\n                        value: paymentMethod.id,\n                        label: paymentMethod.name\n                    });\n\n                    if (paymentMethod.formattedHandlerIdentifier === 'handler_swag_paypalpaymenthandler') {\n                        me.externalCheckoutPaymentMethods.push({\n                            value: paymentMethod.id,\n                            label: paymentMethod.name\n                        });\n                    }\n                }));\n            });\n\n            this.KlarnaPaymentConfigurationService.getEuApiRegionKey().then(response => {\n                me.euApiRegionKey = response.data.key;\n                me.apiRegionKeys.push(me.euApiRegionKey);\n            });\n\n            this.KlarnaPaymentConfigurationService.getUsApiRegionKey().then(response => {\n                me.usApiRegionKey = response.data.key;\n                me.apiRegionKeys.push(me.usApiRegionKey);\n            });\n        },\n\n        setSalesChannelDomainsWithoutHttps() {\n            const me = this;\n\n            let criteria = new Criteria();\n            criteria.addFilter(Criteria.not('AND', [Criteria.contains('url', 'https://')]));\n\n            if (this.$refs.systemConfig && this.$refs.systemConfig.currentSalesChannelId) {\n                criteria.addFilter(Criteria.equals('salesChannelId', this.$refs.systemConfig.currentSalesChannelId));\n            }\n\n            me.salesChannelDomainsWithoutHttps = [];\n\n            this.salesChannelDomainRepository.search(criteria, Context.api).then((searchResult) => {\n                searchResult.forEach(((salesChannelDomain) => {\n                    me.salesChannelDomainsWithoutHttps.push(salesChannelDomain.url);\n                }));\n            });\n        },\n\n        getConfigValue(field) {\n            if (this.$refs.systemConfig === undefined) {\n                return null;\n            }\n\n            const salesChannelId  = this.$refs.systemConfig.currentSalesChannelId;\n            const inheritedConfig = this.$refs.systemConfig.actualConfigData.null[this.configDomain + field];\n\n            if (salesChannelId === null) {\n                // switching into any salesChannel and back does not overwrite config, so we just use inheritedConfig\n                return inheritedConfig;\n            }\n\n            const config = this.config[this.configDomain + field];\n\n            if (config === null || config === undefined) {\n                return inheritedConfig;\n            }\n\n            return config;\n        },\n\n        onTest() {\n            this.testCredentials(false);\n        },\n\n        testCredentials(isSaveMode) {\n            const me = this;\n\n            let possibleFailures = me.apiRegionKeys.length;\n\n            me.apiRegionKeys.forEach((endpoint) => {\n                if (isSaveMode) {\n                    this.isSaveSuccessful = false;\n                    this.isLoading = true;\n                } else {\n                    me.isTestSuccessful = false;\n                    me.isTesting = true;\n                }\n\n                const credentials = {\n                    testMode: me.getConfigValue('testMode'),\n                    salesChannel: me.$refs.systemConfig.currentSalesChannelId\n                };\n\n                let regionPostfix = (endpoint === me.usApiRegionKey ? 'US' : '');\n                credentials.apiUsername = me.getConfigValue('apiUsername' + regionPostfix);\n                credentials.apiPassword = me.getConfigValue('apiPassword' + regionPostfix);\n                credentials.testApiUsername = me.getConfigValue('testApiUsername' + regionPostfix);\n                credentials.testApiPassword = me.getConfigValue('testApiPassword' + regionPostfix);\n\n                if (!me.shouldTestCredentials(credentials)) {\n                    --possibleFailures;\n\n                    me.releaseLoadingAndSave(isSaveMode, possibleFailures);\n\n                    return;\n                }\n\n                me.KlarnaPaymentConfigurationService.validateCredentials(credentials, endpoint).then(() => {\n                    me.createNotificationSuccess({\n                        title: me.$tc('klarna-payment-configuration.settingsForm.messages.titleSuccess'),\n                        message: me.$tc('klarna-payment-configuration.settingsForm.messages.messageTest' + endpoint + 'Success')\n                    });\n\n                    if (isSaveMode) {\n                        me.isSaveSuccessful = true;\n                    } else {\n                        me.isTestSuccessful = true;\n                    }\n\n                    --possibleFailures;\n                }).catch(() => {\n                    me.createNotificationError({\n                        title: me.$tc('klarna-payment-configuration.settingsForm.messages.titleError'),\n                        message: me.$tc('klarna-payment-configuration.settingsForm.messages.messageTest' + endpoint + 'Error' + (credentials.testMode ? 'Test' : 'Live'))\n                    });\n                }).finally(() => {\n                    me.releaseLoadingAndSave(isSaveMode, possibleFailures);\n                });\n            });\n        },\n\n        releaseLoadingAndSave(isSaveMode, possibleFailures) {\n            const me = this;\n\n            if (isSaveMode) {\n                me.isLoading = false;\n\n                if (possibleFailures <= 0) {\n                    me.$refs.systemConfig.saveAll();\n                }\n            } else {\n                me.isTesting = false;\n            }\n        },\n\n        shouldTestCredentials(data) {\n            if (data.testMode) {\n                return (data.testApiPassword && data.testApiPassword.length > 0)\n                    || (data.testApiUsername && data.testApiUsername.length > 0);\n            }\n\n            return (data.apiPassword && data.apiPassword.length > 0)\n                || (data.apiUsername && data.apiUsername.length > 0);\n        },\n\n        onSave() {\n            this.testCredentials(true);\n        },\n\n        onConfigChange(config) {\n            this.config = config;\n\n            this.showNotificationGlobalPurchaseFlowMissing = !this.getConfigValue('activeGlobalPurchaseFlow');\n\n            this.redirectToWizard();\n        },\n\n        redirectToWizard() {\n            const isInitialized = this.getConfigValue('isInitialized');\n\n            if (!isInitialized) {\n                this.$router.push({ name: 'klarna.payment.configuration.wizard' });\n            }\n        },\n\n        onSaveFinished() {\n            this.isSaveSuccessful = false;\n        },\n\n        onTestFinished() {\n            this.isTestSuccessful = false;\n        },\n\n        getBind(element, config) {\n            if (config !== this.config) {\n                this.config = config;\n            }\n\n            return element;\n        },\n\n        onWizard() {\n            this.$router.push({ name: 'klarna.payment.configuration.wizard' });\n        },\n\n        /**\n         * TODO: Depending on the klarnaType (checkout or payments) fields could be filtered via their name\n         */\n        displayField(element, config) {\n            if (element.name === `${this.configDomain}isInitialized`) {\n                return false;\n            }\n\n            if (element.name === `${this.configDomain}activeGlobalPurchaseFlow`) {\n                return false;\n            }\n\n            if (element.name === `${this.configDomain}onsiteMessagingScript`) {\n                // \"== null\" also matches undefined\n                if (config[`${this.configDomain}isOnsiteMessagingActive`] == null) {\n                    return this.getConfigValue('isOnsiteMessagingActive') === true;\n                }\n\n                return config[`${this.configDomain}isOnsiteMessagingActive`] === true;\n            }\n            if (element.name === `${this.configDomain}onsiteMessagingSnippet`) {\n                // \"== null\" also matches undefined\n                if (config[`${this.configDomain}isOnsiteMessagingActive`] == null) {\n                    return this.getConfigValue('isOnsiteMessagingActive') === true;\n                }\n\n                return config[`${this.configDomain}isOnsiteMessagingActive`] === true;\n            }\n\n            if (element.name.replace(this.configDomain, '').indexOf('klarnaExpress') === 0) {\n                // \"== null\" also matches undefined\n                if (config[`${this.configDomain}isKlarnaExpressCheckoutActive`] == null) {\n                    return this.getConfigValue('isKlarnaExpressCheckoutActive') === true;\n                }\n\n                return config[`${this.configDomain}isKlarnaExpressCheckoutActive`] === true;\n            }\n\n            if (element.name === `${this.configDomain}captureOrderStatus`) {\n                return this.getConfigValue('automaticCapture') === 'orderStatus';\n            }\n            if (element.name === `${this.configDomain}captureDeliveryStatus`) {\n                return this.getConfigValue('automaticCapture') === 'deliveryStatus';\n            }\n\n            if (element.name === `${this.configDomain}refundOrderStatus`) {\n                return this.getConfigValue('automaticRefund') === 'orderStatus';\n            }\n            if (element.name === `${this.configDomain}refundDeliveryStatus`) {\n                return this.getConfigValue('automaticRefund') === 'deliveryStatus';\n            }\n\n            if (element.name === `${this.configDomain}newsletterCheckboxLabel`) {\n                return config[`${this.configDomain}enableNewsletterCheckbox`];\n            }\n            if (element.name === `${this.configDomain}accountCheckboxLabel`) {\n                return config[`${this.configDomain}enableAccountCheckbox`];\n            }\n\n            if (element.name === `${this.configDomain}kcoFooterBadgeStyle`) {\n                return config[`${this.configDomain}kcoDisplayFooterBadge`];\n            }\n            if (element.name === `${this.configDomain}kcoFooterBadgeCountryCode`) {\n                return config[`${this.configDomain}kcoDisplayFooterBadge`];\n            }\n            if (element.name === `${this.configDomain}kcoFooterBadgeWidth`) {\n                return config[`${this.configDomain}kcoDisplayFooterBadge`];\n            }\n\n            return true;\n        },\n    }\n});\n","{% block klarna_payment_wizard %}\n    <sw-page class=\"klarna-payment--wizard\" v-bind:class=\"{ 'is--mobile': isMobile }\">\n        {% block klarna_payment_wizard_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc('klarna-payment-configuration.wizard.title') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block klarna_payment_wizard_content %}\n            <template #content>\n                <sw-card-view>\n                    <mt-card :is-loading=\"isLoading\">\n                        <sw-container columns=\"1fr 3fr\" class=\"klarna-payment-detail--transaction-details\" gap=\"0px 32px\">\n                            <sw-container>\n                                <sw-step-display\n                                  class=\"wizard-navigation\"\n                                  :item-index=\"step\"\n                                  :item-variant=\"stepVariant\">\n\n                                    <sw-step-item>\n                                        {{ $tc('klarna-payment-configuration.wizard.steps.welcome') }}\n                                    </sw-step-item>\n\n                                    <sw-step-item>\n                                        {{ $tc('klarna-payment-configuration.wizard.steps.salesChannel') }}\n                                    </sw-step-item>\n\n                                    <sw-step-item>\n                                        {{ $tc('klarna-payment-configuration.wizard.steps.documentation') }}\n                                    </sw-step-item>\n                                </sw-step-display>\n                            </sw-container>\n\n                            <sw-container>\n                                <sw-container v-if=\"step == 0\" gap=\"20px 0px\">\n                                    <sw-container>\n                                        <div class=\"logo\">\n                                            <img src=\"https://cdn.klarna.com/1.0/shared/image/generic/logo/de_de/basic/logo_black.png\" alt=\"logo\">\n                                        </div>\n                                    </sw-container>\n\n                                    <sw-container>\n                                        <span v-html=\" $tc('klarna-payment-configuration.wizard.content.welcome.customer')\"></span>\n                                    </sw-container>\n\n                                    <sw-container>\n                                        <span v-html=\"$tc('klarna-payment-configuration.wizard.content.welcome.registration')\"></span>\n                                    </sw-container>\n\n                                    <sw-container>\n                                        <span v-html=\"$tc('klarna-payment-configuration.wizard.content.welcome.installation')\"></span>\n                                    </sw-container>\n                                </sw-container>\n\n                                <sw-container v-if=\"step == 1\" gap=\"20px 0px\">\n                                    <sw-sales-channel-switch\n                                      :label=\"$tc('sw-settings.system-config.labelSalesChannelSelect')\"\n                                      @change-sales-channel-id=\"onSalesChannelChanged\">\n                                    </sw-sales-channel-switch>\n\n                                    <template v-for=\"(item, index) in salesChannels\">\n                                        <sw-container :class=\"item.id\" v-if=\"item.id == currentSalesChannelId\">\n                                            <sw-container>\n                                                {{ $tc('klarna-payment-configuration.wizard.klarnaProduct') }}\n                                            </sw-container>\n\n                                            <sw-container>\n                                                {% block klarna_payment_wizard_content_payment_select %}\n                                                    <sw-single-select\n                                                        v-model:value=\"item.klarnaType\"\n                                                        class=\"klarna-settings-wizard-content-payment-select\"\n                                                        size=\"small\"\n                                                        :options=\"klarnaWizardPaymentOptions\"\n                                                    />\n                                                {% endblock %}\n                                            </sw-container>\n                                        </sw-container>\n                                    </template>\n                                </sw-container>\n\n                                <sw-container v-if=\"step == 2\" gap=\"20px 0px\">\n                                    <sw-container>\n                                        <span v-html=\"$tc('klarna-payment-configuration.wizard.content.documentation.headline')\"></span>\n                                    </sw-container>\n\n                                    <sw-container>\n                                        <span v-html=\"$tc('klarna-payment-configuration.wizard.content.documentation.introduction')\"></span>\n                                    </sw-container>\n\n                                    <sw-container>\n                                        <span v-html=\"$tc('klarna-payment-configuration.wizard.content.documentation.conclusion')\"></span>\n                                    </sw-container>\n                                </sw-container>\n                            </sw-container>\n                        </sw-container>\n\n                        <sw-container columns=\"1fr 1fr\" gap=\"32px 32px\" class=\"wizard-footer\">\n                            <mt-button :disabled=\"step == minStep\" size=\"small\" @click=\"onBack\" variant=\"secondary\">\n                                <b>{{ $tc('klarna-payment-configuration.wizard.action.back') }}</b>\n                            </mt-button>\n\n                            <mt-button v-if=\"step != maxStep\" size=\"small\" variant=\"primary\" @click=\"onNext\">\n                                {{ $tc('klarna-payment-configuration.wizard.action.next') }}\n                            </mt-button>\n\n                            <mt-button v-if=\"step == maxStep\" size=\"small\" variant=\"primary\" @click=\"onFinish\">\n                                {{ $tc('klarna-payment-configuration.wizard.action.finish') }}\n                            </mt-button>\n                        </sw-container>\n                    </mt-card>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n","import template from './klarna-payment-wizard.html.twig';\nimport './klarna-payment-wizard.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('klarna-payment-wizard', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    inject: ['KlarnaPaymentWizardService'],\n\n    data() {\n        return {\n            isLoading: true,\n            currentSalesChannelId: null,\n            splitBreakpoint: 1024,\n            minStep: 0,\n            maxStep: 2,\n            isInitialized: false,\n            salesChannels: [],\n            isMobile: null,\n            step: 0,\n            stepVariant: 'info',\n            klarnaWizardPaymentOptions: [\n                { label: this.$tc('klarna-payment-configuration.wizard.type.deactivated'), value: 'deactivated', key: 'deactivated' },\n                { label: this.$tc('klarna-payment-configuration.wizard.type.payments'), value: 'payments', key: 'payments' }\n            ]\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.checkViewport();\n            this.registerListener();\n            this.loadTableData();\n        },\n\n        loadTableData() {\n            this.KlarnaPaymentWizardService.fetchData().then((response) => {\n                this.salesChannels = response.data.salesChannels;\n                this.isInitialized = response.data.isInitialized;\n            }).catch(() => {\n                this.createErrorNotification({\n                    title: this.$tc('klarna-payment-configuration.wizard.messages.titleError'),\n                    message: this.$tc('klarna-payment-configuration.wizard.messages.messageLoadError')\n                });\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        registerListener() {\n            this.$device.onResize({\n                listener: this.checkViewport.bind(this)\n            });\n        },\n\n        checkViewport() {\n            this.isMobile = this.$device.getViewportWidth() < this.splitBreakpoint;\n        },\n\n        onNext() {\n            this.step = this.step + 1;\n\n            if (this.step > this.maxStep) {\n                this.step = this.maxStep;\n            }\n        },\n\n        onBack() {\n            this.step = this.step - 1;\n\n            if (this.step < this.minStep) {\n                this.step = this.minStep;\n            }\n        },\n\n        onFinish() {\n            this.isLoading = true;\n\n            this.KlarnaPaymentWizardService.finalizeInstallation(this.salesChannels).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('klarna-payment-configuration.wizard.messages.titleSuccess'),\n                    message: this.$tc('klarna-payment-configuration.wizard.messages.messageSaveSuccess')\n                });\n\n                this.$router.push({ name: 'klarna.payment.configuration.settings' });\n            }).catch(() => {\n                this.createErrorNotification({\n                    title: this.$tc('klarna-payment-configuration.wizard.messages.titleError'),\n                    message: this.$tc('klarna-payment-configuration.wizard.messages.messageSaveError')\n                });\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onSalesChannelChanged(salesChannelId) {\n            this.currentSalesChannelId = salesChannelId;\n        }\n    }\n});\n","import './components/klarna-payment-plugin-icon';\nimport './components/klarna-select-order-state';\nimport './components/klarna-select-delivery-state';\nimport './components/klarna-select-payment-codes';\nimport './components/klarna-select-salutation';\nimport './components/klarna-disable-address-validation-field';\n\nimport './page/klarna-payment-settings';\nimport './page/klarna-payment-wizard';\n\nimport deDE from './snippet/de_DE.json';\nimport enGB from './snippet/en_GB.json';\n\nconst { Module } = Shopware;\n\nlet configuration = {\n    type: 'plugin',\n    name: 'KlarnaPayment',\n    title: 'klarna-payment-configuration.module.title',\n    description: 'klarna-payment-configuration.module.description',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    \n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routes: {\n        settings: {\n            component: 'klarna-payment-settings',\n            path: 'settings',\n            meta: {\n                parentPath: 'sw.settings.index'\n            }\n        },\n        wizard: {\n            component: 'klarna-payment-wizard',\n            path: 'wizard',\n            meta: {\n                parentPath: 'sw.settings.index'\n            }\n        }\n    },\n    \n    settingsItem: {\n        name:   'klarna-payment-configuration',\n        to:     'klarna.payment.configuration.settings',\n        label:  'klarna-payment-configuration.module.title',\n        group:  'plugins',\n        iconComponent: 'klarna-payment-plugin-icon',\n    }\n};\n\nModule.register('klarna-payment-configuration', configuration);","{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <template v-for=\"transaction in klarnaTransactions\">\n        {% block klarna_payment_payment_tab %}\n            <sw-tabs-item :route=\"{name: 'klarna-payment-order-management.payment.detail', params: { id: $route.params.id, transaction: transaction.transaction } }\" :title=\"$tc('klarna-payment-order-management.order-tab.title')\">\n                <span :class=\"transaction.cancelled ? 'klarna-tab-error' : ''\">\n                    {{ $tc('klarna-payment-order-management.order-tab.title') }}\n\n                    <mt-icon v-if=\"transaction.cancelled\"\n                      class=\"klarna-error-badge\"\n                      name=\"regular-info-circle\"\n                      size=\"14px\"\n                      v-tooltip=\"{ message: $tc('klarna-payment-order-management.tooltips.transactionCancelled') }\"\n                    />\n                </span>\n            </sw-tabs-item>\n        {% endblock %}\n    </template>\n{% endblock %}\n","import template from './sw-order-detail.html.twig';\nimport './sw-order-detail.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.override('sw-order-detail', {\n    template,\n\n    data() {\n        return {\n            klarnaTransactions: []\n        };\n    },\n\n    computed: {\n        isEditable() {\n            const route = 'klarna-payment-order-management.payment.detail';\n\n            return this.klarnaTransactions.length === 0 || this.$route.name !== route;\n        }\n    },\n\n    watch: {\n        orderId: {\n            deep: true,\n            handler() {\n                this.klarnaTransactions = [];\n\n                if (!this.orderId) {\n                    return;\n                }\n\n                this.loadOrderData();\n            },\n            immediate: true\n        }\n    },\n\n    methods: {\n        loadOrderData() {\n            const orderRepository = this.repositoryFactory.create('order');\n\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.addAssociation('transactions');\n            orderCriteria.addAssociation('transactions.stateMachineState');\n\n            return orderRepository.get(this.$route.params.id, Context.api, orderCriteria).then((order) => {\n                this.loadKlarnaTransactions(order);\n            });\n        },\n\n        loadKlarnaTransactions(order) {\n            order.transactions.forEach((orderTransaction) => {\n                if (!orderTransaction.customFields) {\n                    return;\n                }\n\n                if (!orderTransaction.customFields.klarna_order_id) {\n                    return;\n                }\n\n                this.klarnaTransactions.push({\n                    transaction: orderTransaction.id,\n                    cancelled: orderTransaction.stateMachineState.technicalName === 'cancelled'\n                });\n            });\n        }\n    }\n});\n","const { Component, Mixin } = Shopware;\n\nComponent.override('sw-order-detail-base', {\n    inject: ['KlarnaPaymentOrderUpdateService'],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    methods: {\n        onSaveEdits() {\n            this.$emit('loading-change', true);\n            this.$emit('editing-change', false);\n\n            this.KlarnaPaymentOrderUpdateService.updateOrder(this.orderId, this.versionContext.versionId).then(async () => {\n                await this.$super('onSaveEdits');\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('klarna-payment-order-management.messages.updateErrorTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.updateErrorMessage')\n                });\n\n                this.versionContext.versionId = Shopware.Context.api.liveVersionId;\n                this.reloadEntityData();\n            });\n        }\n    }\n});\n","{% block klarna_payment_payment_details %}\n    <div class=\"klarna-payment-tab\" v-bind:class=\"{ 'is--mobile': isMobile }\">\n        <div v-if=\"!hasError && initialized\">\n            <mt-card class=\"klarna-payment-details\" :title=\"$tc('klarna-payment-order-management.order-details.title')\">\n                <sw-container columns=\"1fr 1fr\" class=\"klarna-payment-detail--transaction-details mobile--ready\" gap=\"0px 32px\">\n                    <sw-container gap=\"5px\">\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.klarnaReference')\" :model-value=\"klarnaOrder.reference\"></mt-text-field>\n\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.orderAmount')\" :model-value=\"currencyFilter(klarnaOrder.order_amount, klarnaOrder.currency.isoCode)\"></mt-text-field>\n\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.capturedAmount')\" :model-value=\"currencyFilter(klarnaOrder.captured_amount, klarnaOrder.currency.isoCode) \"></mt-text-field>\n\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.refundedAmount')\" :model-value=\"currencyFilter(klarnaOrder.refunded_amount, klarnaOrder.currency.isoCode) \"></mt-text-field>\n\n                        <klarna-release-amount :klarnaOrder=\"klarnaOrder\" v-on:reload=\"loadData\" v-on:subComponentLoading=\"setSubComponentLoading\"></klarna-release-amount>\n                    </sw-container>\n\n                    <sw-container gap=\"5px\">\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.klarnaOrderId')\" :model-value=\"klarnaOrder.order_id\"></mt-text-field>\n\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.klarnaStatus')\" :model-value=\"klarnaOrder.order_status\"></mt-text-field>\n\n                        <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.initialPaymentMethod')\" :model-value=\"klarnaOrder.initial_payment_method\"></mt-text-field>\n\n                        <mt-text-field :helpText=\"$tc('klarna-payment-order-management.order-details.riskCheckHelpText')\"  :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.riskCheck')\" :model-value=\"klarnaOrder.fraud_status\"></mt-text-field>\n\n                        <klarna-payment-authorization :klarnaOrder=\"klarnaOrder\" v-on:reload=\"loadData\" v-on:subComponentLoading=\"setSubComponentLoading\" ></klarna-payment-authorization>\n                    </sw-container>\n                </sw-container>\n            </mt-card>\n\n            <mt-card class=\"klarna-payment-actions\">\n                <sw-container columns=\"1fr 1fr 1fr\" gap=\"32px 32px\" class=\"mobile--ready\">\n                    <klarna-capture-button :klarnaOrder=\"klarnaOrder\" v-on:reload=\"loadData\"></klarna-capture-button>\n\n                    <klarna-refund-button :klarnaOrder=\"klarnaOrder\" v-on:reload=\"loadData\"></klarna-refund-button>\n\n                    <klarna-order-cancel :klarnaOrder=\"klarnaOrder\" v-on:reload=\"loadData\" v-on:subComponentLoading=\"setSubComponentLoading\"></klarna-order-cancel>\n                </sw-container>\n            </mt-card>\n\n            <klarna-transaction-history :klarnaHistory=\"klarnaHistory\" :klarnaOrder=\"klarnaOrder\" ></klarna-transaction-history>\n        </div>\n\n        <mt-loader v-if=\"isLoading || isSubComponentLoading\" />\n    </div>\n{% endblock %}\n","import template from './klarna-payment-tab.html.twig';\nimport './klarna-payment-tab.scss';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('klarna-payment-tab', {\n    template,\n\n    data() {\n        return {\n            identifier: '',\n            initialized: false,\n            isLoading: true,\n            isSubComponentLoading: false,\n            hasError: false,\n            klarnaOrder: {},\n            splitBreakpoint: 1024,\n            isMobile: false,\n            klarnaHistory: {},\n            orderAmount: []\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    destroyed() {\n        this.destroyedComponent();\n    },\n\n    watch: {\n        '$route'() {\n            this.loadData();\n        }\n    },\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    inject: [\n        'KlarnaPaymentOrderService',\n        'repositoryFactory'\n    ],\n\n    computed: {\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            Shopware.Utils.EventBus.on('language-change', this.loadData);\n\n            this.$device.onResize({\n                listener: this.checkViewport.bind(this)\n            });\n\n            this.checkViewport();\n            this.loadData();\n        },\n\n        destroyedComponent() {\n            Shopware.Utils.EventBus.off('language-change', this.loadData);\n        },\n\n        checkViewport() {\n            this.isMobile = this.$device.getViewportWidth() < this.splitBreakpoint;\n        },\n\n        loadData() {\n            if(this.$route.name !== \"klarna-payment-order-management.payment.detail\") {\n                return;\n            }\n            const me = this;\n\n            me.isLoading = true;\n            me.hasError = false;\n\n            const repository = this.repositoryFactory.create('order_transaction');\n\n            const criteria = new Criteria(1, 1);\n            criteria.addAssociation('order');\n            criteria.addAssociation('order.lineItems');\n\n            return repository.get(this.$route.params.transaction, Context.api, criteria).then((transaction) => {\n                const klarnaOrderId = transaction.customFields.klarna_order_id;\n                const salesChannel = transaction.order.salesChannelId;\n\n                me.$emit('identifier-change', transaction.order.orderNumber);\n\n                me.KlarnaPaymentOrderService.fetchOrderData(transaction.order.id, klarnaOrderId, salesChannel).then((response) => {\n                    me.hasError = false;\n                    me.initialized = true;\n\n                    me.klarnaOrder = response.order;\n                    me._populateKlarnaOrderWithVariantInfo(transaction.order)\n\n                    me.klarnaOrder.salesChannel = salesChannel;\n                    me.klarnaOrder.swOrderId = transaction.order.id;\n                    me.klarnaOrder.orderTransactionId = this.$route.params.transaction;\n\n                    me.klarnaHistory = response.transactionHistory;\n                }).catch(() => {\n                    me.createNotificationError({\n                        title: me.$tc('klarna-payment-order-management.messages.loadErrorTitle'),\n                        message: me.$tc('klarna-payment-order-management.messages.loadErrorMessage')\n                    });\n\n                    me.hasError = true;\n                }).finally(() => {\n                    me.isLoading = false;\n                });\n            }).catch(() => {\n                me.createNotificationError({\n                    title: me.$tc('klarna-payment-order-management.messages.loadErrorTitle'),\n                    message: me.$tc('klarna-payment-order-management.messages.loadErrorMessage')\n                });\n\n                me.hasError = true;\n                me.isLoading = false;\n            });\n        },\n\n        _populateKlarnaOrderWithVariantInfo(order) {\n            this.klarnaOrder.order_lines.forEach((klarnaItem) => {\n                for (const lineItem of order.lineItems) {\n                    if (klarnaItem.reference === lineItem.payload.productNumber) {\n                        klarnaItem.options = lineItem.payload.options;\n                        // break out of `forEach` callback; caps `for` iterations\n                        return;\n                    }\n                }\n            })\n        },\n\n        setSubComponentLoading(subComponentLoading) {\n            this.isSubComponentLoading = subComponentLoading;\n        }\n    }\n});\n","{% block klarna_payment_payment_details %}\n    <div class=\"klarna-capture-button\">\n        <sw-container v-tooltip=\"{message: $tc('klarna-payment-order-management.tooltips.captureImpossible'), disabled: buttonEnabled}\" :key=\"buttonEnabled\">\n            <mt-button class='cpt-btn' :disabled=\"!buttonEnabled\" @click=\"openCaptureModal\" size='default' variant=\"secondary\">\n                {{ $tc('klarna-payment-order-management.buttons.captureAmount') }}\n            </mt-button>\n        </sw-container>\n\n        <sw-modal v-if=\"showCaptureModal\" @modal-close=\"closeCaptureModal\" :title=\"$tc(`klarna-payment-order-management.captureModal.title`)\" class=\"klarna-payment-detail--capture-modal\">\n            <klarna-order-items\n              :klarna-order=\"klarnaOrder\"\n              mode=\"capture\"\n              @select-item=\"onSelectItem\"\n              @change-quantity=\"onChangeQuantity\">\n            </klarna-order-items>\n\n            <div class=\"klarna-payment-detail--capture-modal--content\">\n                <sw-container columns=\"1fr 1fr\" gap=\"0 32px\">\n                    <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.captureModal.orderAmount')\" :model-value=\"currencyFilter(klarnaOrder.order_amount, klarnaOrder.currency.isoCode)\" />\n                    <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.captureModal.capturedAmount')\" :model-value=\"currencyFilter(klarnaOrder.captured_amount, klarnaOrder.currency.isoCode)\" />\n                    <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.captureModal.remainingAmount')\" :model-value=\"currencyFilter(klarnaOrder.remaining_amount, klarnaOrder.currency.isoCode)\" />\n                    <mt-number-field required=\"required\" number-type=\"float\" :step=\"null\" :digits=\"2\" :fill-digits=\"false\" :allow-empty=\"false\" :label=\"$tc('klarna-payment-order-management.captureModal.captureAmount')\" v-model=\"captureAmount\" :min=\"minCaptureValue\" :max=\"maxCaptureAmount\" />\n                </sw-container>\n\n                <mt-textarea :help-text=\"$tc('klarna-payment-order-management.captureModal.descriptionHelpText')\" @update:model-value=\"onChangeDescription\" :label=\"$tc('klarna-payment-order-management.captureModal.labelComment')\" v-model=\"description\" />\n            </div>\n\n            <template #modal-footer>\n                <mt-button :disabled=\"isLoading\" @click=\"closeCaptureModal\" size=\"default\" variant=\"secondary\">\n                    {{ $tc('klarna-payment-order-management.captureModal.close') }}\n                </mt-button>\n\n                <sw-button-process :is-loading=\"isLoading\" :process-success=\"isCaptureSuccessful\" @update:process-success=\"onCaptureFinished()\" :disabled=\"isLoading\" variant=\"primary\" @click=\"captureOrder\">\n                    {{ $tc('klarna-payment-order-management.captureModal.submit') }}\n                </sw-button-process>\n            </template>\n        </sw-modal>\n    </div>\n{% endblock %}\n","import template from './klarna-capture-button.html.twig';\nimport './klarna-capture-button.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('klarna-capture-button', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    inject: ['KlarnaPaymentOrderService'],\n\n    props: {\n        klarnaOrder: {\n            type: Object,\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            hasError: false,\n            showCaptureModal: false,\n            isCaptureSuccessful: false,\n            selection: [],\n            captureAmount: 0.0,\n            description: ''\n        };\n    },\n\n    computed: {\n        buttonEnabled() {\n            if (this.klarnaOrder.fraud_status !== 'ACCEPTED') {\n                return false;\n            }\n            if (this.klarnaOrder.order_status === 'CANCELLED') {\n                return false;\n            }\n            if (this.klarnaOrder.remaining_amount <= 0) {\n                return false;\n            }\n\n            return true;\n        },\n\n        maxCaptureAmount() {\n            return this.klarnaOrder.remaining_amount;\n        },\n\n        minCaptureValue() {\n            return 0.01;\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    methods: {\n        openCaptureModal() {\n            this.showCaptureModal = true;\n            this.isCaptureSuccessful = false;\n\n            this.captureAmount = this.klarnaOrder.remaining_amount;\n            this.description = '';\n            this.selection = [];\n        },\n\n        calculateCaptureAmount() {\n            let amount = 0;\n\n            this.selection.forEach((selection) => {\n                if (selection.selected) {\n                    amount += (selection.unit_price / 100) * selection.quantity;\n                }\n            });\n\n            if (amount === 0 || amount > this.klarnaOrder.remaining_amount) {\n                amount = this.klarnaOrder.remaining_amount;\n            }\n\n            amount = +amount;\n            amount = Number(amount.toFixed(2));\n\n            this.captureAmount = amount;\n        },\n\n        closeCaptureModal() {\n            this.showCaptureModal = false;\n        },\n\n        onCaptureFinished() {\n            this.isCaptureSuccessful = false;\n        },\n\n        captureOrder() {\n            this.isLoading = true;\n\n            const orderLines = [];\n\n            this.selection.forEach((selection) => {\n                this.klarnaOrder.order_lines.forEach((orderItem) => {\n                    if (orderItem.reference === selection.reference && selection.selected && selection.quantity) {\n                        const copy = { ...orderItem };\n\n                        copy.quantity = selection.quantity;\n                        copy.total_amount = copy.unit_price * copy.quantity;\n\n                        const taxRate = copy.tax_rate / 100;\n\n                        copy.total_tax_amount = Math.round(copy.total_amount / (100 + taxRate) * taxRate);\n\n                        orderLines.push(copy);\n                    }\n                });\n            });\n\n            const request = {\n                orderTransactionId: this.klarnaOrder.orderTransactionId,\n                order_id: this.klarnaOrder.swOrderId,\n                klarna_order_id: this.klarnaOrder.order_id,\n                salesChannel: this.klarnaOrder.salesChannel,\n                captureAmount: this.captureAmount,\n                description: this.description,\n                orderLines: JSON.stringify(orderLines),\n                complete: this.captureAmount === this.maxCaptureAmount\n            };\n\n            this.KlarnaPaymentOrderService.captureOrder(request).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('klarna-payment-order-management.messages.captureSuccessTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.captureSuccessMessage')\n                });\n\n                this.isCaptureSuccessful = true;\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('klarna-payment-order-management.messages.captureErrorTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.captureErrorMessage')\n                });\n\n                this.isCaptureSuccessful = false;\n            }).finally(() => {\n                this.isLoading = false;\n                this.showCaptureModal = false;\n\n                this.$emit('reload');\n            });\n        },\n\n        onSelectItem(reference, selected) {\n            if (this.selection.length === 0) {\n                this._populateSelectionProperty();\n            }\n\n            this.selection.forEach((selection) => {\n                if (selection.reference === reference) {\n                    selection.selected = selected;\n                }\n            });\n\n            this.calculateCaptureAmount();\n        },\n\n        onChangeQuantity(reference, quantity) {\n            if (this.selection.length === 0) {\n                this._populateSelectionProperty();\n            }\n\n            this.selection.forEach((selection) => {\n                if (selection.reference === reference) {\n                    selection.quantity = quantity;\n                }\n            });\n\n            this.calculateCaptureAmount();\n        },\n\n        onChangeDescription(description) {\n            const maxChars = 255;\n\n            if (description.length >= maxChars) {\n                this.description = description.substr(0, maxChars);\n            } else {\n                this.description = description;\n            }\n        },\n\n        _populateSelectionProperty() {\n            this.klarnaOrder.order_lines.forEach((orderItem) => {\n                this.selection.push({\n                    quantity: orderItem.quantity - orderItem.captured_quantity,\n                    reference: orderItem.reference,\n                    unit_price: orderItem.unit_price,\n                    selected: false\n                });\n            });\n        }\n    }\n});\n","{# @var \\KlarnaPayment\\Components\\Client\\Response\\GetOrderResponse klarnaOrder #}\n\n{% block klarna_payment_payment_details %}\n    <div class=\"klarna-order-items\">\n        <sw-data-grid\n          :data-source=\"orderItems\"\n          :columns=\"orderItemColumns\"\n          :show-actions=\"true\"\n          :show-selection=\"true\"\n          :allow-inline-edit=\"true\"\n          @inline-edit-save=\"onInlineEditSave\"\n          @select-item=\"onSelectItem\">\n\n            <template #column-reference=\"{ item, isInlineEdit}\">\n                <div v-tooltip=\"{ message: item.reference, disabled: item.reference.length <= 15 }\">\n                    {{ truncateFilter(item.reference, 15, true, '...') }}\n                </div>\n            </template>\n\n            <template #column-product=\"{ item, isInlineEdit}\">\n                <sw-product-variant-info\n                        :variations=\"item.options\">\n                    <div class=\"sw-order-line-items-grid__item-label\">\n                        {{ item.product }}\n                    </div>\n                </sw-product-variant-info>\n            </template>\n\n            <template #column-price=\"{ item, isInlineEdit}\">\n                {{ item.price }}\n            </template>\n\n            <template #column-stock=\"{ item, isInlineEdit }\">\n                {% block klarna_order_items_stock_inline_edit %}\n                    <template v-if=\"isInlineEdit\">\n                        <mt-number-field\n                            v-model=\"item.amount\"\n                            :size=\"small\"\n                            @input-change=\"onChangeQuantity($event, item.id)\"\n                            :disabled=\"item.disabled\"\n                            :max=\"item.amount\"\n                        />\n                    </template>\n                {% endblock %}\n\n                {% block klarna_order_items_stock_content %}\n                    <template v-else>\n                        {{ item.amount }}\n                    </template>\n                {% endblock %}\n            </template>\n\n            <template #column-returnStatus=\"{ item, isInlineEdit }\">\n                <mt-skeleton-bar v-if=\"isReturnDataLoading\" />\n                <ul v-else-if=\"!isReturnDataLoading && item.returnStatus\">\n                    <li v-for=\"(orderRefundLineItem, returnNumber) in item.returnStatus\">\n                        {{ $tc('swag-return-management.returnCard.labelTitle', 0, { returnNumber: returnNumber }) }}: {{ orderRefundLineItem.state.translated.name }}\n                    </li>\n                </ul>\n                <div v-else>\n                    {{ $tc('klarna-payment-order-management.refundModal.noReturnRequested') }}\n                </div>\n            </template>\n        </sw-data-grid>\n    </div>\n{% endblock %}\n","import template from './klarna-order-items.html.twig';\n\nconst { Component, Context, Application } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { currency } = Shopware.Utils.format;\n\nComponent.register('klarna-order-items', {\n    template,\n\n    props: {\n        klarnaOrder: {\n            type: Object,\n            required: true\n        },\n\n        mode: {\n            type: String,\n            required: false\n        },\n\n        returnData: {\n            type: Object,\n            default() {\n                return {};\n            },\n            required: false\n        },\n\n        swagCommercialInstalled: {\n            type: Boolean,\n            default: false,\n            required: false\n        },\n\n        isReturnDataLoading: {\n            type: Boolean,\n            default: false,\n            required: false\n        }\n    },\n\n    computed: {\n        orderItems() {\n            const data = [];\n\n            this.klarnaOrder.order_lines.forEach((orderItem) => {\n                const price = currency(\n                    orderItem.total_amount / 100,\n                    this.klarnaOrder.currency\n                );\n\n                let disabled = false;\n                let quantity = orderItem.quantity;\n\n                if (this.mode === 'refund' && orderItem.captured_quantity > 0) {\n                    quantity = orderItem.captured_quantity;\n                }\n\n                if (this.mode === 'capture') {\n                    quantity -= orderItem.captured_quantity;\n                } else if (this.mode === 'refund') {\n                    quantity -= orderItem.refunded_quantity;\n                }\n\n                if (quantity <= 0) {\n                    disabled = true;\n                }\n\n                data.push({\n                    id: orderItem.reference,\n                    reference: orderItem.reference,\n                    product: orderItem.name,\n                    options: orderItem.options,\n                    amount: quantity,\n                    disabled: disabled,\n                    price: price,\n                    orderItem: orderItem,\n                    returnStatus: this.returnData[orderItem.reference]\n                });\n            });\n\n            return data;\n        },\n\n        orderItemColumns() {\n            let columns =  [\n                {\n                    property: 'reference',\n                    label: this.$tc('klarna-payment-order-management.modal.columns.reference'),\n                    inlineEdit: 'string',\n                    rawData: true\n                },\n                {\n                    property: 'product',\n                    label: this.$tc('klarna-payment-order-management.modal.columns.product'),\n                    inlineEdit: 'string',\n                    rawData: true\n                },\n                {\n                    property: 'amount',\n                    label: this.$tc('klarna-payment-order-management.modal.columns.amount'),\n                    inlineEdit: 'number',\n                    rawData: true\n                },\n                {\n                    property: 'price',\n                    label: this.$tc('klarna-payment-order-management.modal.columns.price'),\n                    inlineEdit: 'number',\n                    rawData: true\n                }\n            ];\n\n            if (this.mode === 'refund' && this.swagCommercialInstalled) {\n                columns.push({\n                    property: 'returnStatus',\n                    label: this.$tc('klarna-payment-order-management.modal.columns.returnStatus'),\n                    rawData: true\n                });\n            }\n\n            return columns;\n        },\n\n        truncateFilter() {\n            return Shopware.Filter.getByName('truncate');\n        },\n    },\n\n    methods: {\n        onSelectItem(selection, item, selected) {\n            this.$emit('select-item', item.id, selected);\n        },\n\n        onInlineEditSave(reference) {\n            let newAmount = reference.amount;\n            if(newAmount > reference.orderItem.quantity ) {\n                newAmount = reference.orderItem.quantity;\n            }\n            reference.amount = newAmount;\n\n            this.$emit('change-quantity', reference.id, reference.amount);\n        }\n    }\n});\n","{% block klarna_payment_authorization %}\n    <sw-container class=\"klarna-extend-authorization\">\n        <mt-text-field :help-text=\"$tc('klarna-payment-order-management.order-details.expiryDateHelpText')\" :suffix=\"true\" :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.order-details.expiryDate')\" :model-value=\"dateFilter(klarnaOrder.expiry_date, { hour: '2-digit', minute: '2-digit' })\">\n            <template #suffix>\n                <sw-container v-tooltip=\"{message: $tc('klarna-payment-order-management.tooltips.extendAuthorizationImpossible'), disabled: !buttonDisabled}\" :key=\"buttonDisabled\">\n                    <mt-button :disabled=\"buttonDisabled\" @click=\"openModal\" variant=\"secondary\">\n                        {{ $tc('klarna-payment-order-management.buttons.extendAuthorization') }}\n                    </mt-button>\n                </sw-container>\n            </template>\n        </mt-text-field>\n\n        <sw-modal class=\"klarna-payment-detail--authorization-modal klarna-authorization--modal\"\n          v-if=\"showModal\"\n          @modal-close=\"closeModal\"\n          :title=\"$tc('klarna-payment-order-management.authorizationModal.title')\">\n\n            <div class=\"authorization-modal--text\">\n                {{ $tc('klarna-payment-order-management.authorizationModal.content') }}\n            </div>\n\n            <template #modal-footer>\n                <mt-button :disabled=\"isLoading\" @click=\"closeModal\" size='default' variant=\"secondary\">\n                    {{ $tc('klarna-payment-order-management.authorizationModal.close') }}\n                </mt-button>\n\n                <sw-button-process\n                  class=\"authorization-modal--action\"\n                  variant=\"primary\"\n                  :is-loading=\"isLoading\"\n                  :disabled=\"isDisabled\"\n                  :process-success=\"isSuccessful\"\n                  @click=\"extendAuthorization\">\n                    {{ $tc('klarna-payment-order-management.authorizationModal.submit') }}\n                </sw-button-process>\n            </template>\n        </sw-modal>\n    </sw-container>\n{% endblock %}\n","import template from './klarna-payment-authorization.html.twig';\nimport './klarna-payment-authorization.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('klarna-payment-authorization', {\n    template,\n\n    props: {\n        klarnaOrder: {\n            type: Object,\n            required: true\n        }\n    },\n\n    inject: [\n        'KlarnaPaymentOrderService'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    computed: {\n        buttonDisabled() {\n            const date = Date.parse(this.klarnaOrder.expiry_date);\n\n            if (date < new Date('now') || this.klarnaOrder.remaining_amount <= 0) {\n                return true;\n            }\n\n            if (this.klarnaOrder.order_status === 'CANCELLED') {\n                return true;\n            }\n\n            return false;\n        },\n        \n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    data() {\n        return {\n            showModal: false,\n            isDisabled: false,\n            isLoading: false,\n            isSuccessful: false\n        };\n    },\n\n    methods: {\n        extendAuthorization() {\n            this.$emit('subComponentLoading', true);\n\n            this.isLoading = true;\n            this.isDisabled = true;\n\n            this.KlarnaPaymentOrderService.extendAuthorization(this.klarnaOrder.swOrderId, this.klarnaOrder.order_id).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('klarna-payment-order-management.messages.authorizationModal.extendSuccessTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.authorizationModal.extendSuccessMessage')\n                });\n\n                this.isSuccessful = true;\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('klarna-payment-order-management.messages.authorizationModal.extendErrorTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.authorizationModal.extendErrorMessage')\n                });\n\n                this.isSuccessful = false;\n            }).finally(() => {\n                this.$emit('subComponentLoading', false);\n                this.$emit('reload', true);\n\n                this.isLoading = false;\n                this.showModal = false;\n                this.isDisabled = false;\n            });\n        },\n\n        openModal() {\n            this.showModal = true;\n            this.isSuccessful = false;\n        },\n\n        closeModal() {\n            this.showModal = false;\n        }\n    }\n});\n","{% block klarna_payment_order_cancel %}\n    <div class=\"klarna-cancellation\">\n        <sw-container v-tooltip=\"{message: $tc('klarna-payment-order-management.tooltips.cancellationImpossible'), disabled: !isDisabled}\" :key=\"isDisabled\">\n            <mt-button class='cncl-btn' :disabled=\"isDisabled\" @click=\"showModal\" size='default' variant=\"secondary\">\n                {{ $tc('klarna-payment-order-management.cancellation.modalButton') }}\n            </mt-button>\n        </sw-container>\n\n        <sw-modal class=\"klarna-cancellation--modal\" v-if=\"isModalShown\" @modal-close=\"closeModal\" :title=\"$tc('klarna-payment-order-management.cancellation.modal.title')\">\n            <div class=\"klarna-cancellation-modal--text\">\n                {{ $tc('klarna-payment-order-management.cancellation.modal.content') }}\n            </div>\n\n            <template #modal-footer>\n                <mt-button :disabled=\"isLoading\" @click=\"closeModal\" variant=\"secondary\" size=\"default\">\n                    {{ $tc('klarna-payment-order-management.cancellation.modal.close') }}\n                </mt-button>\n\n                <sw-button-process\n                  class=\"klarna-cancellation-modal--action\"\n                  :is-loading=\"isLoading\"\n                  :process-success=\"isSuccessful\"\n                  :disabled=\"isDisabled\"\n                  variant=\"primary\"\n                  @click=\"cancelPayment\">\n                    {{ $tc('klarna-payment-order-management.cancellation.modal.submit') }}\n                </sw-button-process>\n            </template>\n        </sw-modal>\n    </div>\n{% endblock %}\n","import template from './klarna-order-cancel.html.twig';\nimport './klarna-order-cancel.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('klarna-order-cancel', {\n    template,\n\n    props: {\n        klarnaOrder: {\n            type: Object,\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isSuccessful: false,\n            isModalShown: false\n        };\n    },\n\n    computed: {\n        isDisabled() {\n            return !(this.klarnaOrder.captured_amount === 0 && this.klarnaOrder.order_status !== 'CANCELLED');\n        }\n    },\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    inject: ['KlarnaPaymentOrderService'],\n\n    methods: {\n        showModal() {\n            this.isModalShown = true;\n            this.isSuccess = false;\n        },\n\n        closeModal() {\n            this.isModalShown = false;\n        },\n\n        cancelPayment() {\n            this.$emit('subComponentLoading', true);\n\n            this.isDisabled = true;\n            this.isLoading = true;\n\n            this.KlarnaPaymentOrderService.cancelPayment(\n                this.klarnaOrder.orderTransactionId,\n                this.klarnaOrder.swOrderId,\n                this.klarnaOrder.order_id,\n                this.klarnaOrder.salesChannel\n            ).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('klarna-payment-order-management.cancellation.messages.successTitle'),\n                    message: this.$tc('klarna-payment-order-management.cancellation.messages.successMessage')\n                });\n\n                this.isSuccessful = true;\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('klarna-payment-order-management.cancellation.messages.failureTitle'),\n                    message: this.$tc('klarna-payment-order-management.cancellation.messages.failureMessage')\n                });\n\n                this.isSuccessful = false;\n            }).finally(() => {\n                this.$emit('reload');\n                this.$emit('subComponentLoading', false);\n\n                this.isLoading = false;\n                this.isModalShown = false;\n            });\n        }\n    }\n});\n","{% block klarna_payment_payment_details %}\n    <div class=\"klarna-refund-button\">\n        <sw-container v-tooltip=\"{message: $tc('klarna-payment-order-management.tooltips.refundImpossible'), disabled: buttonEnabled}\" :key=\"buttonEnabled\">\n            <mt-button class='rfnd-btn' :disabled=\"!buttonEnabled\" @click=\"openRefundModal\" size='default' variant=\"secondary\">\n                {{ $tc('klarna-payment-order-management.buttons.refundAmount') }}\n            </mt-button>\n        </sw-container>\n\n        <sw-modal v-if=\"showRefundModal\" @modal-close=\"closeRefundModal\" :title=\"$tc('klarna-payment-order-management.refundModal.title')\" class=\"klarna-payment-detail--refund-modal\">\n            <klarna-order-items\n              :klarna-order=\"klarnaOrder\"\n              :return-data=\"returnData\"\n              :swag-commercial-installed=\"swagCommercialInstalled\"\n              :is-return-data-loading=\"isReturnDataLoading\"\n              mode=\"refund\"\n              v-on:select-item=\"onSelectItem\"\n              v-on:change-quantity=\"onChangeQuantity\">\n            </klarna-order-items>\n\n            <div class=\"klarna-payment-detail--refund-modal--content\">\n                <sw-container columns=\"1fr 1fr\" gap=\"0 32px\">\n                    <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.refundModal.orderAmount')\" :model-value=\"currencyFilter(klarnaOrder.order_amount, klarnaOrder.currency.isoCode)\"></mt-text-field>\n                    <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.refundModal.refundedAmount')\" :model-value=\"currencyFilter(klarnaOrder.refunded_amount, klarnaOrder.currency.isoCode)\"></mt-text-field>\n                    <mt-text-field :disabled=\"true\" :label=\"$tc('klarna-payment-order-management.refundModal.remainingAmount')\" :model-value=\"currencyFilter(klarnaOrder.remainingAmount, klarnaOrder.currency.isoCode)\"></mt-text-field>\n                    <mt-number-field required=\"required\" number-type=\"float\" :digits=\"2\" :label=\"$tc('klarna-payment-order-management.refundModal.refundAmount')\" v-model=\"refundAmount\" :min=\"minRefundValue\" :max=\"maxRefundAmount\"></mt-number-field>\n                </sw-container>\n\n                <mt-textarea :help-text=\"$tc('klarna-payment-order-management.refundModal.descriptionHelpText')\" @update:model-value=\"onChangeDescription\" :label=\"$tc('klarna-payment-order-management.refundModal.labelComment')\" v-model=\"description\" />\n            </div>\n\n            <template #modal-footer>\n                <mt-button :disabled=\"isLoading\" @click=\"closeRefundModal\" variant=\"secondary\" size=\"default\">\n                    {{ $tc('klarna-payment-order-management.refundModal.close') }}\n                </mt-button>\n\n                <sw-button-process :is-loading=\"isLoading\" :process-success=\"isRefundSuccessful\" @update:process-success=\"onRefundFinished()\" :disabled=\"isLoading\" variant=\"primary\" @click=\"refundOrder\">\n                    {{ $tc('klarna-payment-order-management.refundModal.submit') }}\n                </sw-button-process>\n            </template>\n        </sw-modal>\n    </div>\n{% endblock %}\n","import template from './klarna-refund-button.html.twig';\nimport './klarna-refund-button.scss';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('klarna-refund-button', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    inject: ['KlarnaPaymentOrderService', 'repositoryFactory'],\n\n    props: {\n        klarnaOrder: {\n            type: Object,\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            hasError: false,\n            showRefundModal: false,\n            isRefundSuccessful: false,\n            selection: [],\n            refundAmount: 0.0,\n            description: '',\n            returnData: {},\n            swagCommercialInstalled: false,\n            isReturnDataLoading: false,\n        };\n    },\n\n    created() {\n        this.loadSwagCommercialReturnData();\n    },\n\n    computed: {\n        remainingAmount() {\n            return (this.klarnaOrder.captured_amount - this.klarnaOrder.refunded_amount).toFixed(2);\n        },\n\n        buttonEnabled() {\n            if (this.remainingAmount <= 0) {\n                return false;\n            }\n            if (this.klarnaOrder.order_status === 'CANCELLED') {\n                return false;\n            }\n            if (this.klarnaOrder.captured_amount <= 0) {\n                return false;\n            }\n\n            return true;\n        },\n\n        maxRefundAmount() {\n            return this.remainingAmount;\n        },\n\n        minRefundValue() {\n            return 0.01;\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    methods: {\n        loadSwagCommercialReturnData() {\n            try {\n                const me = this;\n                const orderReturnRepository = this.repositoryFactory.create('order_return');\n                const criteria = new Criteria();\n\n                criteria.addFilter(Criteria.equals('orderId', this.$route.params.id));\n                criteria.addAssociation('lineItems');\n                criteria.addAssociation('lineItems.state');\n                criteria.addAssociation('lineItems.lineItem.product');\n\n                let productNumber;\n\n                this.isReturnDataLoading = true;\n\n                orderReturnRepository.search(criteria, Context.api).then((result) => {\n                    result.forEach((orderReturn) => {\n                        orderReturn.lineItems.forEach((orderReturnLineItem) => {\n                            productNumber = orderReturnLineItem.lineItem.product.productNumber;\n\n                            if (!me.returnData[productNumber]) {\n                                me.returnData[productNumber] = {};\n                            }\n\n                            if (!me.returnData[productNumber][orderReturn.returnNumber]) {\n                                me.returnData[productNumber][orderReturn.returnNumber] = orderReturnLineItem;\n                            }\n                        });\n                    });\n\n                    me.isReturnDataLoading = false;\n                });\n\n                me.swagCommercialInstalled = true;\n            } catch (e) {\n                // Repository does not exist, hence SwagCommercial wasn't installed\n            }\n        },\n\n        openRefundModal() {\n            this.showRefundModal = true;\n            this.isRefundSuccessful = false;\n\n            this.refundAmount = this.remainingAmount;\n            this.description = '';\n            this.selection = [];\n        },\n\n        calculateRefundAmount() {\n            let amount = 0;\n\n            this.selection.forEach((selection) => {\n                if (selection.selected) {\n                    amount += (selection.unit_price / 100) * selection.quantity;\n                }\n            });\n\n            if (amount === 0 || amount > this.remainingAmount) {\n                amount = this.remainingAmount;\n            }\n\n            amount = +amount;\n            amount = amount.toFixed(2);\n\n            this.refundAmount = amount;\n        },\n\n        closeRefundModal() {\n            this.showRefundModal = false;\n        },\n\n        onRefundFinished() {\n            this.isRefundSuccessful = false;\n        },\n\n        refundOrder() {\n            this.isLoading = true;\n\n            const orderLines = [];\n\n            this.selection.forEach((selection) => {\n                this.klarnaOrder.order_lines.forEach((orderItem) => {\n                    if (orderItem.reference === selection.reference && selection.selected && selection.quantity > 0) {\n                        const copy = { ...orderItem };\n\n                        copy.quantity = selection.quantity;\n                        copy.total_amount = copy.unit_price * copy.quantity;\n\n                        const taxRate = copy.tax_rate / 100;\n\n                        copy.total_tax_amount = Math.round(copy.total_amount / (100 + taxRate) * taxRate);\n\n                        orderLines.push(copy);\n                    }\n                });\n            });\n\n            const request = {\n                orderTransactionId: this.klarnaOrder.orderTransactionId,\n                order_id: this.klarnaOrder.swOrderId,\n                klarna_order_id: this.klarnaOrder.order_id,\n                salesChannel: this.klarnaOrder.salesChannel,\n                refundAmount: this.refundAmount,\n                description: this.description,\n                orderLines: JSON.stringify(orderLines),\n                complete: this.refundAmount === this.maxRefundAmount\n            };\n\n            this.KlarnaPaymentOrderService.refundOrder(request).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('klarna-payment-order-management.messages.refundSuccessTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.refundSuccessMessage')\n                });\n\n                this.isRefundSuccessful = true;\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('klarna-payment-order-management.messages.refundErrorTitle'),\n                    message: this.$tc('klarna-payment-order-management.messages.refundErrorMessage')\n                });\n\n                this.isRefundSuccessful = false;\n            }).finally(() => {\n                this.$emit('reload');\n\n                this.isLoading = false;\n                this.showRefundModal = false;\n            });\n        },\n\n        onSelectItem(reference, selected) {\n            if (this.selection.length === 0) {\n                this._populateSelectionProperty();\n            }\n\n            this.selection.forEach((selection) => {\n                if (selection.reference === reference) {\n                    selection.selected = selected;\n                }\n            });\n\n            this.calculateRefundAmount();\n        },\n\n        onChangeQuantity(reference, quantity) {\n            if (this.selection.length === 0) {\n                this._populateSelectionProperty();\n            }\n\n            this.selection.forEach((selection) => {\n                if (selection.reference === reference) {\n                    selection.quantity = quantity;\n                }\n            });\n\n            this.calculateRefundAmount();\n        },\n\n        onChangeDescription(description) {\n            const maxChars = 255;\n\n            if (description.length >= maxChars) {\n                this.description = description.substr(0, maxChars);\n            } else {\n                this.description = description;\n            }\n        },\n\n        _populateSelectionProperty() {\n            this.klarnaOrder.order_lines.forEach((orderItem) => {\n                let quantity = orderItem.quantity;\n\n                if (orderItem.captured_quantity > 0) {\n                    quantity = orderItem.captured_quantity;\n                }\n\n                this.selection.push({\n                    quantity: quantity - orderItem.refunded_quantity,\n                    reference: orderItem.reference,\n                    unit_price: orderItem.unit_price,\n                    selected: false\n                });\n            });\n        }\n    }\n});\n","{% block klarna_payment_amount_authorization %}\n    <sw-container class=\"klarna-release-amount\">\n        <mt-text-field :help-text=\"$tc('klarna-payment-order-management.order-details.remainingAmountHelpText')\"\n                       :suffix=\"true\" :disabled=\"true\"\n                       :label=\"$tc('klarna-payment-order-management.order-details.remainingAmount')\"\n                       :model-value=\"currencyFilter(klarnaOrder.remaining_amount, klarnaOrder.currency.isoCode)\">\n            <template #suffix>\n                <sw-container v-tooltip=\"{message: $tc('klarna-payment-order-management.tooltips.releaseAmountImpossible'), disabled: !buttonDisabled}\" :key=\"buttonDisabled\">\n                    <mt-button :disabled=\"buttonDisabled\" @click=\"openModal\" variant=\"secondary\">\n                        {{ $tc('klarna-payment-order-management.buttons.releaseAmount') }}\n                    </mt-button>\n                </sw-container>\n            </template>\n        </mt-text-field>\n\n        <sw-modal class=\"klarna-release-amount--modal\"\n          v-if=\"isModalShown\"\n          @modal-close=\"closeModal\"\n          :title=\"$tc('klarna-payment-order-management.release.modal.title')\">\n\n            <div class=\"klarna-release-amount-modal--content\">\n                {{ $tc('klarna-payment-order-management.release.modal.content') }}\n            </div>\n\n            <template #modal-footer>\n                <mt-button :disabled=\"isLoading\" @click=\"closeModal\" variant='secondary'>\n                    {{ $tc('klarna-payment-order-management.release.modal.close') }}\n                </mt-button>\n\n                <sw-button-process\n                  class=\"klarna-release-amount-modal--action\"\n                  :disable=\"isDisabled\"\n                  :is-loading=\"isLoading\"\n                  :process-success=\"isSuccessful\"\n                  variant=\"primary\"\n                  @click=\"releaseRemainingAuthorization\">\n                    {{ $tc('klarna-payment-order-management.release.modal.submit') }}\n                </sw-button-process>\n            </template>\n        </sw-modal>\n    </sw-container>\n{% endblock %}\n","import template from './klarna-release-amount.html.twig';\nimport './klarna-release-amount.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('klarna-release-amount', {\n    template,\n\n    props: {\n        klarnaOrder: {\n            type: Object,\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isDisabled: false,\n            isSuccessful: false,\n            isModalShown: false\n        };\n    },\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    inject: ['KlarnaPaymentOrderService'],\n\n    computed: {\n        buttonDisabled() {\n            if (this.klarnaOrder.order_status === 'CANCELLED') {\n                return true;\n            }\n\n            if (this.klarnaOrder.remaining_amount <= 0) {\n                return true;\n            }\n\n            return this.klarnaOrder.captured_amount <= 0;\n        },\n        \n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    methods: {\n        releaseRemainingAuthorization() {\n            this.$emit('subComponentLoading', true);\n            this.isDisabled = true;\n            this.isLoading = true;\n\n            this.KlarnaPaymentOrderService.releaseRemainingAuthorization(\n                this.klarnaOrder.swOrderId,\n                this.klarnaOrder.order_id,\n                this.klarnaOrder.salesChannel\n            ).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$tc('klarna-payment-order-management.release.messages.successTitle'),\n                    message: this.$tc('klarna-payment-order-management.release.messages.successMessage')\n                });\n\n                this.isSuccessful = true;\n            }).catch(() => {\n                this.createNotificationError({\n                    title: this.$tc('klarna-payment-order-management.release.messages.errorTitle'),\n                    message: this.$tc('klarna-payment-order-management.release.messages.errorMessage')\n                });\n\n                this.isSuccessful = false;\n            }).finally(() => {\n                this.$emit('reload');\n                this.$emit('subComponentLoading', false);\n\n                this.isLoading = false;\n                this.isModalShown = false;\n                this.isDisabled = false;\n            });\n        },\n\n        openModal() {\n            this.isModalShown = true;\n        },\n\n        closeModal() {\n            this.isModalShown = false;\n        }\n    }\n});\n","{% block klarna_payment_payment_details_transaction_history %}\n    <mt-card class=\"klarna-payment-transactionHistory\" :title=\"$tc('klarna-payment-order-management.transactionHistory.title')\">\n        {% block klarna_payment_payment_details_transaction_history_data %}\n            <sw-data-grid\n              :data-source=\"translatedHistory\"\n              :columns=\"transactionHistoryColumns\"\n              :show-actions=\"true\"\n              :show-selection=\"false\">\n\n                {% block klarna_payment_payment_details_transaction_history_data_inner %}\n                    {% block klarna_payment_payment_details_transaction_history_data_status %}\n                        <template #column-status=\"{ item }\">\n                            <sw-data-grid-column-boolean :value=\"!item.error\" :is-inline-edit=\"false\" />\n                        </template>\n                    {% endblock %}\n\n                    {% block klarna_payment_payment_details_transaction_history_data_date %}\n                        <template #column-date=\"{ item }\">\n                            {{ dateFilter(item.date, { hour: '2-digit', minute: '2-digit' }) }}\n                        </template>\n                    {% endblock %}\n\n                    <template #action-modals=\"{ item }\">\n                        {% block klarna_payment_payment_details_transaction_history_modal_button %}\n                            <mt-button size=\"small\" @click=\"openDetailModal(item)\" variant='secondary'>\n                                {{ $tc('klarna-payment-order-management.buttons.showDetails') }}\n                            </mt-button>\n                        {% endblock %}\n                    </template>\n                {% endblock %}\n            </sw-data-grid>\n        {% endblock %}\n\n        {% block klarna_payment_payment_details_transaction_history_modal %}\n            <sw-modal v-if=\"showDetailModal\" @modal-close=\"closeDetailModal\" :title=\"detailModalTitle\" class=\"klarna-payment-detail--transaction-modal klarna-request--modal\">\n                {% block klarna_payment_payment_details_transaction_history_modal_success %}\n                    <div v-if=\"success\" class=\"klarna-request klarna-request--success\">\n                        <div v-if=\"orderAmount\" class=\"klarna-request--amount\">\n                            <sw-data-grid\n                              :data-source=\"orderAmount\"\n                              :columns=\"detailHistoryAmountColumns\"\n                              :show-actions=\"false\"\n                              :show-selection=\"false\">\n\n                                <template #column-type=\"{ item }\">\n                                    {{ $tc('klarna-payment-order-management.transactionHistory.modal.type.' + item.type) }}\n                                </template>\n\n                                <template #column-value=\"{ item }\">\n                                    {{ currencyFilter(item.value, klarnaOrder.currency.isoCode) }}\n                                </template>\n                            </sw-data-grid>\n                        </div>\n\n                        <div v-else>\n                            {{ $tc('klarna-payment-order-management.transactionHistory.modal.noAmount') }}\n                        </div>\n                    </div>\n                {% endblock %}\n\n                {% block klarna_payment_payment_details_transaction_history_modal_error %}\n                    <div v-else class=\"klarna-request--failure\">\n                        <div v-if=\"orderAmount\" class=\"klarna-request--amount\">\n                            <sw-data-grid\n                              :data-source=\"orderAmount\"\n                              :columns=\"detailHistoryAmountColumns\"\n                              :show-actions=\"false\"\n                              :show-selection=\"false\">\n\n                                <template #column-type=\"{ item }\">\n                                    {{ $tc('klarna-payment-order-management.transactionHistory.modal.type.' + item.type) }}\n                                </template>\n\n                                <template #column-value=\"{ item }\">\n                                    {{ item.value|currency(klarnaOrder.currency) }}\n                                </template>\n                            </sw-data-grid>\n                        </div>\n\n                        <div v-else>\n                            {{ $tc('klarna-payment-order-management.transactionHistory.modal.noAmount') }}\n                        </div>\n\n                        <div class=\"klarna-request-failure--order-id\">\n                            <span class=\"text-strong\">\n                                {{ $tc('klarna-payment-order-management.transactionHistory.modal.klarnaOrderId') }}\n                            </span>\n\n                            {{ klarnaOrder.order_id }}\n                        </div>\n\n                        <div class=\"klarna-request-failure--error-code\">\n                            <span class=\"text-strong\">{{ $tc('klarna-payment-order-management.transactionHistory.modal.klarnaErrorCode') }}</span>{{ modalResponse.error_code }}\n                        </div>\n\n                        <div class=\"klarna-request-failure--http-status\">\n                            <span class=\"text-strong\">{{ $tc('klarna-payment-order-management.transactionHistory.modal.httpStatus') }}</span>{{ modalHttpStatus }}\n                        </div>\n\n                        <div class=\"klarna-request-failure--error-messages\">\n                            <span class=\"text-strong\">{{ $tc('klarna-payment-order-management.transactionHistory.modal.klarnaErrorMessages') }}</span>\n\n                            <ul>\n                                <li v-for=\"error_message in modalResponse.error_messages\" class=\"messages-text\">\n                                    <span>{{ error_message }}</span>\n                                </li>\n                            </ul>\n                        </div>\n\n                        <div class=\"klarna-request-failure--correlation-id\">\n                            <span class=\"text-strong\">{{ $tc('klarna-payment-order-management.transactionHistory.modal.klarnaCorrelationId') }}</span>{{ modalResponse.correlation_id }}\n                        </div>\n                    </div>\n                {% endblock %}\n\n                {% block klarna_payment_payment_details_transaction_history_request %}\n                    <div class=\"klarna-request--json\">\n                        <mt-button v-if=\"stringRequest\" size=\"small\" @click=\"toggleRequestVisibility\" variant='secondary'>\n                            <template v-if=\"isRequestShown\">\n                                {{ $tc('klarna-payment-order-management.transactionHistory.modal.RequestButton.Shown') }}\n                            </template>\n\n                            <template v-else>\n                                {{ $tc('klarna-payment-order-management.transactionHistory.modal.RequestButton.NotShown') }}\n                            </template>\n                        </mt-button>\n\n                        <mt-button v-if=\"stringResponse\" size=\"small\" @click=\"toggleResponseVisibility\" variant='secondary'>\n                            <template v-if=\"isResponseShown\">\n                                {{ $tc('klarna-payment-order-management.transactionHistory.modal.ResponseButton.Shown') }}\n                            </template>\n\n                            <template v-else>\n                                {{ $tc('klarna-payment-order-management.transactionHistory.modal.ResponseButton.NotShown') }}\n                            </template>\n                        </mt-button>\n\n                        <sw-code-editor\n                          v-if=\"isRequestShown\"\n                          v-model:value=\"stringRequest\"\n                          mode=\"text\"\n                          :editor-config=\"editorConfig\"\n                          :soft-wraps=\"true\"\n                          :set-focus=\"false\"\n                        />\n                        <sw-code-editor\n                          v-if=\"isResponseShown\"\n                          v-model:value=\"stringResponse\"\n                          mode=\"text\"\n                          :editor-config=\"editorConfig\"\n                          :soft-wraps=\"true\"\n                          :set-focus=\"false\"\n                        />\n                    </div>\n                {% endblock %}\n\n            </sw-modal>\n        {% endblock %}\n    </mt-card>\n{% endblock %}\n","import template from './klarna-transaction-history.html.twig';\nimport './klarna-transaction-history.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('klarna-transaction-history', {\n    template,\n\n    props: {\n        klarnaHistory: {\n            type: Array,\n            required: true\n        },\n\n        klarnaOrder: {\n            type: Object,\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoading: true,\n            hasError: false,\n            showDetailModal: false,\n            modalRequest: {},\n            modalResponse: {},\n            modalHttpStatus: null,\n            isResponseShown: false,\n            isRequestShown: false,\n            stringResponse: '',\n            stringRequest: '',\n            translatedHistory: []\n        };\n    },\n\n    watch: {\n        modalRequest: {\n            deep: true,\n            immediate: true,\n            handler() {\n                if (null === this.modalRequest) {\n                    return;\n                }\n                this.orderAmount = [\n                    { type: 'total', value: this.klarnaOrder.order_amount }\n                ];\n                if (this.modalRequest.captured_amount) {\n                    this.orderAmount.push({ type: 'captured', value: this.modalRequest.captured_amount / 100});\n                }\n                if (this.modalRequest.refunded_amount) {\n                    this.orderAmount.push({ type: 'refunded', value: this.modalRequest.refunded_amount  / 100});\n                }\n            }\n        },\n\n        klarnaHistory: {\n            deep: true,\n            immediate: true,\n            handler() {\n                const translationPath = 'klarna-payment-order-management.transactionHistory.messages.';\n\n                this.translatedHistory = [];\n\n                this.klarnaHistory.forEach((element) => {\n                    const combined = translationPath + element.message;\n                    const translation = this.$tc(combined);\n                    const translatedElement = Object.assign({}, element);\n\n                    if (translation === combined) {\n                        translatedElement.message = `${this.$tc(`${translationPath}Fallback`)} (${element.message})`;\n                    } else {\n                        translatedElement.message = translation;\n                    }\n\n                    this.translatedHistory.push(translatedElement);\n                });\n            }\n        }\n    },\n\n    inject: ['KlarnaPaymentOrderService'],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    computed: {\n        editorConfig() {\n            return {\n                readOnly: true\n            };\n        },\n\n        transactionHistoryColumns() {\n            return [\n                {\n                    property: 'status',\n                    label: this.$tc('klarna-payment-order-management.transactionHistory.columns.status'),\n                    rawData: true\n                },\n                {\n                    property: 'date',\n                    label: this.$tc('klarna-payment-order-management.transactionHistory.columns.date'),\n                    rawData: true\n                },\n                {\n                    property: 'message',\n                    label: this.$tc('klarna-payment-order-management.transactionHistory.columns.message'),\n                    rawData: true\n                }\n            ];\n        },\n\n        detailHistoryAmountColumns() {\n            return [\n                {\n                    property: 'type',\n                    label: this.$tc('klarna-payment-order-management.transactionHistory.modal.typeColumn'),\n                    rawData: 'true'\n                },\n                {\n                    property: 'value',\n                    label: this.$tc('klarna-payment-order-management.transactionHistory.modal.valueColumn'),\n                    rawData: 'true'\n                }\n            ];\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        }\n    },\n\n    methods: {\n        openDetailModal(item) {\n            const parsedResponse = JSON.parse(item.response);\n            const parsedRequest = JSON.parse(item.request);\n\n            this.showDetailModal = true;\n            this.success = !item.error;\n            this.detailModalTitle = `${this.$tc('klarna-payment-order-management.detailModal.title')} - ${item.message}`;\n            this.modalRequest = parsedRequest;\n            this.modalResponse = parsedResponse;\n            this.modalHttpStatus = item.statusCode ? item.statusCode : null;\n\n            if (Object.keys(parsedResponse).length !== 0 && parsedResponse.constructor === Object) {\n                this.stringResponse = JSON.stringify(parsedResponse, null, 2).trimLeft();\n            }\n\n            if (Object.keys(parsedRequest).length !== 0 && parsedRequest.constructor === Object) {\n                this.stringRequest = JSON.stringify(parsedRequest, null, 2).trimLeft();\n            }\n        },\n\n        closeDetailModal() {\n            this.showDetailModal = false;\n            this.modalRequest = null;\n            this.modalResponse = null;\n            this.stringResponse = '';\n            this.stringRequest = '';\n            this.isRequestShown = false;\n            this.isResponseShown = false;\n        },\n\n        toggleResponseVisibility() {\n            this.isResponseShown = !this.isResponseShown;\n            this.isRequestShown = false;\n        },\n\n        toggleRequestVisibility() {\n            this.isRequestShown = !this.isRequestShown;\n            this.isResponseShown = false;\n        }\n    }\n});\n","import './extension/sw-order-detail';\nimport './extension/sw-order-detail-base';\n\nimport './page/klarna-payment-tab';\n\nimport './component/klarna-capture-button';\nimport './component/klarna-order-items';\nimport './component/klarna-payment-authorization';\nimport './component/klarna-payment-cancel';\nimport './component/klarna-refund-button';\nimport './component/klarna-release-amount';\nimport './component/klarna-transaction-history';\n\nimport deDE from './snippet/de_DE.json';\nimport enGB from './snippet/en_GB.json';\n\nconst { Module } = Shopware;\n\nModule.register('klarna-payment-order-management', {\n    type: 'plugin',\n    name: 'KlarnaPayment',\n    title: 'klarna-payment-order-management.general.title',\n    description: 'klarna-payment-order-management.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n\n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.order.detail') {\n            currentRoute.children.push({\n                component: 'klarna-payment-tab',\n                name: 'klarna-payment-order-management.payment.detail',\n                isChildren: true,\n                meta: {\n                    parentPath: 'sw.order.index'\n                },\n                path: '/sw/order/detail/:id/klarna/:transaction'\n            });\n        }\n\n        next(currentRoute);\n    }\n});\n","const { Component } = Shopware;\n\nComponent.override('sw-system-config', {\n\n    computed: {\n        typesWithMapInheritanceSupport() {\n            let types = this.$super('typesWithMapInheritanceSupport');\n\n            if (this.domain === 'KlarnaPayment.settings') {\n                types.push('single-select');\n                types.push('multi-select');\n            }\n\n            return types;\n        }\n    },\n\n    methods: {\n        onSalesChannelChanged(salesChannelId) {\n            this.$super('onSalesChannelChanged', salesChannelId);\n\n            this.$emit('saleschannel-changed', this.currentSalesChannelId);\n        },\n\n        hasMapInheritanceSupport(element) {\n            const customComponentNames = [\n                'klarna-disable-address-validation-field',\n                'klarna-select-salutation',\n                'klarna-select-delivery-state',\n                'klarna-select-order-state',\n                'klarna-select-payment-codes'\n            ];\n\n            const componentName = element.config ? element.config.componentName : undefined;\n\n            if (customComponentNames.includes(componentName)) {\n                return true;\n            }\n\n            return this.$super('hasMapInheritanceSupport', element);\n        },\n    }\n});\n\n","const { Component } = Shopware;\n\nComponent.override('sw-form-field-renderer', {\n    computed: {\n        optionTranslations() {\n            if (['klarna-select-salutation', 'klarna-select-payment-codes', 'klarna-select-delivery-state', 'klarna-select-order-state'].includes(this.componentName)) {\n                if (!this.config.hasOwnProperty('options')) {\n                    return {};\n                }\n\n                const options = [];\n                let labelProperty = 'label';\n\n                // Use custom label property if defined\n                if (this.config.hasOwnProperty('labelProperty')) {\n                    labelProperty = this.config.labelProperty;\n                }\n\n                this.config.options.forEach(option => {\n                    const translation = this.getTranslations(\n                        'options',\n                        option,\n                        [labelProperty],\n                    );\n                    // Merge original option with translation\n                    const translatedOption = { ...option, ...translation };\n                    options.push(translatedOption);\n                });\n\n                return { options };\n            }\n\n            return this.$super('optionTranslations');\n        },\n    }\n});\n\n"],"names":["Application","ApiService","KlarnaPaymentConfigurationService","httpClient","loginService","apiEndpoint","credentials","endpoint","payload","response","region","container","initContainer","KlarnaPaymentOrderService","orderId","klarnaOrderId","salesChannel","request","orderTransactionId","headers","KlarnaPaymentOrderUpdateService","versionId","KlarnaPaymentWizardService","tableData","template$d","Component","Filter","template","Criteria","criteria","template$c","template$b","value","modalText","templateDefault","templateWithInheritance","Mixin","Context","version","match","me","searchResult","paymentMethod","salesChannelDomain","field","salesChannelId","inheritedConfig","config","isSaveMode","possibleFailures","regionPostfix","data","element","template$9","Module","configuration","deDE","enGB","template$8","orderRepository","orderCriteria","order","orderTransaction","template$7","repository","transaction","klarnaItem","lineItem","subComponentLoading","template$6","amount","selection","orderLines","orderItem","copy","taxRate","reference","selected","quantity","description","template$5","currency","price","disabled","columns","item","newAmount","template$4","template$3","template$2","orderReturnRepository","productNumber","result","orderReturn","orderReturnLineItem","template$1","translationPath","combined","translation","translatedElement","parsedResponse","parsedRequest","next","currentRoute","types","customComponentNames","componentName","options","labelProperty","option","translatedOption"],"mappings":"AAAA,KAAM,CAAEA,YAAAA,CAAa,EAAG,SAClBC,EAAa,SAAS,QAAQ,WAEpC,MAAMC,UAA0CD,CAAW,CACvD,YAAYE,EAAYC,EAAcC,EAAc,iBAAkB,CAClE,MAAMF,EAAYC,EAAcC,CAAW,CACnD,CAEI,oBAAoBC,EAAaC,EAAU,CACvC,MAAMC,EAAU,CAAC,GAAGF,EAAa,SAAAC,CAAQ,EAEzC,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,wBAChCC,EACA,CACI,QAAS,KAAK,gBAAe,CACjD,CACA,EACa,KAAMC,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,mBAAoB,CAChB,OAAO,KAAK,gBAAgB,IAAI,CACxC,CAEI,mBAAoB,CAChB,OAAO,KAAK,gBAAgB,IAAI,CACxC,CAEI,gBAAgBC,EAAQ,CACpB,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAgB,CAAA,UAAUA,CAAM,kBAChD,CAAE,EACF,CACI,QAAS,KAAK,gBAAe,CACjD,CACA,EACa,KAAMD,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CACA,CAEAT,EAAY,mBAAmB,oCAAsCW,GAAc,CAC/E,MAAMC,EAAgBZ,EAAY,aAAa,MAAM,EAErD,OAAO,IAAIE,EAAkCU,EAAc,WAAYD,EAAU,YAAY,CACjG,CAAC,ECnDD,KAAM,CAAEX,YAAAA,CAAa,EAAG,SAClBC,EAAa,SAAS,QAAQ,WAEpC,MAAMY,UAAkCZ,CAAW,CAC/C,YAAYE,EAAYC,EAAcC,EAAc,iBAAkB,CAClE,MAAMF,EAAYC,EAAcC,CAAW,CACnD,CAEI,eAAeS,EAASC,EAAeC,EAAc,CACjD,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,eAChC,CACI,SAAUF,EACV,gBAAiBC,EACjB,aAAcC,CACjB,EACD,CACI,QAAS,KAAK,gBAAe,CACjD,CACA,EACa,KAAMP,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,aAAaQ,EAAS,CAClB,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,iBAChCA,EACA,CACI,QAAS,KAAK,gBAAe,CACjD,CACA,EACa,KAAMR,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,YAAYQ,EAAS,CACjB,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,gBAChCA,EACA,CACI,QAAS,KAAK,gBAAe,CACjD,CACA,EACa,KAAMR,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,cAAcS,EAAoBJ,EAASC,EAAeC,EAAc,CACpE,MAAMG,EAAU,KAAK,gBAAiB,EAEtC,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,kBAChC,CACI,mBAAoBD,EACpB,SAAUJ,EACV,gBAAiBC,EACjB,aAAcC,CACjB,EACD,CACI,QAASG,CAC7B,CACA,EACa,KAAMV,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,8BAA8BK,EAASC,EAAeC,EAAc,CAChE,MAAMG,EAAU,KAAK,gBAAiB,EAEtC,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,mCAChC,CACI,SAAUL,EACV,gBAAiBC,EACjB,aAAcC,CACjB,EACD,CACI,QAASG,CAC7B,CACA,EACa,KAAMV,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,oBAAoBK,EAASC,EAAe,CACxC,MAAMI,EAAU,KAAK,gBAAiB,EAEtC,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,wBAChC,CACI,SAAUL,EACV,gBAAiBC,CACpB,EACD,CACI,QAASI,CAC7B,CACA,EACa,KAAMV,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CACA,CAEAT,EAAY,mBAAmB,4BAA8BW,GAAc,CACvE,MAAMC,EAAgBZ,EAAY,aAAa,MAAM,EAErD,OAAO,IAAIa,EAA0BD,EAAc,WAAYD,EAAU,YAAY,CACzF,CAAC,ECvHD,KAAM,CAAEX,YAAAA,CAAa,EAAG,SAClBC,EAAa,SAAS,QAAQ,WAEpC,MAAMmB,UAAwCnB,CAAW,CACrD,YAAYE,EAAYC,EAAcC,EAAc,iBAAkB,CAClE,MAAMF,EAAYC,EAAcC,CAAW,CACnD,CAEI,YAAYS,EAASO,EAAW,CAC5B,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,gBAChC,CACI,QAASP,CACZ,EACD,CACI,QAAS,KAAK,gBAAgBM,EAAgC,iBAAiBC,CAAS,CAAC,CAC7G,CACA,EACa,KAAMZ,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CACA,CAEAT,EAAY,mBAAmB,kCAAoCW,GAAc,CAC7E,MAAMC,EAAgBZ,EAAY,aAAa,MAAM,EAErD,OAAO,IAAIoB,EAAgCR,EAAc,WAAYD,EAAU,YAAY,CAC/F,CAAC,EC7BD,KAAM,CAAEX,YAAAA,CAAa,EAAG,SAClBC,EAAa,SAAS,QAAQ,WAEpC,MAAMqB,UAAmCrB,CAAW,CAChD,YAAYE,EAAYC,EAAcC,EAAc,iBAAkB,CAClE,MAAMF,EAAYC,EAAcC,CAAW,CACnD,CAEI,qBAAqBkB,EAAW,CAC5B,OAAO,KAAK,WACP,KACG,WAAW,KAAK,eAAc,CAAE,yBAChC,CACI,UAAW,KAAK,UAAUA,CAAS,CACtC,EACD,CACI,QAAS,KAAK,gBAAe,CACjD,CACA,EACa,KAAMd,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CAEI,WAAY,CACR,OAAO,KAAK,WACP,IAAI,WAAW,KAAK,eAAc,CAAE,cACjC,CACI,QAAS,KAAK,gBAAe,CAChC,CAAA,EACJ,KAAMA,GACIR,EAAW,eAAeQ,CAAQ,CAC5C,CACb,CACA,CAEAT,EAAY,mBAAmB,6BAA+BW,GAAc,CACxE,MAAMC,EAAgBZ,EAAY,aAAa,MAAM,EAErD,OAAO,IAAIsB,EAA2BV,EAAc,WAAYD,EAAU,YAAY,CAC1F,CAAC,ECxCD,MAAea,EAAA,oICET,WAAEC,EAAW,OAAAC,CAAM,EAAK,SAE9BD,EAAU,SAAS,6BAA8B,CACjD,SAAIE,EAEA,SAAU,CACN,aAAc,CACV,OAAOD,EAAO,UAAU,OAAO,CAClC,CACT,CACA,CAAC,ECZD,KAAM,CAAED,UAAAA,CAAW,EAAG,SAChB,UAAEG,CAAQ,EAAK,SAAS,KAE9BH,EAAU,OAAO,4BAA6B,0BAA2B,CACrE,MAAO,CACH,SAAU,CACN,KAAM,OACN,SAAU,GACV,SAAU,CACN,MAAMI,EAAW,IAAID,EAAS,EAAG,GAAG,EAEpC,OAAAC,EAAS,UACLD,EAAS,OACL,6BACA,aACxB,CACiB,EAEMC,CACvB,CACA,CACA,CACA,CAAC,ECtBD,KAAM,CAAEJ,UAAAA,CAAW,EAAG,SAChB,UAAEG,CAAQ,EAAK,SAAS,KAE9BH,EAAU,OAAO,+BAAgC,0BAA2B,CACxE,MAAO,CACH,SAAU,CACN,KAAM,OACN,SAAU,GACV,SAAU,CACN,MAAMI,EAAW,IAAID,EAAS,EAAG,GAAG,EAEpC,OAAAC,EAAS,UACLD,EAAS,OACL,6BACA,sBACxB,CACiB,EAEMC,CACvB,CACA,CACA,CACA,CAAC,ECtBD,MAAeC,EAAA,moDCET,CAAEL,UAAAA,CAAW,EAAG,SAEtBA,EAAU,OAAO,8BAA+B,kBAAmB,CAC/DE,SAAAA,CACJ,CAAC,ECND,KAAM,CAAEF,UAAAA,CAAW,EAAG,SAChB,UAAEG,CAAQ,EAAK,SAAS,KAE9BH,EAAU,OAAO,2BAA4B,0BAA2B,CACpE,MAAO,CACH,SAAU,CACN,KAAM,OACN,SAAU,GACV,SAAU,CACN,OAAO,IAAIG,EAAS,EAAG,GAAG,CAC1C,CACA,CACA,CACA,CAAC,ECbD,MAAeG,EAAA,wjCCET,CAAEN,UAAAA,CAAW,EAAG,SAEtBA,EAAU,SAAS,0CAA2C,CAC9D,SAAIE,EAEA,aAAc,SAAS,aAEvB,MAAO,CAAC,cAAc,EAEtB,MAAO,CACH,MAAO,CACH,KAAM,QACN,SAAU,EACb,EAED,QAAS,CACL,KAAM,QACN,SAAU,EACb,CACJ,EAED,SAAU,CACN,cAAe,CACX,OAAI,OAAO,KAAK,SAAY,UACjB,KAAK,QAGT,KAAK,KACf,EAED,oBAAqB,CAEjB,OAAI,SAAS,QAAQ,SAAS,UAAU,EAC7B,IAIX,SAAS,MAAM,MAAM,KACjB,kBAEA,mHACH,EAEM,GACV,CACJ,EAED,QAAS,CACL,gBAAgBK,EAAO,CAChBA,IACC,KAAK,kCAAoC,GAEzC,WAAW,IAAM,CAEb,IAAIC,EAAY,SAAS,cAAc,kEAAkE,EACzGA,EAAU,UAAYA,EAAU,UAAY,+HAC/C,EAAE,GAAG,GAGV,KAAK,MAAM,eAAgBD,CAAK,CACnC,EAED,sCAAsC,CAClC,KAAK,kCAAoC,GAEzC,KAAK,MAAM,eAAgB,EAAK,CACnC,EAED,mCAAmC,CAC/B,KAAK,MAAM,eAAgB,EAAI,EAE/B,KAAK,kCAAoC,EACrD,CACK,EAED,MAAO,CACH,MAAO,CACH,kCAAmC,EACtC,CACJ,CACL,CAAC,EClFD,MAAeE,EAAA,gnHCAAC,EAAA,85HCIT,CAAA,UAAEV,EAAWW,MAAAA,UAAOC,CAAO,EAAK,SAChC,UAAET,CAAQ,EAAK,SAAS,KAExBU,EAAUD,EAAQ,IAAI,OAAO,QAC7BE,EAAQD,EAAQ,MAAM,mDAAmD,EAE/E,IAAIX,EAAWO,EAGXK,GAAS,SAASA,EAAM,CAAC,EAAG,EAAE,IAAM,IAAM,SAASA,EAAM,CAAC,EAAG,EAAE,EAAI,GAAK,SAASA,EAAM,CAAC,EAAG,EAAE,EAAI,KACjGZ,EAAWQ,GAGfV,EAAU,SAAS,0BAA2B,CAC9C,SAAIE,EAEA,OAAQ,CACJS,EAAM,UAAU,cAAc,EAC9BA,EAAM,UAAU,mBAAmB,CACtC,EAED,OAAQ,CACJ,oBACA,mCACH,EAED,MAAO,CACH,MAAO,CACH,eAAgB,GAChB,eAAgB,GAChB,cAAe,CAAE,EACjB,UAAW,GACX,UAAW,GACX,iBAAkB,GAClB,iBAAkB,GAClB,OAAQ,CAAE,EACV,eAAgB,CAAE,EAClB,+BAAgC,CAAE,EAClC,aAAc,0BACd,gCAAiC,CAAE,EACnC,0CAA2C,EAC9C,CACJ,EAED,UAAW,CACP,MAAO,CACH,MAAO,KAAK,aAAY,CAC3B,CACJ,EAED,SAAU,CACN,KAAK,iBAAkB,CAC1B,EAED,SAAU,CACN,yBAA0B,CACtB,OAAO,KAAK,kBAAkB,OAAO,gBAAgB,CACxD,EAED,8BAA+B,CAC3B,OAAO,KAAK,kBAAkB,OAAO,sBAAsB,CAC9D,EAED,eAAgB,CACZ,OAAIG,EAAM,CAAC,GAAK,EACL,2BAGJ,0BACnB,CACK,EAED,QAAS,CACL,kBAAmB,CACf,MAAMC,EAAK,KAEX,KAAK,mCAAoC,EAEzC,KAAK,wBAAwB,OAAO,IAAIZ,EAAYS,EAAQ,GAAG,EAAE,KAAMI,GAAiB,CACpFA,EAAa,QAAUC,GAAkB,CACrCF,EAAG,eAAe,KAAK,CACnB,MAAOE,EAAc,GACrB,MAAOA,EAAc,IAC7C,CAAqB,EAEGA,EAAc,6BAA+B,qCAC7CF,EAAG,+BAA+B,KAAK,CACnC,MAAOE,EAAc,GACrB,MAAOA,EAAc,IACjD,CAAyB,CAEzB,CAAmB,CACnB,CAAa,EAED,KAAK,kCAAkC,oBAAoB,KAAKjC,GAAY,CACxE+B,EAAG,eAAiB/B,EAAS,KAAK,IAClC+B,EAAG,cAAc,KAAKA,EAAG,cAAc,CACvD,CAAa,EAED,KAAK,kCAAkC,oBAAoB,KAAK/B,GAAY,CACxE+B,EAAG,eAAiB/B,EAAS,KAAK,IAClC+B,EAAG,cAAc,KAAKA,EAAG,cAAc,CACvD,CAAa,CACJ,EAED,oCAAqC,CACjC,MAAMA,EAAK,KAEX,IAAIX,EAAW,IAAID,EACnBC,EAAS,UAAUD,EAAS,IAAI,MAAO,CAACA,EAAS,SAAS,MAAO,UAAU,CAAC,CAAC,CAAC,EAE1E,KAAK,MAAM,cAAgB,KAAK,MAAM,aAAa,uBACnDC,EAAS,UAAUD,EAAS,OAAO,iBAAkB,KAAK,MAAM,aAAa,qBAAqB,CAAC,EAGvGY,EAAG,gCAAkC,CAAE,EAEvC,KAAK,6BAA6B,OAAOX,EAAUQ,EAAQ,GAAG,EAAE,KAAMI,GAAiB,CACnFA,EAAa,QAAUE,GAAuB,CAC1CH,EAAG,gCAAgC,KAAKG,EAAmB,GAAG,CAClF,CAAmB,CACnB,CAAa,CACJ,EAED,eAAeC,EAAO,CAClB,GAAI,KAAK,MAAM,eAAiB,OAC5B,OAAO,KAGX,MAAMC,EAAkB,KAAK,MAAM,aAAa,sBAC1CC,EAAkB,KAAK,MAAM,aAAa,iBAAiB,KAAK,KAAK,aAAeF,CAAK,EAE/F,GAAIC,IAAmB,KAEnB,OAAOC,EAGX,MAAMC,EAAS,KAAK,OAAO,KAAK,aAAeH,CAAK,EAEpD,OAAIG,GACOD,CAId,EAED,QAAS,CACL,KAAK,gBAAgB,EAAK,CAC7B,EAED,gBAAgBE,EAAY,CACxB,MAAMR,EAAK,KAEX,IAAIS,EAAmBT,EAAG,cAAc,OAExCA,EAAG,cAAc,QAASjC,GAAa,CAC/ByC,GACA,KAAK,iBAAmB,GACxB,KAAK,UAAY,KAEjBR,EAAG,iBAAmB,GACtBA,EAAG,UAAY,IAGnB,MAAMlC,EAAc,CAChB,SAAUkC,EAAG,eAAe,UAAU,EACtC,aAAcA,EAAG,MAAM,aAAa,qBACvC,EAED,IAAIU,EAAiB3C,IAAaiC,EAAG,eAAiB,KAAO,GAM7D,GALAlC,EAAY,YAAckC,EAAG,eAAe,cAAgBU,CAAa,EACzE5C,EAAY,YAAckC,EAAG,eAAe,cAAgBU,CAAa,EACzE5C,EAAY,gBAAkBkC,EAAG,eAAe,kBAAoBU,CAAa,EACjF5C,EAAY,gBAAkBkC,EAAG,eAAe,kBAAoBU,CAAa,EAE7E,CAACV,EAAG,sBAAsBlC,CAAW,EAAG,CACxC,EAAE2C,EAEFT,EAAG,sBAAsBQ,EAAYC,CAAgB,EAErD,MACpB,CAEgBT,EAAG,kCAAkC,oBAAoBlC,EAAaC,CAAQ,EAAE,KAAK,IAAM,CACvFiC,EAAG,0BAA0B,CACzB,MAAOA,EAAG,IAAI,iEAAiE,EAC/E,QAASA,EAAG,IAAI,iEAAmEjC,EAAW,SAAS,CAC/H,CAAqB,EAEGyC,EACAR,EAAG,iBAAmB,GAEtBA,EAAG,iBAAmB,GAG1B,EAAES,CACtB,CAAiB,EAAE,MAAM,IAAM,CACXT,EAAG,wBAAwB,CACvB,MAAOA,EAAG,IAAI,+DAA+D,EAC7E,QAASA,EAAG,IAAI,iEAAmEjC,EAAW,SAAWD,EAAY,SAAW,OAAS,OAAO,CACxK,CAAqB,CACrB,CAAiB,EAAE,QAAQ,IAAM,CACbkC,EAAG,sBAAsBQ,EAAYC,CAAgB,CACzE,CAAiB,CACjB,CAAa,CACJ,EAED,sBAAsBD,EAAYC,EAAkB,CAChD,MAAMT,EAAK,KAEPQ,GACAR,EAAG,UAAY,GAEXS,GAAoB,GACpBT,EAAG,MAAM,aAAa,QAAS,GAGnCA,EAAG,UAAY,EAEtB,EAED,sBAAsBW,EAAM,CACxB,OAAIA,EAAK,SACGA,EAAK,iBAAmBA,EAAK,gBAAgB,OAAS,GACtDA,EAAK,iBAAmBA,EAAK,gBAAgB,OAAS,EAG1DA,EAAK,aAAeA,EAAK,YAAY,OAAS,GAC9CA,EAAK,aAAeA,EAAK,YAAY,OAAS,CACzD,EAED,QAAS,CACL,KAAK,gBAAgB,EAAI,CAC5B,EAED,eAAeJ,EAAQ,CACnB,KAAK,OAASA,EAEd,KAAK,0CAA4C,CAAC,KAAK,eAAe,0BAA0B,EAEhG,KAAK,iBAAkB,CAC1B,EAED,kBAAmB,CACO,KAAK,eAAe,eAAe,GAGrD,KAAK,QAAQ,KAAK,CAAE,KAAM,qCAAqC,CAAE,CAExE,EAED,gBAAiB,CACb,KAAK,iBAAmB,EAC3B,EAED,gBAAiB,CACb,KAAK,iBAAmB,EAC3B,EAED,QAAQK,EAASL,EAAQ,CACrB,OAAIA,IAAW,KAAK,SAChB,KAAK,OAASA,GAGXK,CACV,EAED,UAAW,CACP,KAAK,QAAQ,KAAK,CAAE,KAAM,qCAAqC,CAAE,CACpE,EAKD,aAAaA,EAASL,EAAQ,CAK1B,OAJIK,EAAQ,OAAS,GAAG,KAAK,YAAY,iBAIrCA,EAAQ,OAAS,GAAG,KAAK,YAAY,2BAC9B,GAGPA,EAAQ,OAAS,GAAG,KAAK,YAAY,wBAEjCL,EAAO,GAAG,KAAK,YAAY,yBAAyB,GAAK,KAClD,KAAK,eAAe,yBAAyB,IAAM,GAGvDA,EAAO,GAAG,KAAK,YAAY,yBAAyB,IAAM,GAEjEK,EAAQ,OAAS,GAAG,KAAK,YAAY,yBAEjCL,EAAO,GAAG,KAAK,YAAY,yBAAyB,GAAK,KAClD,KAAK,eAAe,yBAAyB,IAAM,GAGvDA,EAAO,GAAG,KAAK,YAAY,yBAAyB,IAAM,GAGjEK,EAAQ,KAAK,QAAQ,KAAK,aAAc,EAAE,EAAE,QAAQ,eAAe,IAAM,EAErEL,EAAO,GAAG,KAAK,YAAY,+BAA+B,GAAK,KACxD,KAAK,eAAe,+BAA+B,IAAM,GAG7DA,EAAO,GAAG,KAAK,YAAY,+BAA+B,IAAM,GAGvEK,EAAQ,OAAS,GAAG,KAAK,YAAY,qBAC9B,KAAK,eAAe,kBAAkB,IAAM,cAEnDA,EAAQ,OAAS,GAAG,KAAK,YAAY,wBAC9B,KAAK,eAAe,kBAAkB,IAAM,iBAGnDA,EAAQ,OAAS,GAAG,KAAK,YAAY,oBAC9B,KAAK,eAAe,iBAAiB,IAAM,cAElDA,EAAQ,OAAS,GAAG,KAAK,YAAY,uBAC9B,KAAK,eAAe,iBAAiB,IAAM,iBAGlDA,EAAQ,OAAS,GAAG,KAAK,YAAY,0BAC9BL,EAAO,GAAG,KAAK,YAAY,0BAA0B,EAE5DK,EAAQ,OAAS,GAAG,KAAK,YAAY,uBAC9BL,EAAO,GAAG,KAAK,YAAY,uBAAuB,EAGzDK,EAAQ,OAAS,GAAG,KAAK,YAAY,sBAC9BL,EAAO,GAAG,KAAK,YAAY,uBAAuB,EAEzDK,EAAQ,OAAS,GAAG,KAAK,YAAY,4BAC9BL,EAAO,GAAG,KAAK,YAAY,uBAAuB,EAEzDK,EAAQ,OAAS,GAAG,KAAK,YAAY,sBAC9BL,EAAO,GAAG,KAAK,YAAY,uBAAuB,EAGtD,EACV,CACT,CACA,CAAC,EC3VD,MAAeM,EAAA,q1GCGT,WAAE5B,EAAS,MAAEW,CAAK,EAAK,SAE7BX,EAAU,SAAS,wBAAyB,CAC5C,SAAIE,EAEA,OAAQ,CACJS,EAAM,UAAU,cAAc,EAC9BA,EAAM,UAAU,mBAAmB,CACtC,EAED,OAAQ,CAAC,4BAA4B,EAErC,MAAO,CACH,MAAO,CACH,UAAW,GACX,sBAAuB,KACvB,gBAAiB,KACjB,QAAS,EACT,QAAS,EACT,cAAe,GACf,cAAe,CAAE,EACjB,SAAU,KACV,KAAM,EACN,YAAa,OACb,2BAA4B,CACxB,CAAE,MAAO,KAAK,IAAI,sDAAsD,EAAG,MAAO,cAAe,IAAK,aAAe,EACrH,CAAE,MAAO,KAAK,IAAI,mDAAmD,EAAG,MAAO,WAAY,IAAK,UAAU,CAC1H,CACS,CACJ,EAED,SAAU,CACN,KAAK,iBAAkB,CAC1B,EAED,QAAS,CACL,kBAAmB,CACf,KAAK,cAAe,EACpB,KAAK,iBAAkB,EACvB,KAAK,cAAe,CACvB,EAED,eAAgB,CACZ,KAAK,2BAA2B,UAAW,EAAC,KAAM3B,GAAa,CAC3D,KAAK,cAAgBA,EAAS,KAAK,cACnC,KAAK,cAAgBA,EAAS,KAAK,aACnD,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,yDAAyD,EACzE,QAAS,KAAK,IAAI,+DAA+D,CACrG,CAAiB,CACjB,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,UAAY,EACjC,CAAa,CACJ,EAED,kBAAmB,CACf,KAAK,QAAQ,SAAS,CAClB,SAAU,KAAK,cAAc,KAAK,IAAI,CACtD,CAAa,CACJ,EAED,eAAgB,CACZ,KAAK,SAAW,KAAK,QAAQ,iBAAgB,EAAK,KAAK,eAC1D,EAED,QAAS,CACL,KAAK,KAAO,KAAK,KAAO,EAEpB,KAAK,KAAO,KAAK,UACjB,KAAK,KAAO,KAAK,QAExB,EAED,QAAS,CACL,KAAK,KAAO,KAAK,KAAO,EAEpB,KAAK,KAAO,KAAK,UACjB,KAAK,KAAO,KAAK,QAExB,EAED,UAAW,CACP,KAAK,UAAY,GAEjB,KAAK,2BAA2B,qBAAqB,KAAK,aAAa,EAAE,KAAK,IAAM,CAChF,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,2DAA2D,EAC3E,QAAS,KAAK,IAAI,iEAAiE,CACvG,CAAiB,EAED,KAAK,QAAQ,KAAK,CAAE,KAAM,uCAAuC,CAAE,CACnF,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,yDAAyD,EACzE,QAAS,KAAK,IAAI,+DAA+D,CACrG,CAAiB,CACjB,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,UAAY,EACjC,CAAa,CACJ,EAED,sBAAsBoC,EAAgB,CAClC,KAAK,sBAAwBA,CACzC,CACA,CACA,CAAC,8pUChGK,CAAES,OAAAA,CAAQ,EAAG,SAEnB,IAAIC,EAAgB,CAChB,KAAM,SACN,KAAM,gBACN,MAAO,4CACP,YAAa,kDACb,QAAS,QACT,cAAe,QAEf,SAAU,CACN,QAASC,EACT,QAASC,CACZ,EAED,OAAQ,CACJ,SAAU,CACN,UAAW,0BACX,KAAM,WACN,KAAM,CACF,WAAY,mBAC5B,CACS,EACD,OAAQ,CACJ,UAAW,wBACX,KAAM,SACN,KAAM,CACF,WAAY,mBAC5B,CACA,CACK,EAED,aAAc,CACV,KAAQ,+BACR,GAAQ,wCACR,MAAQ,4CACR,MAAQ,UACR,cAAe,4BACvB,CACA,EAEAH,EAAO,SAAS,+BAAgCC,CAAa,ECtD7D,MAAeG,EAAA,8vBCGT,WAAEjC,EAAS,QAAEY,CAAO,EAAK,SACzB,UAAET,CAAQ,EAAK,SAAS,KAE9BH,EAAU,SAAS,kBAAmB,CACtC,SAAIE,EAEA,MAAO,CACH,MAAO,CACH,mBAAoB,CAAA,CACvB,CACJ,EAED,SAAU,CACN,YAAa,CAGT,OAAO,KAAK,mBAAmB,SAAW,GAAK,KAAK,OAAO,OAF7C,gDAG1B,CACK,EAED,MAAO,CACH,QAAS,CACL,KAAM,GACN,SAAU,CACN,KAAK,mBAAqB,CAAE,EAEvB,KAAK,SAIV,KAAK,cAAe,CACvB,EACD,UAAW,EACvB,CACK,EAED,QAAS,CACL,eAAgB,CACZ,MAAMgC,EAAkB,KAAK,kBAAkB,OAAO,OAAO,EAEvDC,EAAgB,IAAIhC,EAAS,EAAG,CAAC,EACvC,OAAAgC,EAAc,eAAe,cAAc,EAC3CA,EAAc,eAAe,gCAAgC,EAEtDD,EAAgB,IAAI,KAAK,OAAO,OAAO,GAAItB,EAAQ,IAAKuB,CAAa,EAAE,KAAMC,GAAU,CAC1F,KAAK,uBAAuBA,CAAK,CACjD,CAAa,CACJ,EAED,uBAAuBA,EAAO,CAC1BA,EAAM,aAAa,QAASC,GAAqB,CACxCA,EAAiB,cAIjBA,EAAiB,aAAa,iBAInC,KAAK,mBAAmB,KAAK,CACzB,YAAaA,EAAiB,GAC9B,UAAWA,EAAiB,kBAAkB,gBAAkB,WACpF,CAAiB,CACjB,CAAa,CACb,CACA,CACA,CAAC,ECrED,KAAM,WAAErC,EAAS,MAAEW,EAAK,EAAK,SAE7BX,EAAU,SAAS,uBAAwB,CACvC,OAAQ,CAAC,iCAAiC,EAE1C,OAAQ,CACJW,GAAM,UAAU,cAAc,CACjC,EAED,QAAS,CACL,aAAc,CACV,KAAK,MAAM,iBAAkB,EAAI,EACjC,KAAK,MAAM,iBAAkB,EAAK,EAElC,KAAK,gCAAgC,YAAY,KAAK,QAAS,KAAK,eAAe,SAAS,EAAE,KAAK,SAAY,CAC3G,MAAM,KAAK,OAAO,aAAa,CAC/C,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,2DAA2D,EAC3E,QAAS,KAAK,IAAI,6DAA6D,CACnG,CAAiB,EAED,KAAK,eAAe,UAAY,SAAS,QAAQ,IAAI,cACrD,KAAK,iBAAkB,CACvC,CAAa,CACb,CACA,CACA,CAAC,EC3BD,MAAe2B,GAAA,+9FCGT,CAAA,UAAEtC,GAAWW,MAAAA,WAAOC,EAAO,EAAK,SAChC,UAAET,EAAQ,EAAK,SAAS,KAE9BH,GAAU,SAAS,qBAAsB,CACzC,SAAIE,GAEA,MAAO,CACH,MAAO,CACH,WAAY,GACZ,YAAa,GACb,UAAW,GACX,sBAAuB,GACvB,SAAU,GACV,YAAa,CAAE,EACf,gBAAiB,KACjB,SAAU,GACV,cAAe,CAAE,EACjB,YAAa,CAAA,CAChB,CACJ,EAED,SAAU,CACN,KAAK,iBAAkB,CAC1B,EAED,WAAY,CACR,KAAK,mBAAoB,CAC5B,EAED,MAAO,CACH,QAAW,CACP,KAAK,SAAU,CAC3B,CACK,EAED,OAAQ,CACJS,GAAM,UAAU,cAAc,CACjC,EAED,OAAQ,CACJ,4BACA,mBACH,EAED,SAAU,CACN,gBAAiB,CACb,OAAO,SAAS,OAAO,UAAU,UAAU,CAC9C,CACJ,EAED,QAAS,CACL,kBAAmB,CACf,SAAS,MAAM,SAAS,GAAG,kBAAmB,KAAK,QAAQ,EAE3D,KAAK,QAAQ,SAAS,CAClB,SAAU,KAAK,cAAc,KAAK,IAAI,CACtD,CAAa,EAED,KAAK,cAAe,EACpB,KAAK,SAAU,CAClB,EAED,oBAAqB,CACjB,SAAS,MAAM,SAAS,IAAI,kBAAmB,KAAK,QAAQ,CAC/D,EAED,eAAgB,CACZ,KAAK,SAAW,KAAK,QAAQ,iBAAgB,EAAK,KAAK,eAC1D,EAED,UAAW,CACP,GAAG,KAAK,OAAO,OAAS,iDACpB,OAEJ,MAAMI,EAAK,KAEXA,EAAG,UAAY,GACfA,EAAG,SAAW,GAEd,MAAMwB,EAAa,KAAK,kBAAkB,OAAO,mBAAmB,EAE9DnC,EAAW,IAAID,GAAS,EAAG,CAAC,EAClC,OAAAC,EAAS,eAAe,OAAO,EAC/BA,EAAS,eAAe,iBAAiB,EAElCmC,EAAW,IAAI,KAAK,OAAO,OAAO,YAAa3B,GAAQ,IAAKR,CAAQ,EAAE,KAAMoC,GAAgB,CAC/F,MAAMlD,EAAgBkD,EAAY,aAAa,gBACzCjD,EAAeiD,EAAY,MAAM,eAEvCzB,EAAG,MAAM,oBAAqByB,EAAY,MAAM,WAAW,EAE3DzB,EAAG,0BAA0B,eAAeyB,EAAY,MAAM,GAAIlD,EAAeC,CAAY,EAAE,KAAMP,GAAa,CAC9G+B,EAAG,SAAW,GACdA,EAAG,YAAc,GAEjBA,EAAG,YAAc/B,EAAS,MAC1B+B,EAAG,oCAAoCyB,EAAY,KAAK,EAExDzB,EAAG,YAAY,aAAexB,EAC9BwB,EAAG,YAAY,UAAYyB,EAAY,MAAM,GAC7CzB,EAAG,YAAY,mBAAqB,KAAK,OAAO,OAAO,YAEvDA,EAAG,cAAgB/B,EAAS,kBAChD,CAAiB,EAAE,MAAM,IAAM,CACX+B,EAAG,wBAAwB,CACvB,MAAOA,EAAG,IAAI,yDAAyD,EACvE,QAASA,EAAG,IAAI,2DAA2D,CACnG,CAAqB,EAEDA,EAAG,SAAW,EAClC,CAAiB,EAAE,QAAQ,IAAM,CACbA,EAAG,UAAY,EACnC,CAAiB,CACjB,CAAa,EAAE,MAAM,IAAM,CACXA,EAAG,wBAAwB,CACvB,MAAOA,EAAG,IAAI,yDAAyD,EACvE,QAASA,EAAG,IAAI,2DAA2D,CAC/F,CAAiB,EAEDA,EAAG,SAAW,GACdA,EAAG,UAAY,EAC/B,CAAa,CACJ,EAED,oCAAoCqB,EAAO,CACvC,KAAK,YAAY,YAAY,QAASK,GAAe,CACjD,UAAWC,KAAYN,EAAM,UACzB,GAAIK,EAAW,YAAcC,EAAS,QAAQ,cAAe,CACzDD,EAAW,QAAUC,EAAS,QAAQ,QAEtC,MACxB,CAEa,CAAA,CACJ,EAED,uBAAuBC,EAAqB,CACxC,KAAK,sBAAwBA,CACzC,CACA,CACA,CAAC,EC/ID,MAAeC,GAAA,q+ECGT,WAAE5C,GAAS,MAAEW,EAAK,EAAK,SAE7BX,GAAU,SAAS,wBAAyB,CAC5C,SAAIE,GAEA,OAAQ,CACJS,GAAM,UAAU,cAAc,CACjC,EAED,OAAQ,CAAC,2BAA2B,EAEpC,MAAO,CACH,YAAa,CACT,KAAM,OACN,SAAU,EACtB,CACK,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,SAAU,GACV,iBAAkB,GAClB,oBAAqB,GACrB,UAAW,CAAE,EACb,cAAe,EACf,YAAa,EAChB,CACJ,EAED,SAAU,CACN,eAAgB,CAOZ,MANI,OAAK,YAAY,eAAiB,YAGlC,KAAK,YAAY,eAAiB,aAGlC,KAAK,YAAY,kBAAoB,EAK5C,EAED,kBAAmB,CACf,OAAO,KAAK,YAAY,gBAC3B,EAED,iBAAkB,CACd,MAAO,IACV,EAED,gBAAiB,CACb,OAAO,SAAS,OAAO,UAAU,UAAU,CAC9C,CACJ,EAED,QAAS,CACL,kBAAmB,CACf,KAAK,iBAAmB,GACxB,KAAK,oBAAsB,GAE3B,KAAK,cAAgB,KAAK,YAAY,iBACtC,KAAK,YAAc,GACnB,KAAK,UAAY,CAAE,CACtB,EAED,wBAAyB,CACrB,IAAIkC,EAAS,EAEb,KAAK,UAAU,QAASC,GAAc,CAC9BA,EAAU,WACVD,GAAWC,EAAU,WAAa,IAAOA,EAAU,SAEvE,CAAa,GAEGD,IAAW,GAAKA,EAAS,KAAK,YAAY,oBAC1CA,EAAS,KAAK,YAAY,kBAG9BA,EAAS,CAACA,EACVA,EAAS,OAAOA,EAAO,QAAQ,CAAC,CAAC,EAEjC,KAAK,cAAgBA,CACxB,EAED,mBAAoB,CAChB,KAAK,iBAAmB,EAC3B,EAED,mBAAoB,CAChB,KAAK,oBAAsB,EAC9B,EAED,cAAe,CACX,KAAK,UAAY,GAEjB,MAAME,EAAa,CAAE,EAErB,KAAK,UAAU,QAASD,GAAc,CAClC,KAAK,YAAY,YAAY,QAASE,GAAc,CAChD,GAAIA,EAAU,YAAcF,EAAU,WAAaA,EAAU,UAAYA,EAAU,SAAU,CACzF,MAAMG,EAAO,CAAE,GAAGD,CAAW,EAE7BC,EAAK,SAAWH,EAAU,SAC1BG,EAAK,aAAeA,EAAK,WAAaA,EAAK,SAE3C,MAAMC,EAAUD,EAAK,SAAW,IAEhCA,EAAK,iBAAmB,KAAK,MAAMA,EAAK,cAAgB,IAAMC,GAAWA,CAAO,EAEhFH,EAAW,KAAKE,CAAI,CAC5C,CACA,CAAiB,CACjB,CAAa,EAED,MAAMzD,EAAU,CACZ,mBAAoB,KAAK,YAAY,mBACrC,SAAU,KAAK,YAAY,UAC3B,gBAAiB,KAAK,YAAY,SAClC,aAAc,KAAK,YAAY,aAC/B,cAAe,KAAK,cACpB,YAAa,KAAK,YAClB,WAAY,KAAK,UAAUuD,CAAU,EACrC,SAAU,KAAK,gBAAkB,KAAK,gBACzC,EAED,KAAK,0BAA0B,aAAavD,CAAO,EAAE,KAAK,IAAM,CAC5D,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,8DAA8D,EAC9E,QAAS,KAAK,IAAI,gEAAgE,CACtG,CAAiB,EAED,KAAK,oBAAsB,EAC3C,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,4DAA4D,EAC5E,QAAS,KAAK,IAAI,8DAA8D,CACpG,CAAiB,EAED,KAAK,oBAAsB,EAC3C,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,UAAY,GACjB,KAAK,iBAAmB,GAExB,KAAK,MAAM,QAAQ,CACnC,CAAa,CACJ,EAED,aAAa2D,EAAWC,EAAU,CAC1B,KAAK,UAAU,SAAW,GAC1B,KAAK,2BAA4B,EAGrC,KAAK,UAAU,QAASN,GAAc,CAC9BA,EAAU,YAAcK,IACxBL,EAAU,SAAWM,EAEzC,CAAa,EAED,KAAK,uBAAwB,CAChC,EAED,iBAAiBD,EAAWE,EAAU,CAC9B,KAAK,UAAU,SAAW,GAC1B,KAAK,2BAA4B,EAGrC,KAAK,UAAU,QAASP,GAAc,CAC9BA,EAAU,YAAcK,IACxBL,EAAU,SAAWO,EAEzC,CAAa,EAED,KAAK,uBAAwB,CAChC,EAED,oBAAoBC,EAAa,CAGzBA,EAAY,QAAU,IACtB,KAAK,YAAcA,EAAY,OAAO,EAAG,GAAQ,EAEjD,KAAK,YAAcA,CAE1B,EAED,4BAA6B,CACzB,KAAK,YAAY,YAAY,QAASN,GAAc,CAChD,KAAK,UAAU,KAAK,CAChB,SAAUA,EAAU,SAAWA,EAAU,kBACzC,UAAWA,EAAU,UACrB,WAAYA,EAAU,WACtB,SAAU,EAC9B,CAAiB,CACjB,CAAa,CACb,CACA,CACA,CAAC,EC1MD,MAAeO,GAAA,8yDCET,CAAA,UAAEvD,GAAWY,QAAAA,GAAS,YAAArC,EAAW,EAAK,SACtC,UAAE4B,EAAQ,EAAK,SAAS,KACxB,CAAE,SAAAqD,EAAU,EAAG,SAAS,MAAM,OAEpCxD,GAAU,SAAS,qBAAsB,CACzC,SAAIE,GAEA,MAAO,CACH,YAAa,CACT,KAAM,OACN,SAAU,EACb,EAED,KAAM,CACF,KAAM,OACN,SAAU,EACb,EAED,WAAY,CACR,KAAM,OACN,SAAU,CACN,MAAO,CAAE,CACZ,EACD,SAAU,EACb,EAED,wBAAyB,CACrB,KAAM,QACN,QAAS,GACT,SAAU,EACb,EAED,oBAAqB,CACjB,KAAM,QACN,QAAS,GACT,SAAU,EACtB,CACK,EAED,SAAU,CACN,YAAa,CACT,MAAMwB,EAAO,CAAE,EAEf,YAAK,YAAY,YAAY,QAASsB,GAAc,CAChD,MAAMS,EAAQD,GACVR,EAAU,aAAe,IACzB,KAAK,YAAY,QACpB,EAED,IAAIU,EAAW,GACXL,EAAWL,EAAU,SAErB,KAAK,OAAS,UAAYA,EAAU,kBAAoB,IACxDK,EAAWL,EAAU,mBAGrB,KAAK,OAAS,UACdK,GAAYL,EAAU,kBACf,KAAK,OAAS,WACrBK,GAAYL,EAAU,mBAGtBK,GAAY,IACZK,EAAW,IAGfhC,EAAK,KAAK,CACN,GAAIsB,EAAU,UACd,UAAWA,EAAU,UACrB,QAASA,EAAU,KACnB,QAASA,EAAU,QACnB,OAAQK,EACR,SAAUK,EACV,MAAOD,EACP,UAAWT,EACX,aAAc,KAAK,WAAWA,EAAU,SAAS,CACrE,CAAiB,CACjB,CAAa,EAEMtB,CACV,EAED,kBAAmB,CACf,IAAIiC,EAAW,CACX,CACI,SAAU,YACV,MAAO,KAAK,IAAI,yDAAyD,EACzE,WAAY,SACZ,QAAS,EACZ,EACD,CACI,SAAU,UACV,MAAO,KAAK,IAAI,uDAAuD,EACvE,WAAY,SACZ,QAAS,EACZ,EACD,CACI,SAAU,SACV,MAAO,KAAK,IAAI,sDAAsD,EACtE,WAAY,SACZ,QAAS,EACZ,EACD,CACI,SAAU,QACV,MAAO,KAAK,IAAI,qDAAqD,EACrE,WAAY,SACZ,QAAS,EAC7B,CACa,EAED,OAAI,KAAK,OAAS,UAAY,KAAK,yBAC/BA,EAAQ,KAAK,CACT,SAAU,eACV,MAAO,KAAK,IAAI,4DAA4D,EAC5E,QAAS,EAC7B,CAAiB,EAGEA,CACV,EAED,gBAAiB,CACb,OAAO,SAAS,OAAO,UAAU,UAAU,CAC9C,CACJ,EAED,QAAS,CACL,aAAab,EAAWc,EAAMR,EAAU,CACpC,KAAK,MAAM,cAAeQ,EAAK,GAAIR,CAAQ,CAC9C,EAED,iBAAiBD,EAAW,CACxB,IAAIU,EAAYV,EAAU,OACvBU,EAAYV,EAAU,UAAU,WAC/BU,EAAYV,EAAU,UAAU,UAEpCA,EAAU,OAASU,EAEnB,KAAK,MAAM,kBAAmBV,EAAU,GAAIA,EAAU,MAAM,CACxE,CACA,CACA,CAAC,EC/ID,MAAeW,GAAA,mmDCGT,WAAE9D,GAAS,MAAEW,EAAK,EAAK,SAE7BX,GAAU,SAAS,+BAAgC,CACnD,SAAIE,GAEA,MAAO,CACH,YAAa,CACT,KAAM,OACN,SAAU,EACtB,CACK,EAED,OAAQ,CACJ,2BACH,EAED,OAAQ,CACJS,GAAM,UAAU,cAAc,CACjC,EAED,SAAU,CACN,gBAAiB,CAOb,OANa,KAAK,MAAM,KAAK,YAAY,WAAW,EAEzC,IAAI,KAAK,KAAK,GAAK,KAAK,YAAY,kBAAoB,GAI/D,KAAK,YAAY,eAAiB,WAKzC,EAED,YAAa,CACT,OAAO,SAAS,OAAO,UAAU,MAAM,CAC1C,CACJ,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,WAAY,GACZ,UAAW,GACX,aAAc,EACjB,CACJ,EAED,QAAS,CACL,qBAAsB,CAClB,KAAK,MAAM,sBAAuB,EAAI,EAEtC,KAAK,UAAY,GACjB,KAAK,WAAa,GAElB,KAAK,0BAA0B,oBAAoB,KAAK,YAAY,UAAW,KAAK,YAAY,QAAQ,EAAE,KAAK,IAAM,CACjH,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,gFAAgF,EAChG,QAAS,KAAK,IAAI,kFAAkF,CACxH,CAAiB,EAED,KAAK,aAAe,EACpC,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,8EAA8E,EAC9F,QAAS,KAAK,IAAI,gFAAgF,CACtH,CAAiB,EAED,KAAK,aAAe,EACpC,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,MAAM,sBAAuB,EAAK,EACvC,KAAK,MAAM,SAAU,EAAI,EAEzB,KAAK,UAAY,GACjB,KAAK,UAAY,GACjB,KAAK,WAAa,EAClC,CAAa,CACJ,EAED,WAAY,CACR,KAAK,UAAY,GACjB,KAAK,aAAe,EACvB,EAED,YAAa,CACT,KAAK,UAAY,EAC7B,CACA,CACA,CAAC,EC5FD,MAAeoD,GAAA,stCCGT,WAAE/D,GAAS,MAAEW,EAAK,EAAK,SAE7BX,GAAU,SAAS,sBAAuB,CAC1C,SAAIE,GAEA,MAAO,CACH,YAAa,CACT,KAAM,OACN,SAAU,EACtB,CACK,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,aAAc,GACd,aAAc,EACjB,CACJ,EAED,SAAU,CACN,YAAa,CACT,MAAO,EAAE,KAAK,YAAY,kBAAoB,GAAK,KAAK,YAAY,eAAiB,YACjG,CACK,EAED,OAAQ,CACJS,GAAM,UAAU,cAAc,CACjC,EAED,OAAQ,CAAC,2BAA2B,EAEpC,QAAS,CACL,WAAY,CACR,KAAK,aAAe,GACpB,KAAK,UAAY,EACpB,EAED,YAAa,CACT,KAAK,aAAe,EACvB,EAED,eAAgB,CACZ,KAAK,MAAM,sBAAuB,EAAI,EAEtC,KAAK,WAAa,GAClB,KAAK,UAAY,GAEjB,KAAK,0BAA0B,cAC3B,KAAK,YAAY,mBACjB,KAAK,YAAY,UACjB,KAAK,YAAY,SACjB,KAAK,YAAY,YACpB,EAAC,KAAK,IAAM,CACT,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,oEAAoE,EACpF,QAAS,KAAK,IAAI,sEAAsE,CAC5G,CAAiB,EAED,KAAK,aAAe,EACpC,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,oEAAoE,EACpF,QAAS,KAAK,IAAI,sEAAsE,CAC5G,CAAiB,EAED,KAAK,aAAe,EACpC,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,MAAM,QAAQ,EACnB,KAAK,MAAM,sBAAuB,EAAK,EAEvC,KAAK,UAAY,GACjB,KAAK,aAAe,EACpC,CAAa,CACb,CACA,CACA,CAAC,EC/ED,MAAeqD,GAAA,ilFCGT,CAAA,UAAEhE,GAAWW,MAAAA,GAAO,QAAAC,EAAO,EAAK,SAChC,CAAE,SAAAT,CAAQ,EAAK,SAAS,KAE9BH,GAAU,SAAS,uBAAwB,CAC3C,SAAIE,GAEA,OAAQ,CACJS,GAAM,UAAU,cAAc,CACjC,EAED,OAAQ,CAAC,4BAA6B,mBAAmB,EAEzD,MAAO,CACH,YAAa,CACT,KAAM,OACN,SAAU,EACtB,CACK,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,SAAU,GACV,gBAAiB,GACjB,mBAAoB,GACpB,UAAW,CAAE,EACb,aAAc,EACd,YAAa,GACb,WAAY,CAAE,EACd,wBAAyB,GACzB,oBAAqB,EACxB,CACJ,EAED,SAAU,CACN,KAAK,6BAA8B,CACtC,EAED,SAAU,CACN,iBAAkB,CACd,OAAQ,KAAK,YAAY,gBAAkB,KAAK,YAAY,iBAAiB,QAAQ,CAAC,CACzF,EAED,eAAgB,CAOZ,MANI,OAAK,iBAAmB,GAGxB,KAAK,YAAY,eAAiB,aAGlC,KAAK,YAAY,iBAAmB,EAK3C,EAED,iBAAkB,CACd,OAAO,KAAK,eACf,EAED,gBAAiB,CACb,MAAO,IACV,EAED,gBAAiB,CACb,OAAO,SAAS,OAAO,UAAU,UAAU,CAC9C,CACJ,EAED,QAAS,CACL,8BAA+B,CAC3B,GAAI,CACA,MAAMI,EAAK,KACLkD,EAAwB,KAAK,kBAAkB,OAAO,cAAc,EACpE7D,EAAW,IAAID,EAErBC,EAAS,UAAUD,EAAS,OAAO,UAAW,KAAK,OAAO,OAAO,EAAE,CAAC,EACpEC,EAAS,eAAe,WAAW,EACnCA,EAAS,eAAe,iBAAiB,EACzCA,EAAS,eAAe,4BAA4B,EAEpD,IAAI8D,EAEJ,KAAK,oBAAsB,GAE3BD,EAAsB,OAAO7D,EAAUQ,GAAQ,GAAG,EAAE,KAAMuD,GAAW,CACjEA,EAAO,QAASC,GAAgB,CAC5BA,EAAY,UAAU,QAASC,GAAwB,CACnDH,EAAgBG,EAAoB,SAAS,QAAQ,cAEhDtD,EAAG,WAAWmD,CAAa,IAC5BnD,EAAG,WAAWmD,CAAa,EAAI,CAAE,GAGhCnD,EAAG,WAAWmD,CAAa,EAAEE,EAAY,YAAY,IACtDrD,EAAG,WAAWmD,CAAa,EAAEE,EAAY,YAAY,EAAIC,EAEzF,CAAyB,CACzB,CAAqB,EAEDtD,EAAG,oBAAsB,EAC7C,CAAiB,EAEDA,EAAG,wBAA0B,EAChC,MAAW,CAExB,CACS,EAED,iBAAkB,CACd,KAAK,gBAAkB,GACvB,KAAK,mBAAqB,GAE1B,KAAK,aAAe,KAAK,gBACzB,KAAK,YAAc,GACnB,KAAK,UAAY,CAAE,CACtB,EAED,uBAAwB,CACpB,IAAI8B,EAAS,EAEb,KAAK,UAAU,QAASC,GAAc,CAC9BA,EAAU,WACVD,GAAWC,EAAU,WAAa,IAAOA,EAAU,SAEvE,CAAa,GAEGD,IAAW,GAAKA,EAAS,KAAK,mBAC9BA,EAAS,KAAK,iBAGlBA,EAAS,CAACA,EACVA,EAASA,EAAO,QAAQ,CAAC,EAEzB,KAAK,aAAeA,CACvB,EAED,kBAAmB,CACf,KAAK,gBAAkB,EAC1B,EAED,kBAAmB,CACf,KAAK,mBAAqB,EAC7B,EAED,aAAc,CACV,KAAK,UAAY,GAEjB,MAAME,EAAa,CAAE,EAErB,KAAK,UAAU,QAASD,GAAc,CAClC,KAAK,YAAY,YAAY,QAASE,GAAc,CAChD,GAAIA,EAAU,YAAcF,EAAU,WAAaA,EAAU,UAAYA,EAAU,SAAW,EAAG,CAC7F,MAAMG,EAAO,CAAE,GAAGD,CAAW,EAE7BC,EAAK,SAAWH,EAAU,SAC1BG,EAAK,aAAeA,EAAK,WAAaA,EAAK,SAE3C,MAAMC,EAAUD,EAAK,SAAW,IAEhCA,EAAK,iBAAmB,KAAK,MAAMA,EAAK,cAAgB,IAAMC,GAAWA,CAAO,EAEhFH,EAAW,KAAKE,CAAI,CAC5C,CACA,CAAiB,CACjB,CAAa,EAED,MAAMzD,EAAU,CACZ,mBAAoB,KAAK,YAAY,mBACrC,SAAU,KAAK,YAAY,UAC3B,gBAAiB,KAAK,YAAY,SAClC,aAAc,KAAK,YAAY,aAC/B,aAAc,KAAK,aACnB,YAAa,KAAK,YAClB,WAAY,KAAK,UAAUuD,CAAU,EACrC,SAAU,KAAK,eAAiB,KAAK,eACxC,EAED,KAAK,0BAA0B,YAAYvD,CAAO,EAAE,KAAK,IAAM,CAC3D,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,6DAA6D,EAC7E,QAAS,KAAK,IAAI,+DAA+D,CACrG,CAAiB,EAED,KAAK,mBAAqB,EAC1C,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,2DAA2D,EAC3E,QAAS,KAAK,IAAI,6DAA6D,CACnG,CAAiB,EAED,KAAK,mBAAqB,EAC1C,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,MAAM,QAAQ,EAEnB,KAAK,UAAY,GACjB,KAAK,gBAAkB,EACvC,CAAa,CACJ,EAED,aAAa2D,EAAWC,EAAU,CAC1B,KAAK,UAAU,SAAW,GAC1B,KAAK,2BAA4B,EAGrC,KAAK,UAAU,QAASN,GAAc,CAC9BA,EAAU,YAAcK,IACxBL,EAAU,SAAWM,EAEzC,CAAa,EAED,KAAK,sBAAuB,CAC/B,EAED,iBAAiBD,EAAWE,EAAU,CAC9B,KAAK,UAAU,SAAW,GAC1B,KAAK,2BAA4B,EAGrC,KAAK,UAAU,QAASP,GAAc,CAC9BA,EAAU,YAAcK,IACxBL,EAAU,SAAWO,EAEzC,CAAa,EAED,KAAK,sBAAuB,CAC/B,EAED,oBAAoBC,EAAa,CAGzBA,EAAY,QAAU,IACtB,KAAK,YAAcA,EAAY,OAAO,EAAG,GAAQ,EAEjD,KAAK,YAAcA,CAE1B,EAED,4BAA6B,CACzB,KAAK,YAAY,YAAY,QAASN,GAAc,CAChD,IAAIK,EAAWL,EAAU,SAErBA,EAAU,kBAAoB,IAC9BK,EAAWL,EAAU,mBAGzB,KAAK,UAAU,KAAK,CAChB,SAAUK,EAAWL,EAAU,kBAC/B,UAAWA,EAAU,UACrB,WAAYA,EAAU,WACtB,SAAU,EAC9B,CAAiB,CACjB,CAAa,CACb,CACA,CACA,CAAC,ECnQD,MAAesB,GAAA,mjDCGT,WAAEtE,GAAS,MAAEW,EAAK,EAAK,SAE7BX,GAAU,SAAS,wBAAyB,CAC5C,SAAIE,GAEA,MAAO,CACH,YAAa,CACT,KAAM,OACN,SAAU,EACtB,CACK,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,WAAY,GACZ,aAAc,GACd,aAAc,EACjB,CACJ,EAED,OAAQ,CACJS,GAAM,UAAU,cAAc,CACjC,EAED,OAAQ,CAAC,2BAA2B,EAEpC,SAAU,CACN,gBAAiB,CAKb,OAJI,KAAK,YAAY,eAAiB,aAIlC,KAAK,YAAY,kBAAoB,EAC9B,GAGJ,KAAK,YAAY,iBAAmB,CAC9C,EAED,gBAAiB,CACb,OAAO,SAAS,OAAO,UAAU,UAAU,CAC9C,CACJ,EAED,QAAS,CACL,+BAAgC,CAC5B,KAAK,MAAM,sBAAuB,EAAI,EACtC,KAAK,WAAa,GAClB,KAAK,UAAY,GAEjB,KAAK,0BAA0B,8BAC3B,KAAK,YAAY,UACjB,KAAK,YAAY,SACjB,KAAK,YAAY,YACpB,EAAC,KAAK,IAAM,CACT,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,+DAA+D,EAC/E,QAAS,KAAK,IAAI,iEAAiE,CACvG,CAAiB,EAED,KAAK,aAAe,EACpC,CAAa,EAAE,MAAM,IAAM,CACX,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,6DAA6D,EAC7E,QAAS,KAAK,IAAI,+DAA+D,CACrG,CAAiB,EAED,KAAK,aAAe,EACpC,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,MAAM,QAAQ,EACnB,KAAK,MAAM,sBAAuB,EAAK,EAEvC,KAAK,UAAY,GACjB,KAAK,aAAe,GACpB,KAAK,WAAa,EAClC,CAAa,CACJ,EAED,WAAY,CACR,KAAK,aAAe,EACvB,EAED,YAAa,CACT,KAAK,aAAe,EAChC,CACA,CACA,CAAC,EC1FD,MAAeT,GAAA,qlKCGT,WAAEF,GAAW,MAAAW,EAAK,EAAK,SAE7BX,GAAU,SAAS,6BAA8B,CAC7C,SAAAE,GAEA,MAAO,CACH,cAAe,CACX,KAAM,MACN,SAAU,EACb,EAED,YAAa,CACT,KAAM,OACN,SAAU,EACtB,CACK,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,SAAU,GACV,gBAAiB,GACjB,aAAc,CAAE,EAChB,cAAe,CAAE,EACjB,gBAAiB,KACjB,gBAAiB,GACjB,eAAgB,GAChB,eAAgB,GAChB,cAAe,GACf,kBAAmB,CAAA,CACtB,CACJ,EAED,MAAO,CACH,aAAc,CACV,KAAM,GACN,UAAW,GACX,SAAU,CACO,KAAK,eAAd,OAGJ,KAAK,YAAc,CACf,CAAE,KAAM,QAAS,MAAO,KAAK,YAAY,YAAY,CACxD,EACG,KAAK,aAAa,iBAClB,KAAK,YAAY,KAAK,CAAE,KAAM,WAAY,MAAO,KAAK,aAAa,gBAAkB,GAAG,CAAC,EAEzF,KAAK,aAAa,iBAClB,KAAK,YAAY,KAAK,CAAE,KAAM,WAAY,MAAO,KAAK,aAAa,gBAAmB,GAAG,CAAC,EAE9G,CACS,EAED,cAAe,CACX,KAAM,GACN,UAAW,GACX,SAAU,CACN,MAAMqE,EAAkB,+DAExB,KAAK,kBAAoB,CAAE,EAE3B,KAAK,cAAc,QAAS5C,GAAY,CACpC,MAAM6C,EAAWD,EAAkB5C,EAAQ,QACrC8C,EAAc,KAAK,IAAID,CAAQ,EAC/BE,EAAoB,OAAO,OAAO,CAAA,EAAI/C,CAAO,EAE/C8C,IAAgBD,EAChBE,EAAkB,QAAU,GAAG,KAAK,IAAI,GAAGH,CAAe,UAAU,CAAC,KAAK5C,EAAQ,OAAO,IAEzF+C,EAAkB,QAAUD,EAGhC,KAAK,kBAAkB,KAAKC,CAAiB,CACjE,CAAiB,CACjB,CACA,CACK,EAED,OAAQ,CAAC,2BAA2B,EAEpC,OAAQ,CACJ/D,GAAM,UAAU,cAAc,CACjC,EAED,SAAU,CACN,cAAe,CACX,MAAO,CACH,SAAU,EACb,CACJ,EAED,2BAA4B,CACxB,MAAO,CACH,CACI,SAAU,SACV,MAAO,KAAK,IAAI,mEAAmE,EACnF,QAAS,EACZ,EACD,CACI,SAAU,OACV,MAAO,KAAK,IAAI,iEAAiE,EACjF,QAAS,EACZ,EACD,CACI,SAAU,UACV,MAAO,KAAK,IAAI,oEAAoE,EACpF,QAAS,EAC7B,CACa,CACJ,EAED,4BAA6B,CACzB,MAAO,CACH,CACI,SAAU,OACV,MAAO,KAAK,IAAI,qEAAqE,EACrF,QAAS,MACZ,EACD,CACI,SAAU,QACV,MAAO,KAAK,IAAI,sEAAsE,EACtF,QAAS,MAC7B,CACa,CACJ,EAED,gBAAiB,CACb,OAAO,SAAS,OAAO,UAAU,UAAU,CAC9C,EAED,YAAa,CACT,OAAO,SAAS,OAAO,UAAU,MAAM,CACnD,CACK,EAED,QAAS,CACL,gBAAgBiD,EAAM,CAClB,MAAMe,EAAiB,KAAK,MAAMf,EAAK,QAAQ,EACzCgB,EAAgB,KAAK,MAAMhB,EAAK,OAAO,EAE7C,KAAK,gBAAkB,GACvB,KAAK,QAAU,CAACA,EAAK,MACrB,KAAK,iBAAmB,GAAG,KAAK,IAAI,mDAAmD,CAAC,MAAMA,EAAK,OAAO,GAC1G,KAAK,aAAegB,EACpB,KAAK,cAAgBD,EACrB,KAAK,gBAAkBf,EAAK,WAAaA,EAAK,WAAa,KAEvD,OAAO,KAAKe,CAAc,EAAE,SAAW,GAAKA,EAAe,cAAgB,SAC3E,KAAK,eAAiB,KAAK,UAAUA,EAAgB,KAAM,CAAC,EAAE,SAAU,GAGxE,OAAO,KAAKC,CAAa,EAAE,SAAW,GAAKA,EAAc,cAAgB,SACzE,KAAK,cAAgB,KAAK,UAAUA,EAAe,KAAM,CAAC,EAAE,SAAU,EAE7E,EAED,kBAAmB,CACf,KAAK,gBAAkB,GACvB,KAAK,aAAe,KACpB,KAAK,cAAgB,KACrB,KAAK,eAAiB,GACtB,KAAK,cAAgB,GACrB,KAAK,eAAiB,GACtB,KAAK,gBAAkB,EAC1B,EAED,0BAA2B,CACvB,KAAK,gBAAkB,CAAC,KAAK,gBAC7B,KAAK,eAAiB,EACzB,EAED,yBAA0B,CACtB,KAAK,eAAiB,CAAC,KAAK,eAC5B,KAAK,gBAAkB,EACnC,CACA,CACA,CAAC,41UCnKK,CAAE,OAAA/C,EAAQ,EAAG,SAEnBA,GAAO,SAAS,kCAAmC,CAC/C,KAAM,SACN,KAAM,gBACN,MAAO,gDACP,YAAa,gEACb,QAAS,QACT,cAAe,QAEf,SAAU,CACN,QAASE,GACT,QAASC,EACZ,EAED,gBAAgB6C,EAAMC,EAAc,CAC5BA,EAAa,OAAS,mBACtBA,EAAa,SAAS,KAAK,CACvB,UAAW,qBACX,KAAM,iDACN,WAAY,GACZ,KAAM,CACF,WAAY,gBACf,EACD,KAAM,0CACtB,CAAa,EAGLD,EAAKC,CAAY,CACzB,CACA,CAAC,EC9CD,KAAM,CAAE9E,UAAAA,EAAW,EAAG,SAEtBA,GAAU,SAAS,mBAAoB,CAEnC,SAAU,CACN,gCAAiC,CAC7B,IAAI+E,EAAQ,KAAK,OAAO,gCAAgC,EAExD,OAAI,KAAK,SAAW,2BAChBA,EAAM,KAAK,eAAe,EAC1BA,EAAM,KAAK,cAAc,GAGtBA,CACnB,CACK,EAED,QAAS,CACL,sBAAsB3D,EAAgB,CAClC,KAAK,OAAO,wBAAyBA,CAAc,EAEnD,KAAK,MAAM,uBAAwB,KAAK,qBAAqB,CAChE,EAED,yBAAyBO,EAAS,CAC9B,MAAMqD,EAAuB,CACzB,0CACA,2BACA,+BACA,4BACA,6BACH,EAEKC,EAAgBtD,EAAQ,OAASA,EAAQ,OAAO,cAAgB,OAEtE,OAAIqD,EAAqB,SAASC,CAAa,EACpC,GAGJ,KAAK,OAAO,2BAA4BtD,CAAO,CACzD,CACT,CACA,CAAC,EC1CD,KAAM,CAAE,UAAA3B,EAAW,EAAG,SAEtBA,GAAU,SAAS,yBAA0B,CACzC,SAAU,CACN,oBAAqB,CACjB,GAAI,CAAC,2BAA4B,8BAA+B,+BAAgC,2BAA2B,EAAE,SAAS,KAAK,aAAa,EAAG,CACvJ,GAAI,CAAC,KAAK,OAAO,eAAe,SAAS,EACrC,MAAO,CAAE,EAGb,MAAMkF,EAAU,CAAE,EAClB,IAAIC,EAAgB,QAGpB,OAAI,KAAK,OAAO,eAAe,eAAe,IAC1CA,EAAgB,KAAK,OAAO,eAGhC,KAAK,OAAO,QAAQ,QAAQC,GAAU,CAClC,MAAMX,EAAc,KAAK,gBACrB,UACAW,EACA,CAACD,CAAa,CACjB,EAEKE,EAAmB,CAAE,GAAGD,EAAQ,GAAGX,CAAa,EACtDS,EAAQ,KAAKG,CAAgB,CACjD,CAAiB,EAEM,CAAE,QAAAH,CAAS,CAClC,CAEY,OAAO,KAAK,OAAO,oBAAoB,CAC1C,CACT,CACA,CAAC"}